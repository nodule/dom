require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],2:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],3:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],4:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],5:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":4,"_process":3,"inherits":2}],6:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var link_1 = require("./link");
var IIP = /** @class */ (function (_super) {
    __extends(IIP, _super);
    function IIP() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IIP.create = function (linkDefinition) {
        if (linkDefinition === void 0) { linkDefinition = {}; }
        return _super.create.call(this, linkDefinition, IIP);
    };
    return IIP;
}(link_1.Link));
exports.IIP = IIP;

},{"./link":68}],7:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var flow_1 = require("./flow");
var defaultDefinition = {
    id: 'flow:main',
    links: [],
    name: 'main',
    nodes: [],
    ns: 'flow',
    type: 'flow'
};
var Actor = /** @class */ (function (_super) {
    __extends(Actor, _super);
    function Actor(flowDefinition) {
        if (flowDefinition === void 0) { flowDefinition = defaultDefinition; }
        return _super.call(this, 'flow:main', flowDefinition) || this;
    }
    return Actor;
}(flow_1.Flow));
exports.Actor = Actor;

},{"./flow":42}],8:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var packet_1 = require("../packet");
var util_1 = require("../util");
function $Event(Base) {
    return /** @class */ (function (_super) {
        __extends(Event$, _super);
        function Event$() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, __spread(args)) || this;
            _this._eventEmitter = new events_1.EventEmitter();
            _this._eventEmitter.listeners = _this._eventEmitter.listeners.bind(_this._eventEmitter);
            return _this;
        }
        Object.defineProperty(Event$.prototype, "listeners", {
            get: function () {
                return this._eventEmitter.listeners;
            },
            enumerable: true,
            configurable: true
        });
        Event$.prototype.emit = function (eventName) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var _a;
            (_a = this._eventEmitter).emit.apply(_a, __spread([eventName], args));
        };
        Event$.prototype.on = function (eventName, callback) {
            this._eventEmitter.on(eventName, callback);
        };
        Event$.prototype.once = function (eventName, callback) {
            this._eventEmitter.once(eventName, callback);
        };
        Event$.prototype.removeListener = function (eventName, listenerFunction) {
            this._eventEmitter.removeListener(eventName, listenerFunction);
        };
        /**
         * Does both send events through output ports
         * and emits them.
         *
         * @param {xEvent} xevent
         * @param {data} data
         * @protected
         */
        Event$.prototype.event = function (xevent, data) {
            if (xevent.expose) {
                this.sendPortOutput(":" + xevent.name, packet_1.Packet.create(data));
            }
            // process.nextTick(() => {
            this.emit(xevent.name, data);
            // })
        };
        return Event$;
    }(Base));
}
exports.$Event = $Event;
(function ($Event) {
    function create(Base) {
        return util_1.mixin($Event)(Base);
    }
    $Event.create = create;
})($Event = exports.$Event || (exports.$Event = {}));

},{"../packet":93,"../util":122,"events":1}],9:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function $Identity(Base) {
    return /** @class */ (function (_super) {
        __extends(Identity$, _super);
        function Identity$() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, __spread(args)) || this;
            _this.provider = '';
            _this.ns = '';
            _this.name = '';
            _this.type = 'Undefined';
            var _a = util_1.getNodeArgument(args), id = _a.id, node = _a.node;
            if (!id) {
                throw Error("Node id is required.");
            }
            if (!node.ns) {
                throw Error("Node ns is required.");
            }
            if (!node.name) {
                throw Error("Node name is required.");
            }
            if (!node.type) {
                throw Error("Node type is required.");
            }
            _this.id = id;
            _this.name = node.name;
            _this.ns = node.ns;
            _this.type = node.type;
            if (node.provider) {
                _this.provider = node.provider;
            }
            return _this;
        }
        Object.defineProperty(Identity$.prototype, "identifier", {
            get: function () {
                return this._identifier || this.ns + ":" + this.name;
            },
            set: function (value) {
                this._identifier = value;
            },
            enumerable: true,
            configurable: true
        });
        return Identity$;
    }(Base));
}
exports.$Identity = $Identity;
(function ($Identity) {
    function create(Base) {
        return util_1.mixin($Identity)(Base);
    }
    $Identity.create = create;
})($Identity = exports.$Identity || (exports.$Identity = {}));

},{"../util":122}],10:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./event"));
__export(require("./identity"));
__export(require("./meta"));
__export(require("./parent"));
__export(require("./status"));

},{"./event":8,"./identity":9,"./meta":11,"./parent":12,"./status":13}],11:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var forOf = require("object-forof");
var util_1 = require("../util");
function $Meta(Base) {
    return /** @class */ (function (_super) {
        __extends(Meta$, _super);
        function Meta$() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, __spread(args)) || this;
            _this.metadata = {};
            _this.title = '';
            _this.description = '';
            if (args.length) {
                var node = args[0].node;
                if (node) {
                    _this.title = node.title;
                    if (node.description) {
                        _this.description = node.description;
                    }
                    if (node.metadata) {
                        _this.metadata = node.metadata || {};
                    }
                }
            }
            return _this;
        }
        /**
         *
         * Set Title
         *
         * Used to set the title of a node *within* a graph.
         * This property overwrites the setting of the node definition
         * and is returned during toJSON()
         *
         * @param {string} title
         * @public
         */
        Meta$.prototype.setTitle = function (title) {
            this.title = title;
            return this;
        };
        /**
         *
         * Set Description
         *
         * Used to set the description of a node *within* a graph.
         * This property overwrites the setting of the node definition
         * and is returned during toJSON()
         *
         * @param {string} description
         * @public
         */
        Meta$.prototype.setDescription = function (description) {
            this.description = description;
            return this;
        };
        /**
         *
         * Set metadata
         *
         * Currently:
         *
         *   x: x position hint for display
         *   y: y position hint for display
         *
         * These values are returned during toJSON()
         *
         * @param {object} metadata
         * @public
         */
        Meta$.prototype.setMetadata = function (metadata) {
            var _this = this;
            forOf(function (name, val) {
                _this.setMeta(name, val);
            }, metadata);
            return this;
        };
        /**
         *
         * @param {string} key
         * @param {any} value
         */
        Meta$.prototype.setMeta = function (key, value) {
            this.metadata[key] = value;
            return this;
        };
        return Meta$;
    }(Base));
}
exports.$Meta = $Meta;
(function ($Meta) {
    function create(Base) {
        return util_1.mixin($Meta)(Base);
    }
    $Meta.create = create;
})($Meta = exports.$Meta || (exports.$Meta = {}));

},{"../util":122,"object-forof":161}],12:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function $Parent(Base) {
    return /** @class */ (function (_super) {
        __extends(Parent$, _super);
        function Parent$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.parent = null;
            return _this;
        }
        Parent$.prototype.setParent = function (node) {
            this.parent = node;
        };
        Parent$.prototype.getParent = function () {
            if (this.hasParent()) {
                return this.parent;
            }
            throw Error('Node has no parent.');
        };
        Parent$.prototype.hasParent = function () {
            return Boolean(this.parent);
        };
        return Parent$;
    }(Base));
}
exports.$Parent = $Parent;
(function ($Parent) {
    function create(Base) {
        return util_1.mixin($Parent)(Base);
    }
    $Parent.create = create;
})($Parent = exports.$Parent || (exports.$Parent = {}));

},{"../util":122}],13:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var node_1 = require("../events/node");
var util_1 = require("../util");
var event_1 = require("./event");
function $Status(Base) {
    return /** @class */ (function (_super) {
        __extends(Status$, _super);
        function Status$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.status = 'unknown';
            return _this;
        }
        Status$.prototype.setStatus = function (status) {
            this.status = status;
            /**
             * Status Update Event.
             *
             * Fired multiple times on output
             *
             * Once for every output port.
             *
             * @event BaseNode#statusUpdate
             * @type {object}
             * @property {object} node - An export of this node
             * @property {string} status - The status
             */
            this.event(node_1.NodeEvents.STATUS_UPDATE, {
                node: this.export(),
                status: this.status
            });
        };
        Status$.prototype.getStatus = function () {
            return this.status;
        };
        return Status$;
    }(Base));
}
exports.$Status = $Status;
(function ($Status) {
    function create(Base) {
        return util_1.mixin($Status, event_1.$Event.create)(Base);
    }
    $Status.create = create;
})($Status = exports.$Status || (exports.$Status = {}));

},{"../events/node":29,"../util":122,"./event":8}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function createBody(output, nodeDefinition) {
    return [
        output[0], '.',
        nodeDefinition.name,
        // output[1],
        '(',
        output.length > 2 ? output.slice(2).join(',') + ', ' : '',
        'function ' + nodeDefinition.name + 'Callback',
        '(',
        Object.keys(nodeDefinition.ports.output),
        ') {',
        'cb({',
        Object.keys(nodeDefinition.ports.output).map(function (k) {
            return k + ': ' + k;
        }).join(', '),
        '});',
        '});'
    ].join('');
}
exports.createBody = createBody;

},{}],15:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./createBody"));
__export(require("./parseBody"));

},{"./createBody":14,"./parseBody":16}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function parseBody(fn) {
    return fn
        .replace(/output\s*=/, '')
        .replace(/(\[|\])/g, '')
        .replace(/;/g, '')
        .trim().split(',');
}
exports.parseBody = parseBody;

},{}],17:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var packet_1 = require("../packet/packet");
var node_1 = require("../sandbox/node");
var compact = require("./compact");
var createPortBox_1 = require("./createPortBox");
var fix_1 = require("./fix");
/**
 *
 * Used to create a non dynamic definition for this node.
 * Having the node & port boxes pre-compiled
 */
function compile(nodeDefinition) {
    if (typeof nodeDefinition.fn !== 'string') {
        throw Error('Could not find function body `fn` at nodeDefinition.fn');
    }
    var fn = nodeDefinition.fn;
    delete nodeDefinition.fn;
    var nodebox = new node_1.NodeBox(fix_1.fix(nodeDefinition.name));
    var state = {};
    var output = {};
    var input = {};
    if (nodeDefinition.ports.input) {
        var inputPorts = nodeDefinition.ports.input;
        if (Object.keys(inputPorts).length) {
            Object.keys(inputPorts).forEach(function (key) {
                input[key] = packet_1.Packet.create(true);
            });
        }
    }
    nodebox.set('input', input);
    // const pc = new PacketContainer(input)
    nodebox.set('$', input);
    // done() is added to the nodebox
    // tslint:disable only-arrow-functions
    nodebox.set('done', function () { });
    nodebox.set('cb', function () { });
    // tslint:enable only-arrow-functions
    nodebox.set('state', state);
    if (nodeDefinition.dependencies &&
        nodeDefinition.dependencies.npm) {
        nodebox.require(nodeDefinition.dependencies.npm);
    }
    if (nodeDefinition.expose) {
        nodebox.expose(nodeDefinition.expose);
    }
    nodebox.set('output', output);
    if (/output(\.[A-z]+)?\s+=/.test(fn) &&
        // should not match = function
        /output\s*=\s*function/.test(fn) === false) {
        // array variant
        if (/output\s*=\s*\[/.test(fn)) {
            nodeDefinition.fn = nodebox.compile(compact.createBody(compact.parseBody(fn), nodeDefinition));
        }
        else {
            // Then consider the whole body as our function.
            nodebox.compile(fn);
            // Function(this.name, nodebox.code.replace(/^return /, ''))
            nodeDefinition.fn = nodebox.fn;
        }
        return nodeDefinition;
    }
    else {
        nodebox.compile(fn);
        nodebox.run();
        // port functions
        if (nodeDefinition.ports.input) {
            Object.keys(nodeDefinition.ports.input).forEach(function (port) {
                var nodeboxOnInput = nodebox.on.input;
                if (!nodeboxOnInput) {
                    throw Error('nodebox.on.input not defined');
                }
                if (nodeboxOnInput[port]) {
                    // should then be created as portbox.
                    var pb = createPortBox_1.createPortBox(nodeDefinition, nodeboxOnInput[port].toString(), ('__' + port + '__').toUpperCase());
                    nodeDefinition.ports.input[port].fn = pb.fn;
                    // State, only necessary when there are async..
                    nodeDefinition.state = state;
                }
            });
        }
        var preloadedNodeDefinition_1 = __assign({}, nodeDefinition, { on: {} });
        ['start', 'shutdown'].forEach(function (key) {
            if (nodebox.on[key]) {
                var pb = createPortBox_1.createPortBox(preloadedNodeDefinition_1, nodebox.on[key].toString(), ('__on' + key + '__').toUpperCase());
                pb.compile();
                preloadedNodeDefinition_1.on[key] = pb.fn;
            }
        });
        // NodeBox main()
        if (typeof nodebox.output === 'object' && nodebox.output.out) {
            // If it is an object we can just use that as the body.
            preloadedNodeDefinition_1.fn = nodebox.fn;
        }
        else if (typeof nodebox.output === 'function') {
            // could change this to default and not use function at all.
            preloadedNodeDefinition_1.fn = nodebox.output.toString()
                .replace(/function.*{/, '')
                .replace(/}.*$/, '')
                .trim()
                // preferred is now to just use output()
                .replace(/cb\s*\(/g, 'output(');
            nodebox.clear(); // reset
            preloadedNodeDefinition_1.fn = nodebox.compile(preloadedNodeDefinition_1.fn);
        }
        return preloadedNodeDefinition_1;
    }
}
exports.compile = compile;

},{"../packet/packet":94,"../sandbox/node":111,"./compact":15,"./createPortBox":18,"./fix":19}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var port_1 = require("../sandbox/port");
function createPortBox(nodeDefinition, fn, name) {
    var portbox = new port_1.PortBox(name);
    portbox.set('state', nodeDefinition.state);
    portbox.set('output', {});
    if (nodeDefinition.dependencies && nodeDefinition.dependencies.npm) {
        portbox.require(nodeDefinition.dependencies.npm, true);
    }
    fn = fn.slice(fn.indexOf('{') + 1, fn.lastIndexOf('}'));
    portbox.compile(fn);
    return portbox;
}
exports.createPortBox = createPortBox;

},{"../sandbox/port":112}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var namify = require("namify");
function fix(str) {
    str = namify(str);
    str = isNaN(parseInt(str[0], 10)) ? str : '_' + str;
    return str;
}
exports.fix = fix;

},{"namify":159}],20:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./compile"));
__export(require("./createPortBox"));

},{"./compile":17,"./createPortBox":18}],21:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var events_1 = require("./events");
var setting_1 = require("./setting");
var debug = _debug('chix:connector');
/**
 *
 * Connector
 *
 * The thing you plug into a port.
 *
 * Contains information about port and an optional
 * action to perform within the node (sub graph)
 *
 * Can also contains port specific settings.
 *
 * An xLink has a source and a target connector.
 *
 * ................... xLink ....................
 *
 *  -------------------.    .------------------
 * | Source Connector -------  Target Connector |
 *  ------------------'     `------------------
 *
 * When a link is plugged into a node, we do so
 * by plugging the target connector.
 *
 * @constructor
 * @public
 *
 */
var Connector = /** @class */ (function (_super) {
    __extends(Connector, _super);
    function Connector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.id = null;
        _this.pid = null;
        _this.port = null;
        _this.wire = null;
        return _this;
    }
    /**
     *
     * Create
     *
     * Creates a connector
     *
     * @param {String} id
     * @param {String} port
     * @param {Object} settings
     * @param {String} action
     */
    Connector.create = function (id, port, settings, action) {
        var c = new Connector(settings);
        c.plug(id, port, action);
        return c;
    };
    /**
     *
     * Plug
     *
     * @param {String} id
     * @param {String} port
     * @param {String} action
     */
    Connector.prototype.plug = function (id, port, action) {
        debug('plug %s:%s', id, port);
        this.id = id;
        this.port = port;
        if (action) {
            this.action = action;
        }
    };
    /**
     * Write packet to this connector
     *
     * @param packet
     * @fires Connector#data
     */
    Connector.prototype.write = function (packet) {
        var index = this.get('index');
        debug('write %s:%s %s', this.id, this.port, index === undefined ? '' : "[" + index + "]");
        this.emit(events_1.ConnectorEvents.DATA, packet, this);
    };
    /**
     *
     * Register process id this connector handles.
     *
     */
    Connector.prototype.setPid = function (pid) {
        this.pid = pid;
    };
    Connector.prototype.toJSON = function () {
        var json = {
            id: this.id,
            port: this.port,
            setting: undefined,
        };
        if (this.setting && Object.keys(this.setting).length > 0) {
            json.setting = JSON.parse(JSON.stringify(this.setting));
        }
        if (this.action) {
            json.action = this.action;
        }
        return json;
    };
    return Connector;
}(setting_1.Setting));
exports.Connector = Connector;

},{"./events":26,"./setting":120,"debug":147}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * Default Context Provider
 *
 * @constructor
 * @public
 */
var DefaultContextProvider = /** @class */ (function () {
    function DefaultContextProvider() {
    }
    DefaultContextProvider.prototype.addContext = function (node, defaultContext, _schema) {
        if (typeof defaultContext !== 'undefined') {
            node.addContext(defaultContext);
        }
    };
    return DefaultContextProvider;
}());
exports.DefaultContextProvider = DefaultContextProvider;

},{}],23:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./defaultProvider"));

},{"./defaultProvider":22}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConnectorEvents = /** @class */ (function () {
    function ConnectorEvents() {
    }
    /**
     * Data event
     *
     * @event Connector#data
     * @type {Packet}
     */
    ConnectorEvents.DATA = 'data';
    return ConnectorEvents;
}());
exports.ConnectorEvents = ConnectorEvents;

},{}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowEvents = {
    /**
     * Start event.
     *
     * @event Flow#start
     * @type {object}
     * @property {node} node - Node being started
     */
    START: { name: 'start' },
    /**
     * Stop event.
     *
     * @event Flow#stop
     * @type {object}
     * @property {node} node - Node being stopped
     */
    STOP: { name: 'stop' },
    /**
     * Metadata event.
     *
     * @event Flow#metadata
     * @type {object}
     * @property {id} id - graphId
     * @property {node} node - node which meta property was set
     */
    METADATA: { name: 'metadata' },
    /**
     * Add IIP event.
     *
     * @event Flow#addIIP
     * @type {Link} Link - IIP Link which was added
     */
    ADD_IIP: { name: 'addIIP' },
    /**
     * Remove IIP event.
     *
     * @event Flow#removeIIP
     * @type {Link} oldLink - IIP Link which was removed
     */
    REMOVE_IIP: { name: 'removeIIP' },
    /**
     * Add Link event.
     *
     * @event Flow#addLink
     * @type {Link} link - Link which was added
     */
    ADD_LINK: { name: 'addLink' },
    /**
     * Change Link event.
     *
     * @event Flow#changeLink
     * @type {Link} link - Link which was changed
     */
    CHANGE_LINK: { name: 'changeLink' },
    /**
     * Remove Link event.
     *
     * @event Flow#removeLink
     * @type {Link} oldLink - Link which was removed
     */
    REMOVE_LINK: { name: 'removeLink' },
    /**
     * Add node event.
     *
     * @event Flow#addNode
     * @type {Object}
     * @property {Node} node - Node which was added
     */
    ADD_NODE: { name: 'addNode' },
    /**
     * Remove node event.
     *
     * @event Flow#removeNode
     * @type {Object}
     * @property {Node} oldNode - Node which was removed
     */
    REMOVE_NODE: { name: 'removeNode' },
    /**
     * Add Port event.
     *
     * @event Flow#addPort
     * @type {Object}
     * @property {Node} node - Node to which port was added
     * @property {String} port - Port name which was added
     * @property {String} nodeId - Internal nodeId
     * @property {String} name - Internal Port name
     * @property {String} type - Type input|output
     */
    ADD_PORT: { name: 'addPort' },
    /**
     * Remove Port event.
     *
     * @event Flow#removePort
     * @type {Object}
     * @property {Node} node - Node to which port was removed
     * @property {String} port - Port name which was removed
     * @property {String} type - Type input|output
     */
    REMOVE_PORT: { name: 'removePort' },
    /**
     * Rename Port event.
     *
     * @event Flow#renamePort
     * @type {Object}
     * @property {Node} node - Node which port was changed
     * @property {String} from - Old port name
     * @property {String} to - New port name
     */
    RENAME_PORT: { name: 'renamePort' },
    /**
     * Port Output event.
     *
     * @event Flow#output
     * @type {Object}
     * @property {Node} node - Node
     * @property {String} port - port name
     * @property {String} out - Output packet
     * @property {String} action - Optional current action
     */
    OUTPUT: { name: 'output' },
    /**
     * Port Output event.
     *
     * @event Flow#error
     * @type {Object}
     * @property {Node} node - Node
     * @property {Error} msg - The Error
     */
    ERROR: { name: 'error', expose: true }
};

},{}],26:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./connector"));
__export(require("./flow"));
__export(require("./io"));
__export(require("./link"));
__export(require("./node"));
__export(require("./pm"));
__export(require("./port"));
__export(require("./setting"));

},{"./connector":24,"./flow":25,"./io":27,"./link":28,"./node":29,"./pm":30,"./port":31,"./setting":32}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var IOEvents = /** @class */ (function () {
    function IOEvents() {
    }
    /**
     * Send event.
     *
     * @event IO#Send
     * @type {object}
     * @property {id} id - graphId
     * @property {node} node - node which meta property was set
     */
    IOEvents.SEND = 'send';
    /**
     * Connect event.
     *
     * @event IO#Connect
     * @type {Link} link - The connected link
     */
    IOEvents.CONNECT = 'connect';
    /**
     * Disconnect event.
     *
     * @event IO#Connect
     * @type {Link} link - The disconnected link
     */
    IOEvents.DISCONNECT = 'disconnect';
    /**
     * Drop event.
     *
     * @event IO#Drop
     * @type {Packet} p - The dropped packet
     */
    IOEvents.DROP = 'drop';
    /**
     * Data event.
     *
     * @event IO#Data
     * @type {Any} data - Plain data contained within the packet
     */
    IOEvents.DATA = 'data';
    /**
     * Packet event.
     *
     * @event IO#Packet
     * @type {Link} link - The Link
     * @type {Any} data - The packet
     */
    IOEvents.PACKET = 'packet';
    /**
     * Receive event.
     *
     * @event IO#Receive
     * @type {Link} link - The Link which just received data
     */
    IOEvents.RECEIVE = 'receive';
    return IOEvents;
}());
exports.IOEvents = IOEvents;

},{}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LinkEvents = /** @class */ (function () {
    function LinkEvents() {
    }
    /**
     * Change event
     *
     * @event Link#change
     * @type {object}
     */
    LinkEvents.CHANGE = 'change';
    return LinkEvents;
}());
exports.LinkEvents = LinkEvents;

},{}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeEvents = {
    /**
     * Started event.
     *
     * @event Node#started
     * @type {object}
     * @property {node} node - Node being stopped
     */
    STARTED: { name: 'started' },
    /**
     * Complete event.
     *
     * @event Node#complete
     * @type {object}
     * @property {node} node - Node being stopped
     */
    COMPLETE: { name: 'complete', expose: true },
    /**
     * Shutdown event.
     *
     * @event Node#shutdown
     * @type {object}
     * @property {node} node - Node being stopped
     */
    SHUTDOWN: { name: 'shutdown', expose: true },
    /**
     * Start event.
     *
     * @event Node#start
     * @type {object}
     * @property {node} node - Node being stopped
     */
    START: { name: 'start', expose: true },
    /**
     * Stop event.
     *
     * @event Node#stop
     * @type {object}
     * @property {node} node - Node being stopped
     */
    STOP: { name: 'stop', expose: true },
    /**
     * Status Update event.
     *
     * @event Node#stop
     * @type {object}
     * @property {node} node - Node being stopped
     */
    STATUS_UPDATE: { name: 'statusUpdate', expose: true },
    /**
     * Execute event.
     *
     * @event Node#execute
     * @type {object}
     * @property {node} node - Node being stopped
     */
    EXECUTE: { name: 'execute' },
    /**
     * Executed event.
     *
     * @event Node#executed
     * @type {object}
     * @property {node} node - Node being stopped
     */
    EXECUTED: { name: 'executed' },
    /**
     * Portfill event.
     *
     * @event Node#portfill
     * @type {object}
     * @property {node} node - Node being stopped
     */
    PORT_FILL: { name: 'portFill' },
    /**
     * Error event.
     *
     * @event Node#error
     * @type {object}
     * @property {node} node - Node being stopped
     */
    ERROR: { name: 'error', expose: true },
    /**
     * Output event.
     *
     * @event Node#output
     * @type {object}
     * @property {node} node - Node being stopped
     */
    OUTPUT: { name: 'output' },
    /**
     * Context update event.
     *
     * @event Node#contextUpdate
     * @type {object}
     * @property {node} node - Node being stopped
     */
    CONTEXT_UPDATE: { name: 'contextUpdate', expose: true },
    /**
     * Context clear event.
     *
     * @event Node#contextClear
     * @type {object}
     * @property {node} node - Node being stopped
     */
    CONTEXT_CLEAR: { name: 'contextClear', expose: true },
    /**
     * Timeout event.
     *
     * @event Node#nodeTimeout
     * @type {object}
     * @property {node} node - Node being stopped
     */
    TIMEOUT: { name: 'nodeTimeout', expose: true }
};

},{}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PMEvents = /** @class */ (function () {
    function PMEvents() {
    }
    /**
     * Add Process event
     *
     * @event Process#addProcess
     * @type {object}
     * @property {node} node - Added Process
     */
    PMEvents.ADD_PROCESS = 'addProcess';
    /**
     * Remove Process event
     *
     * @event Process#removeProcess
     * @type {object}
     * @property {node} node - Removed Process
     */
    PMEvents.REMOVE_PROCESS = 'removeProcess';
    /**
     * Start Process event
     *
     * @event Process#startProcess
     * @type {object}
     * @property {node} node - Process to be started
     */
    PMEvents.START_PROCESS = 'startProcess';
    /**
     * Stop Process event
     *
     * @event Process#stopProcess
     * @type {object}
     * @property {node} node - Stopped Process
     */
    PMEvents.STOP_PROCESS = 'stopProcess';
    /**
     * Process Status event
     *
     * @event Process#processStatus
     * @type {object}
     * @property {node} node - Process Status
     */
    PMEvents.PROCESS_STATUS = 'processStatus';
    /**
     * Error event
     *
     * @event Process#error
     * @type {object}
     * @property {node} node - The errored process
     */
    PMEvents.ERROR = 'error';
    /**
     * Change Pid event
     *
     * @event Process#changePid
     * @type {object}
     * @property {node} node - Process which pid was changed
     */
    PMEvents.CHANGE_PID = 'changePid';
    /**
     * Report event
     *
     * @event Process#report
     * @type {object}
     * @property {Object} report - Object containing report
     */
    PMEvents.REPORT = 'report';
    return PMEvents;
}());
exports.PMEvents = PMEvents;

},{}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PortEvents = /** @class */ (function () {
    function PortEvents() {
    }
    /**
     * Fill event
     *
     * @event Port#fill
     * @type {object}
     */
    PortEvents.FILL = 'fill';
    /**
     * Data event
     *
     * @event Port#data
     * @type {Packet}
     */
    PortEvents.DATA = 'data';
    return PortEvents;
}());
exports.PortEvents = PortEvents;

},{}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SettingEvents = /** @class */ (function () {
    function SettingEvents() {
    }
    /**
     * Change event
     *
     * @event Setting#change
     * @type {Object}
     */
    SettingEvents.CHANGE = 'change';
    return SettingEvents;
}());
exports.SettingEvents = SettingEvents;

},{}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseFlow = /** @class */ (function () {
    function BaseFlow() {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
    }
    return BaseFlow;
}());
exports.BaseFlow = BaseFlow;

},{}],34:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function $Action(Base) {
    return /** @class */ (function (_super) {
        __extends(Action$, _super);
        function Action$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.actionName = '';
            return _this;
        }
        Action$.prototype.action = function (action) {
            if (!this.actions.hasOwnProperty(action)) {
                throw Error('this.action should return something with the action map.');
                /*
             const ActionActor = this.action(action)

             // ActionActor.map.ports = this.ports

             // not sure what to do with the id and identifier.
             // I think they should stay the same, for now.
             //
             this.actions[action] = new Flow(
             // ActionActor, // BROKEN
             map, // action definition should be here
             this.identifier + '::' + action
             )

             // a bit loose this.
             this.actions[action].actionName = action

             //this.actions[action].ports = this.ports
             */
            }
            return this.actions[action];
        };
        Action$.prototype.isAction = function () {
            return Boolean(this.actionName);
        };
        Action$.prototype.use = function (_action) {
        };
        return Action$;
    }(Base));
}
exports.$Action = $Action;
(function ($Action) {
    function create(Base) {
        return util_1.mixin($Action)(Base);
    }
    $Action.create = create;
})($Action = exports.$Action || (exports.$Action = {}));

},{"../util":122}],35:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var forOf = require("object-forof");
var common_1 = require("../common");
var context_1 = require("../context");
var events_1 = require("../events");
var util_1 = require("../util");
var node_1 = require("./node");
var ports_1 = require("./ports");
var debug = _debug('chix:flow');
function $Context(Base) {
    return /** @class */ (function (_super) {
        __extends(Context$, _super);
        function Context$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.contextProvider = new context_1.DefaultContextProvider();
            return _this;
        }
        Object.defineProperty(Context$.prototype, "context", {
            get: function () {
                var context = {};
                forOf(function (name, port) {
                    context[name] = port.context;
                }, this.ports.input);
                return context;
            },
            enumerable: true,
            configurable: true
        });
        Context$.prototype.addContext = function (context) {
            var _this = this;
            debug('%s: addContext', this.identifier);
            forOf(function (port, val) {
                var portDef = _this.getPortDefinition(port, 'input');
                _this.getNode(portDef.nodeId)
                    .setContextProperty(portDef.name, val);
            }, context);
        };
        Context$.prototype.setContextProperty = function (port, data, trigger) {
            var portDef = this.getPortDefinition(port, 'input');
            this.getNode(portDef.nodeId)
                .setContextProperty(portDef.name, data, trigger);
            // TODO: test if it succeeded
            this.event(events_1.NodeEvents.CONTEXT_UPDATE, {
                data: data,
                node: this,
                port: port
            });
        };
        Context$.prototype.clearContextProperty = function (port) {
            var portDef = this.getPortDefinition(port, 'input');
            this.getNode(portDef.nodeId)
                .clearContextProperty(portDef.name);
            this.event(events_1.NodeEvents.CONTEXT_CLEAR, {
                node: this,
                port: port
            });
        };
        /**
         *
         * Add a new context provider.
         *
         * A context provider pre-processes the raw context
         *
         * This is useful for example when using the command line.
         * All nodes which do not have context set can be asked for context.
         *
         * E.g. database credentials could be prompted for after which all
         *      input is fullfilled and the flow will start to run.
         *
         * @param {DefaultContextProvider} provider
         * @private
         *
         */
        Context$.prototype.setContextProvider = function (provider) {
            this.contextProvider = provider;
        };
        return Context$;
    }(Base));
}
exports.$Context = $Context;
(function ($Context) {
    function create(Base) {
        return util_1.mixin($Context, common_1.$Event.create, common_1.$Identity.create, node_1.$Node.create, ports_1.$Ports.create)(Base);
    }
    $Context.create = create;
})($Context = exports.$Context || (exports.$Context = {}));

},{"../common":10,"../context":23,"../events":26,"../util":122,"./node":49,"./ports":51,"debug":147,"object-forof":161}],36:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var common_1 = require("../common/");
var connector_1 = require("../connector");
var events_1 = require("../events");
var handler_1 = require("../io/handler");
var util_1 = require("../util");
var iip_1 = require("./iip");
var link_1 = require("./link");
var node_1 = require("./node");
var status_1 = require("./status");
var debug = _debug('chix:actor');
function $Control(Base) {
    return /** @class */ (function (_super) {
        __extends(Control$, _super);
        function Control$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._hold = false;
            _this.active = false;
            _this.ready = true;
            _this.runCount = 0;
            _this.ioHandler = new handler_1.IoHandler();
            return _this;
        }
        /**
         *
         * Add IO Handler.
         *
         * The IO Handler handles all the input and output.
         *
         * @param {IoHandler} ioHandler
         * @public
         *
         */
        Control$.prototype.setIoHandler = function (ioHandler) {
            this.ioHandler = ioHandler;
            return this;
        };
        /**
         *
         * Holds a Node
         *
         * @param {String} id
         * @public
         */
        Control$.prototype.hold = function (id) {
            if (id) {
                this.getNode(id).hold();
                this.setStatus(status_1.$Status.HOLD);
            }
            else {
                this._hold = true;
                this.stop();
            }
            return this;
        };
        Control$.prototype.isHalted = function (id) {
            if (id) {
                this.getNode(id).isHalted();
            }
            return this._hold;
        };
        Control$.prototype.complete = function () {
            this.ready = false;
            this.active = false;
        };
        /**
         *
         * Pushes the Actor
         *
         * Will send :start to all nodes without input
         * and all nodes which have all their input ports
         * filled by context already.
         *
         * @public
         */
        Control$.prototype.push = function () {
            var e_1, _a;
            /*
          if (false && this.status !== 'created') {
            throw Error(
              `To push actor must be in created state, current status ${this.status}`
            )
          }
          */
            this.setStatus(status_1.$Status.RUNNING);
            debug('%s: push()', this.identifier);
            try {
                for (var _b = __values(this.nodes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    if (node.isStartable() && node.id) {
                        var iip = new connector_1.Connector();
                        iip.plug(node.id, ':start');
                        this.sendIIP(iip, '');
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.setStatus('running');
            return this;
        };
        /**
         *
         * Starts the actor
         *
         * @param {Boolean} push
         * @fires Flow#start
         * @public
         */
        Control$.prototype.start = function (push) {
            var e_2, _a;
            // this.status = Status.RUNNING
            if (['created', 'running', 'stopped'].indexOf(this.status) >= 0) {
                this.setStatus('created');
                debug('%s: start', this.identifier);
                try {
                    // this.sendIIPsOutstanding()
                    // this.clearIIPs()
                    for (var _b = __values(this.nodes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var node = _c.value;
                        // skip normal nodes now, because they auto start
                        // flows, do need to start here
                        if (node.type === 'flow') {
                            node.start();
                        }
                        else {
                            // manually evaluate node
                            // if (true || push) {
                            node.onPortFill();
                            this.setStatus(status_1.$Status.RUNNING);
                            // }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                if (push !== false) {
                    // this.push()
                }
                else {
                    this.setStatus('started');
                }
                this.event(events_1.FlowEvents.START, {
                    node: this
                });
                return this;
            }
            throw Error("To start actor must be in created state, current status: " + this.status);
        };
        /**
         *
         * Stops the actor
         *
         * Will set the status to `stopped`
         *
         * Any outstanding IIPs will be cleared.
         *
         * Emits the `stop` event when done.
         *
         * @param {Function} cb - Callback
         * @fires Flow#stop
         * @public
         */
        Control$.prototype.stop = function () {
            this.status = status_1.$Status.STOPPED;
            if (this.ioHandler) {
                this.ioHandler.reset();
                // close ports opened by iips
                this.clearIIPs();
                this.event(events_1.FlowEvents.STOP, {
                    node: this
                });
                // hack, remove it all together possibly
                this.ioHandler._shutdown = false;
            }
        };
        /**
         * Will pause the actor
         *
         * Will set status to `stopped`(?)
         *
         * And will hold() all nodes.
         *
         * Graphs in their turn will put all their nodes on hold()
         *
         * @returns {Control}
         */
        Control$.prototype.pause = function () {
            var e_3, _a;
            this.status = status_1.$Status.STOPPED;
            try {
                for (var _b = __values(this.nodes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    node.hold();
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return this;
        };
        /**
         *
         * Resumes the actor
         *
         * Will set it's own status to `running`
         *
         * All nodes which are on hold will resume again.
         *
         * @public
         */
        Control$.prototype.resume = function () {
            var e_4, _a;
            this.status = status_1.$Status.RUNNING;
            try {
                for (var _b = __values(this.nodes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    node.release();
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            return this;
        };
        /**
         *
         * Releases a node if it was on hold
         *
         * @param {String} id - Id of node to release
         * @public
         */
        Control$.prototype.release = function (id) {
            if (id) {
                return this.getNode(id).release();
            }
            this._hold = false;
            this.resume();
        };
        Control$.prototype.shutdown = function () { };
        Control$.prototype.destroy = function () {
            var e_5, _a;
            try {
                for (var _b = __values(this.nodes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    node.destroy();
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
        };
        /**
         *
         * Resets this instance so it can be re-used
         *
         * Will call reset() on all nodes
         *
         * Graphs in their turn will reset() all their nodes
         *
         * Note: The registered loader is left untouched.
         *
         * @public
         */
        Control$.prototype.reset = function () {
            var e_6, _a;
            try {
                for (var _b = __values(this.nodes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    node.reset();
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_6) throw e_6.error; }
            }
            this.runCount = 0;
            if (this.identifier === 'flow:main' && this.ioHandler) {
                this.ioHandler.reset();
            }
            return this;
        };
        /**
         * Clears this graph from it's nodes
         */
        Control$.prototype.clear = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_7, _a, total, _b, _c, node, e_7_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            total = this.nodes.size;
                            if (!(total > 0)) return [3 /*break*/, 8];
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 6, 7, 8]);
                            _b = __values(this.nodes.values()), _c = _b.next();
                            _d.label = 2;
                        case 2:
                            if (!!_c.done) return [3 /*break*/, 5];
                            node = _c.value;
                            if (!node.id) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.removeNode(node.id)];
                        case 3:
                            _d.sent();
                            this.removeLinks(node.id);
                            _d.label = 4;
                        case 4:
                            _c = _b.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_7_1 = _d.sent();
                            e_7 = { error: e_7_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_7) throw e_7.error; }
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         *
         * Run the current flow
         *
         * The flow starts by providing the ports with their context.
         *
         * Nodes which have all their ports filled by context will run immediately.
         *
         * Others will wait until their unfilled ports are filled by connections.
         *
         * If a port is not required and context was given and there are
         * no connections on it, it will not block the node from running.
         *
         * If a map has actions defined, run expects an action name to run.
         *
         * Combinations:
         *
         *   - run()
         *     run flow without callback
         *
         *   - run(callback)
         *     run with callback
         *
         *   - action('actionName').run()
         *     run action without callback
         *
         *   - action('actionName').run(callback)
         *     run action with callback
         *
         * The callback will receive the output of the (last) node(s)
         * Determined by which output ports are exposed.
         *
         * If we pass the exposed output, it can contain output from anywhere.
         *
         * If a callback is defined but there are no exposed output ports.
         * The callback will never fire.
         *
         * @public
         */
        Control$.prototype.run = function () {
            throw Error('Run is deprecated.');
        };
        return Control$;
    }(Base));
}
exports.$Control = $Control;
(function ($Control) {
    function create(Base) {
        return util_1.mixin($Control, common_1.$Event.create, common_1.$Identity.create, iip_1.$IIP.create, link_1.$Link.create, node_1.$Node.create, common_1.$Status.create)(Base);
    }
    $Control.create = create;
})($Control = exports.$Control || (exports.$Control = {}));

},{"../common/":10,"../connector":21,"../events":26,"../io/handler":62,"../util":122,"./iip":41,"./link":44,"./node":49,"./status":56,"debug":147}],37:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("../events");
var util_1 = require("../util");
var node_1 = require("./node");
function $FlowError(Base) {
    return /** @class */ (function (_super) {
        __extends(FlowError$, _super);
        function FlowError$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FlowError$.prototype.error = function (node, error) {
            var _error = error instanceof Error ? error : Error(error);
            var errorObject = {
                msg: error,
                node: node.export()
            };
            node.setStatus('error');
            node.event(events_1.LinkEvents.ERROR, errorObject);
            return _error;
        };
        return FlowError$;
    }(Base));
}
exports.$FlowError = $FlowError;
(function ($FlowError) {
    function create(Base) {
        return util_1.mixin($FlowError, node_1.$Node.create)(Base);
    }
    $FlowError.create = create;
})($FlowError = exports.$FlowError || (exports.$FlowError = {}));

},{"../events":26,"../util":122,"./node":49}],38:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var util_1 = require("../util");
var control_1 = require("./control");
var ports_1 = require("./ports");
var process_1 = require("./process");
function $Export(Base) {
    return /** @class */ (function (_super) {
        __extends(Export$, _super);
        function Export$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Return a serializable export of this flow.
         *
         * @public
         */
        Export$.prototype.export = function () {
            // OK MERGE THESE.
            // first just a few, than make
            // sure all are valid for flow also.
            // because they should be valid actually.
            // dependencies for flow, are all cumulative dependencies. e.g
            // main problem is the node types are not similar
            // enough yet.
            return {
                active: this.active,
                id: this.id,
                identifier: this.identifier,
                inPorts: this.inPorts,
                name: this.name,
                ns: this.ns,
                outPorts: this.outPorts,
                pid: this.pid,
                ports: this.ports,
                provider: this.provider
                // filled: this.filled,
                // context: this.context,
                // input: this._filteredInput(),
                // nodeTimeout: this.nodeTimeout,
                // inputTimeout: this.inputTimeout
            };
        };
        return Export$;
    }(Base));
}
exports.$Export = $Export;
(function ($Export) {
    function create(Base) {
        return util_1.mixin($Export, control_1.$Control.create, common_1.$Identity.create, process_1.$Process.create, ports_1.$Ports.create)(Base);
    }
    $Export.create = create;
})($Export = exports.$Export || (exports.$Export = {}));

},{"../common":10,"../util":122,"./control":36,"./ports":51,"./process":52}],39:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var forOf = require("object-forof");
var common_1 = require("../common/");
var flow_1 = require("../events/flow");
var util_1 = require("../util");
var control_1 = require("./control");
var iip_1 = require("./iip");
var ports_1 = require("./ports");
function $Expose(Base) {
    return /** @class */ (function (_super) {
        __extends(Expose$, _super);
        function Expose$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Helper function to make the flow an npm module itself.
         *
         * Usage:
         *
         *   const xflow = new xFlow:create(map, loader)
         *   xflow.addMap(map)
         *
         *   module.exports = xflow.expose
         *
         *   ---
         *
         *   import { flow } from 'my-flow'
         *
         *   flow({
         *     in: 'some_data',
         *     in2: 'other_data'
         *   }, {
         *     out: function(data) {
         *       // do something with data..
         *     }
         *   })
         */
        Expose$.prototype.expose = function (input, output) {
            var _this = this;
            var iips = [];
            if (this.hasOwnProperty('ports')) {
                if (this.ports.hasOwnProperty('input')) {
                    forOf(function (name, port) {
                        var iip = {
                            data: input[name],
                            target: {
                                id: port.nodeId,
                                port: port.name
                            }
                        };
                        iips.push(iip);
                        // Within the exposed ports these should
                        // already be set if they must be used.
                        // (implement that) they are not properties
                        // a caller should set.
                        //
                        // target.settings,
                        // target.action
                    }, this.ports.input);
                }
                else {
                    throw Error('The map provided does not have any input ports available');
                }
                if (output) {
                    var cb_1 = output;
                    if (this.ports.hasOwnProperty('output')) {
                        // setup callbacks
                        this.on(flow_1.FlowEvents.OUTPUT.name, function (data) {
                            if (data.node.id === _this.id && cb_1.hasOwnProperty(data.port)) {
                                // TODO: does not take ownership into account
                                cb_1[data.port](data.out);
                            }
                        });
                    }
                    else {
                        throw Error('The map provided does not have any output ports available');
                    }
                }
            }
            else {
                throw Error('The map provided does not have any ports available');
            }
            // start it all
            if (iips.length) {
                this.sendIIPs(iips);
            }
            this.push();
            return this;
        };
        return Expose$;
    }(Base));
}
exports.$Expose = $Expose;
(function ($Expose) {
    function create(Base) {
        return util_1.mixin($Expose, control_1.$Control.create, common_1.$Event.create, common_1.$Identity.create, iip_1.$IIP.create, ports_1.$Ports.create)(Base);
    }
    $Expose.create = create;
})($Expose = exports.$Expose || (exports.$Expose = {}));

},{"../common/":10,"../events/flow":25,"../util":122,"./control":36,"./iip":41,"./ports":51,"object-forof":161}],40:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var loader_1 = require("@chix/loader");
var uuid = require("uuid");
var context_1 = require("../context");
var handler_1 = require("../io/handler");
var node_1 = require("../node");
var process_1 = require("../process");
var BaseFlow_1 = require("./BaseFlow");
var mixin_1 = require("./mixin");
function FlowMix(Base) {
    return mixin_1.FlowMixin(Base);
}
var Flow = /** @class */ (function (_super) {
    __extends(Flow, _super);
    function Flow(id, node, loader, ioHandler, processManager) {
        if (loader === void 0) { loader = new loader_1.Loader(); }
        if (ioHandler === void 0) { ioHandler = new handler_1.IoHandler(); }
        if (processManager === void 0) { processManager = new process_1.ProcessManager(); }
        var _this = _super.call(this, {
            id: id,
            node: node,
            ioHandler: ioHandler,
            loader: loader,
            processManager: processManager
        }) || this;
        _this.type = 'flow';
        _this.contextProvider = new context_1.DefaultContextProvider();
        _this._delay = 0;
        _this.active = false;
        _this.runCount = 0;
        _this._interval = 100;
        _this._inputTimeout = null;
        _this.nodeTimeout = 3000;
        _this.inputTimeout = 3000;
        _this.Self = Flow;
        if (!id) {
            throw Error('xFlow requires an id');
        }
        if (!node) {
            throw Error('xFlow requires a map');
        }
        _this.setLoader(loader);
        _this.setIoHandler(ioHandler);
        _this.setProcessManager(processManager);
        // Need to think about how to implement this for flows
        // this.ports.output[':complete'] = { type: 'any' }
        if (node.nodeTimeout) {
            _this.nodeTimeout = node.nodeTimeout;
        }
        if (node.inputTimeout) {
            _this.inputTimeout = node.inputTimeout;
        }
        /*
        if (flowDefinition.ports) {
          this.ports = JSON.parse(JSON.stringify(flowDefinition.ports))
        }
        */
        // debug('%s: addMap', this.identifier)
        if (typeof node === 'string') {
            throw Error('is a string');
        }
        if (node.main) {
            node.nodes = node.nodes.map(function (_node) {
                if (!_node.id) {
                    return __assign({}, _node, { id: uuid.v4() });
                }
                return _node;
            });
        }
        _this.addMap(node);
        _this.createPorts(_this.ports);
        // this.setup()
        // this.initPortOptions()
        // this.listenForOutput()
        _this.setStatus('created');
        return _this;
    }
    /**
     * Create an xFlow
     *
     * @public
     */
    Flow.create = function (id, node, loader, ioHandler, processManager) {
        return new Flow(id, node, loader, ioHandler, processManager);
    };
    /**
     *
     * Register extra node types:
     *
     * Current types available are:
     *
     *  - ReactNode
     *  - PolymerNode
     *
     */
    Flow.registerNodeType = function (Type) {
        this.nodeTypes[Type.name] = Type;
    };
    Flow.nodeTypes = {
        xNode: node_1.xNode
    };
    return Flow;
}(FlowMix(BaseFlow_1.BaseFlow)));
exports.Flow = Flow;

},{"../context":23,"../io/handler":62,"../node":77,"../process":109,"./BaseFlow":33,"./mixin":48,"@chix/loader":133,"uuid":163}],41:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var forOf = require("object-forof");
var common_1 = require("../common");
var connector_1 = require("../connector");
var events_1 = require("../events");
var IIP_1 = require("../IIP");
var packet_1 = require("../packet");
var util_1 = require("../util");
var control_1 = require("./control");
var node_1 = require("./node");
var port_1 = require("./port");
var process_1 = require("./process");
function $IIP(Base) {
    return /** @class */ (function (_super) {
        __extends(IIP$, _super);
        function IIP$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Create an IIP
         *
         * Optionally with `options` for the port:
         *
         * e.g. { persist: true }
         *
         * Optionally with `source` information
         *
         * e.g. { index: 1 } // index for array port
         *
         * @param {IIPDefinition} iip
         * @fires Flow#addIIP
         * @returns {xLink}
         */
        IIP$.prototype.createIIP = function (iip) {
            if (!this.id) {
                throw Error('id is not set.');
            }
            var xIIP = IIP_1.IIP.create({
                source: {
                    id: this.id,
                    port: ':iip'
                },
                target: iip.target
            });
            xIIP.set('dispose', true);
            if (iip.data === undefined) {
                throw Error('IIP data is `undefined`');
            }
            xIIP.data = iip.data;
            this.event(events_1.FlowEvents.ADD_IIP, xIIP.toJSON());
            return xIIP;
        };
        /**
         * Connect an IIP
         *
         * @param {Object|Link} iip
         * @returns {*}
         */
        IIP$.prototype.connectIIP = function (iip) {
            if (iip.target.constructor.name !== 'Connector') {
                var target_1 = new connector_1.Connector();
                if (!iip.target.id) {
                    throw Error('target id is not set.');
                }
                if (!iip.target.port) {
                    throw Error('target port is not set.');
                }
                target_1.plug(iip.target.id, iip.target.port);
                forOf(function (key, setting) { return target_1.set(key, setting); }, iip.target.setting);
                iip.target = target_1;
            }
            // TODO: iip should contain their own unique id
            if (!this.id) {
                throw Error('Actor must contain an id');
            }
            return this.addLink(iip);
        };
        /**
         *
         * Send IIPs
         *
         * Creates, connects and sends an IIPs
         *
         * @param {Object} iips
         * @public
         */
        IIP$.prototype.sendIIPs = function (iips) {
            var links = iips
                .map(this.createIIP.bind(this))
                .map(this.connectIIP.bind(this))
                .map(this.__sendIIP.bind(this));
            return links;
        };
        /**
         * Send IIPs present in this.links
         *
         * Used by the runtime, which first adds them
         * next when the graph is started they will be used.
         *
         * @private
         */
        IIP$.prototype.sendIIPsOutstanding = function () {
            var e_1, _a;
            try {
                for (var _b = __values(this.getIIPs()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var iip = _c.value;
                    this.__sendIIP(iip);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /*
       * Send a single IIP to a port.
       *
       * Note: If multiple IIPs have to be send use sendIIPs instead.
       *
       * Source is mainly for testing, but essentially it allows you
       * to imposter a sender as long as you send along the right
       * id and source port name.
       *
       * Source is also used to set an index[] for array ports.
       * However, if you send multiple iips for an array port
       * they should be send as a group using sendIIPs
       *
       * This is because they should be added in reverse order.
       * Otherwise the process will start too early.
       *
       * @param {Connector} target
       * @param {Object} data
       * @public
       */
        IIP$.prototype.sendIIP = function (target, data) {
            // TODO: just create a unique id for the IIP, do not use the graph id
            if (!this.id) {
                throw Error('Actor must contain an id');
            }
            if (undefined === data) {
                throw Error('Refused to send IIP without data');
            }
            // const iipDefinition: IIPDefinition = {
            var iipDefinition = {
                data: data,
                source: {
                    id: this.id,
                    // pid: this.pid as string,
                    port: ':iip'
                },
                target: target
            };
            var iip = this.createIIP(iipDefinition);
            this.connectIIP(iip);
            this.__sendIIP(iip);
            return iip;
        };
        IIP$.prototype.__sendIIP = function (iip) {
            if (!iip.target.id) {
                throw Error('target id is not set.');
            }
            if (!iip.target.port) {
                throw Error('target port is not set.');
            }
            var targetNode = this.getNode(iip.target.id);
            if (!targetNode) {
                throw Error('Target node not found.');
            }
            var targetPortType = targetNode.getPortType('input', iip.target.port);
            var packet = packet_1.Packet.create(
            // JSON.parse(JSON.stringify(xLink.data)),
            iip.data, targetPortType);
            iip.source.write(packet);
            // remove data bit.
            // delete xLink.data
            return iip;
        };
        /**
         * clearIIP
         *
         * Unplugs, disconnects and removes an IIP
         *
         * When an IIP is connected and the data is send
         * this method removes/unregisters the IIP again.
         *
         * @param {IIP} iip
         * @fires Flow#removeIIP
         */
        IIP$.prototype.clearIIP = function (iip) {
            var e_2, _a;
            try {
                for (var _b = __values(this.getIIPs()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var link = _c.value;
                    var oldIIP = link;
                    // source is always us so do not have to check it.
                    // source will have to be checked when iip has it's own id.
                    if ((oldIIP.source.port === ':iip' ||
                        oldIIP.target.port === iip.target.port ||
                        oldIIP.target.port === ':start') && // huge uglyness
                        oldIIP.target.id === iip.target.id) {
                        this.unplugPort('input', oldIIP.target);
                        this.ioHandler.disconnect(oldIIP);
                        this.links.delete(oldIIP.id);
                        // TODO: just rename this to clearIIP
                        this.event(events_1.FlowEvents.REMOVE_IIP, oldIIP);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        /**
         *
         * Clear IIPs
         *
         * If target is specified, only those iips will be cleared.
         */
        IIP$.prototype.clearIIPs = function (target) {
            var e_3, _a;
            try {
                for (var _b = __values(this.getIIPs()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var link = _c.value;
                    var iip = link;
                    if (!target ||
                        (target.id === iip.target.id && target.port === iip.target.port)) {
                        this.clearIIP(iip);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        IIP$.prototype.getIIPs = function () {
            return Array.from(this.links.values()).filter(function (link) { return link instanceof IIP_1.IIP; });
        };
        Object.defineProperty(IIP$.prototype, "iips", {
            get: function () {
                return this.getIIPs().reduce(function (iips, iip) { return iips.set(iip.id, iip); }, new Map());
            },
            enumerable: true,
            configurable: true
        });
        return IIP$;
    }(Base));
}
exports.$IIP = $IIP;
(function ($IIP) {
    function create(Base) {
        return util_1.mixin($IIP, control_1.$Control.create, common_1.$Event.create, common_1.$Identity.create, node_1.$Node.create, port_1.$Port.create, process_1.$Process.create)(Base);
    }
    $IIP.create = create;
})($IIP = exports.$IIP || (exports.$IIP = {}));

},{"../IIP":6,"../common":10,"../connector":21,"../events":26,"../packet":93,"../util":122,"./control":36,"./node":49,"./port":50,"./process":52,"object-forof":161}],42:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./action"));
__export(require("./context"));
__export(require("./control"));
__export(require("./error"));
__export(require("./expose"));
__export(require("./flow"));
__export(require("./isStartable"));
__export(require("./mixin"));
__export(require("./ports"));
__export(require("./providers"));
__export(require("./shutdown"));
__export(require("./toJSON"));
// export * from './actor'
__export(require("./iip"));
// export * from './ioHandler'
__export(require("./link"));
// export * from './loader'
__export(require("./map"));
__export(require("./meta"));
__export(require("./mixin"));
__export(require("./node"));
__export(require("./port"));
__export(require("./process"));
__export(require("./report"));
__export(require("./status"));

},{"./action":34,"./context":35,"./control":36,"./error":37,"./expose":39,"./flow":40,"./iip":41,"./isStartable":43,"./link":44,"./map":46,"./meta":47,"./mixin":48,"./node":49,"./port":50,"./ports":51,"./process":52,"./providers":53,"./report":54,"./shutdown":55,"./status":56,"./toJSON":57}],43:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function $IsStartable(Base) {
    return /** @class */ (function (_super) {
        __extends(IsStartable$, _super);
        function IsStartable$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IsStartable$.prototype.isStartable = function () {
            return true;
        };
        return IsStartable$;
    }(Base));
}
exports.$IsStartable = $IsStartable;
(function ($IsStartable) {
    function create(Base) {
        return util_1.mixin($IsStartable)(Base);
    }
    $IsStartable.create = create;
})($IsStartable = exports.$IsStartable || (exports.$IsStartable = {}));

},{"../util":122}],44:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var util = require("util");
var common_1 = require("../common/");
var events_1 = require("../events");
var IIP_1 = require("../IIP");
var link_1 = require("../link");
var util_1 = require("../util");
var control_1 = require("./control");
var node_1 = require("./node");
var port_1 = require("./port");
var process_1 = require("./process");
var debug = _debug('chix:actor');
function $Link(Base) {
    return /** @class */ (function (_super) {
        __extends(Link$, _super);
        function Link$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.links = new Map();
            return _this;
        }
        /**
         * Adds a link from nodes port to the other
         *
         * Each link is registered with the IOHandler
         *
         * Emits the addLink event
         *
         * @param {xLink} link
         * @fires Flow#addLink
         */
        Link$.prototype.addLink = function (link) {
            var _this = this;
            debug('%s: addLink()', this.identifier);
            var sourceNode;
            if (!(link instanceof link_1.Link)) {
                throw Error('Link must be of type Link');
            }
            var existingLink = this._findLink(link);
            if (!(link instanceof IIP_1.IIP) && existingLink) {
                console.log('WARNING: link already added, FIXME');
                this.event(events_1.FlowEvents.ADD_LINK, existingLink);
                return existingLink;
            }
            // CHANGE THIS, source id should not be the graph id but a unique id.
            if (link.source.id !== this.id) {
                // Warn: IIP has our own id
                sourceNode = this.getNode(link.source.id);
                if (!sourceNode.portExists('output', link.source.port)) {
                    if (!sourceNode.ports.output) {
                        throw Error("Target node (" + sourceNode.identifier + ") does not have any input ports named " + link.source.port);
                    }
                    else {
                        throw Error(util.format('Source node (%s) does not have an output port named `%s`\n\n' +
                            '\tOutput ports available:\t%s\n', sourceNode.identifier, link.source.port, Object.keys(sourceNode.ports.output).join(', ')));
                    }
                }
            }
            var targetNode = this.getNode(link.target.id);
            debug('%s: %s %s -> %s %s', this.identifier, sourceNode ? sourceNode.identifier : '', link.source ? link.source.port : '', link.target.port, targetNode.identifier);
            if (link.target.port !== ':start' &&
                !targetNode.portExists('input', link.target.port)) {
                if (!targetNode.ports.input) {
                    throw Error("Target node (" + targetNode.identifier + ") does not have any input ports named " + link.target.port);
                }
                else {
                    var inputPorts = Object.keys(targetNode.ports.input);
                    throw Error(util.format('Target node (%s) does not have an input port named `%s`\n\n' +
                        '\tInput ports available:\t%s\n', targetNode.identifier, link.target.port, inputPorts.join(', ')));
                }
            }
            // const targetNode = this.getNode(link.target.id)
            // FIXME: rewriting sync property
            // to contain the process id of the node it's pointing
            // to not just the nodeId defined within the graph
            if (link.target.has('sync')) {
                link.target.set('sync', this.getNode(link.target.get('sync')).pid);
            }
            link.graphId = this.id;
            link.graphPid = this.pid;
            if (link.source.id) {
                if (link.source.id === this.id) {
                    link.setSourcePid(this.pid || this.id);
                }
                else {
                    link.setSourcePid(this.getNode(link.source.id).pid);
                }
            }
            link.setTargetPid(this.getNode(link.target.id).pid);
            this.links.set(link.id, link);
            this.ioHandler.connect(link);
            this.plugPort('input', link.target);
            if (link.source.id !== this.id) {
                this.plugPort('output', link.source);
            }
            // outputs are not plugged, also look at ioHandler.connect
            link.on('change', function () {
                _this.event(events_1.FlowEvents.CHANGE_LINK, link);
            });
            // bit inconsistent with event.node
            // should be event.link
            this.event(events_1.FlowEvents.ADD_LINK, link);
            return link;
        };
        /**
         * Get link by it's id
         *
         * @param {String} id - Id of the link
         * @returns {*}
         */
        Link$.prototype.getLink = function (id) {
            return this.links.get(id);
        };
        /**
         * Find a link by it's structure.
         *
         * Can be used to find the link when it's ID is unknown
         *
         * @param {Object} ln
         * @returns {T}
         */
        Link$.prototype.findLink = function (ln) {
            var foundLink = this._findLink(ln);
            if (!foundLink) {
                throw Error('findLink: Unable to find link.');
            }
            return foundLink;
        };
        Link$.prototype.hasLink = function (ln) {
            return Boolean(this._findLink(ln));
        };
        /**
         *
         * Removes link
         *
         * Disconnects the link from the IOHandler and removes it.
         *
         * @param {Link} ln
         * @fires Flow#removeLink
         * @public
         */
        Link$.prototype.removeLink = function (ln) {
            var link = this.links.get(ln.id);
            if (!link) {
                // TODO: Seems to happen with ip directly to subgraph (non-fatal)
                console.warn('FIXME: cannot find link');
                return this;
            }
            this.unplugPort('input', link.target);
            if (link.source.id !== this.id) {
                this.unplugPort('output', link.source);
            }
            this.ioHandler.disconnect(link);
            // io handler could do this.
            // removelink on the top-level actor/graph
            // is not very useful
            /*
            if (this[what].has(link.id)) {
              const oldLink = this[what].get(link.id)

              this[what].delete(link.id)

              this.event(FlowEvents.REMOVE_LINK, oldLink)

              return this
            }
            */
            if (this.links.has(link.id)) {
                var oldLink = this.links.get(link.id);
                this.links.delete(link.id);
                this.event(events_1.FlowEvents.REMOVE_LINK, oldLink);
                return this;
            }
            throw Error("Unable to remove link with id: " + link.id);
        };
        Link$.prototype.getLinks = function () {
            return Array.from(this.links.values()).filter(function (link) { return !(link instanceof IIP_1.IIP); });
        };
        Link$.prototype.removeLinks = function (nodeId) {
            var e_1, _a;
            try {
                for (var _b = __values(this.links.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var link = _c.value;
                    if (link.source.id === nodeId || link.target.id === nodeId) {
                        this.removeLink(link);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        Link$.prototype._findLink = function (ln) {
            var foundLink = Array.from(this.links.values()).find(function (_link) {
                var link = __assign({ source: {} }, _link);
                if (ln.source && link.source &&
                    ln.source.id === link.source.id &&
                    ln.target && link.target &&
                    ln.target.id === link.target.id &&
                    ln.source.port === link.source.port &&
                    ln.target.port === link.target.port) {
                    return ((!ln.source.setting ||
                        !ln.source.setting.index ||
                        !ln.source.setting ||
                        !ln.source.setting.index ||
                        !link.source.setting ||
                        ln.source.setting.index === link.source.setting.index) &&
                        (!ln.target.setting ||
                            !ln.target.setting.index ||
                            !link.target.setting ||
                            !link.target.setting.index ||
                            !link.target.setting ||
                            ln.target.setting.index === link.target.setting.index));
                }
                return false;
            });
            return foundLink;
        };
        return Link$;
    }(Base));
}
exports.$Link = $Link;
(function ($Link) {
    function create(Base) {
        return util_1.mixin($Link, control_1.$Control.create, common_1.$Event.create, common_1.$Identity.create, node_1.$Node.create, port_1.$Port.create, process_1.$Process.create)(Base);
    }
    $Link.create = create;
})($Link = exports.$Link || (exports.$Link = {}));

},{"../IIP":6,"../common/":10,"../events":26,"../link":68,"../util":122,"./control":36,"./node":49,"./port":50,"./process":52,"debug":147,"util":5}],45:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function $Loader(Base) {
    return /** @class */ (function (_super) {
        __extends(Loader$, _super);
        function Loader$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Adds the definition Loader
         *
         * This provides an api to get the required node definitions.
         *
         * The loader should already be initialized
         *
         * e.g. the remote loader will already have loaded the definitions.
         * and is ready to respond to getNodeDefinition(ns, name, type, provider)
         *
         * e.g. An async loader could do something like this:
         *
         *   loader(flow, function() { actor.setLoader(loader); }
         *
         * With a sync loader it will just look like:
         *
         * actor.setLoader(loader)
         *
         * @public
         */
        Loader$.prototype.setLoader = function (loader) {
            this.loader = loader;
        };
        return Loader$;
    }(Base));
}
exports.$Loader = $Loader;
(function ($Loader) {
    function create(Base) {
        return util_1.mixin($Loader)(Base);
    }
    $Loader.create = create;
})($Loader = exports.$Loader || (exports.$Loader = {}));

},{"../util":122}],46:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var util = require("util");
var common_1 = require("../common");
var link_1 = require("../link");
var util_1 = require("../util");
var validate_1 = require("../validate");
var link_2 = require("./link");
var loader_1 = require("./loader");
var node_1 = require("./node");
var process_1 = require("./process");
var debug = _debug('chix:actor');
function $Map(Base) {
    return /** @class */ (function (_super) {
        __extends(Map$, _super);
        function Map$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.view = [];
            return _this;
        }
        /**
         * Reads a flowDefinition from JSON
         *
         * Will validate the JSON first then creates the nodes and it's links
         *
         * If the flowDefinition itself contains nodeDefinitions those will be added to
         * the loader.
         *
         * If the flowDefinition itself does not have a provider property set it will
         * be set to '@', which means internal lookup.
         *
         * A default view will be setup unmasking all nodes.
         *
         * If this Actor is the main actor it's status will be set to `created`
         *
         * If this Actor was not yet registered with the Process Manager it will be registered.
         *
         * @param {FlowDefinition} flowDefinition
         * @public
         *
         */
        Map$.prototype.addMap = function (flowDefinition) {
            var _this = this;
            var e_1, _a;
            debug('%s: addMap()', this.identifier);
            try {
                validate_1.validate.flow(flowDefinition);
            }
            catch (error) {
                if (flowDefinition.title) {
                    throw Error("Flow `" + flowDefinition.title + "`: " + error.message);
                }
                else {
                    console.error(flowDefinition);
                    throw Error("Flow " + flowDefinition.ns + ":" + flowDefinition.name + ": " + error.message);
                }
            }
            if (flowDefinition.id) {
                // xFlow contains it, direct actors don't per se
                this.id = flowDefinition.id;
            }
            // allow a flowDefinition to carry it's own definitions
            if (flowDefinition.nodeDefinitions) {
                this.loader.addNodeDefinitions('@', flowDefinition.nodeDefinitions);
            }
            // register ourselves first
            // THIS IS TOO EARLY STUFF IS REACTING ON ADD_PROCESS AND THEN STARTS.
            // BUT THE NODE IS NOT BUILD YET.
            // SO IF ANYTHING NEED this.pid below, fix that
            /*
            if (!this.pid) {
              // re-run
              this.processManager.register(this as any)
            }
            */
            // add nodes and links one by one so there is more control
            flowDefinition.nodes.forEach(function (node) {
                if (!node.id) {
                    throw new Error(util.format('Node lacks an id: %s:%s', node.ns, node.name));
                }
                // give the node a default provider.
                if (!node.provider) {
                    if (flowDefinition.providers &&
                        flowDefinition.providers.hasOwnProperty('@')) {
                        node.provider = flowDefinition.providers['@'].url;
                    }
                }
                var nodeDefinition = _this.loader.getNodeDefinition(node, flowDefinition);
                if (!nodeDefinition) {
                    throw new Error(util.format('Failed to get node definition for %s:%s', node.ns, node.name));
                }
                debug('%s: Creating node %s:%s', _this.identifier, node.ns, node.name);
                _this.createNode(node, nodeDefinition);
            });
            if (flowDefinition.hasOwnProperty('links')) {
                flowDefinition.links.forEach(function (link) {
                    _this.addLink(link_1.Link.create(link));
                });
            }
            try {
                for (var _b = __values(flowDefinition.nodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    this.view.push(node.id);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // fix later
            // if (this.identifier === 'flow:main') {
            this.setStatus('created');
            // }
            if (!this.pid) {
                // re-run
                this.processManager.register(this);
            }
            /*
            if (!this.pid) {
              // re-run
              this.processManager.register(this as any)
            }
            */
            return this;
        };
        return Map$;
    }(Base));
}
exports.$Map = $Map;
(function ($Map) {
    function create(Base) {
        return util_1.mixin($Map, common_1.$Identity.create, link_2.$Link.create, loader_1.$Loader.create, node_1.$Node.create, process_1.$Process.create, common_1.$Status.create)(Base);
    }
    $Map.create = create;
})($Map = exports.$Map || (exports.$Map = {}));

},{"../common":10,"../link":68,"../util":122,"../validate":127,"./link":44,"./loader":45,"./node":49,"./process":52,"debug":147,"util":5}],47:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var flow_1 = require("../events/flow");
var util_1 = require("../util");
var node_1 = require("./node");
function $MetaNode(Base) {
    return /** @class */ (function (_super) {
        __extends(MetaNode$, _super);
        function MetaNode$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Will set a meta property for the node specified by nodeId
         *
         * A meta property can contain any sort of value.
         *
         * @param {String} nodeId - The nodeId
         * @param {String} key - The meta key
         * @param {Any} value - The meta value
         * @fires Flow#metadata
         */
        MetaNode$.prototype.setMeta = function (nodeId, key, value) {
            var node = this.getNode(nodeId);
            node.setMeta(key, value);
            this.event(flow_1.FlowEvents.METADATA, {
                id: this.id,
                node: node.export()
            });
        };
        return MetaNode$;
    }(Base));
}
exports.$MetaNode = $MetaNode;
(function ($MetaNode) {
    function create(Base) {
        return util_1.mixin($MetaNode, common_1.$Event.create, common_1.$Identity.create, node_1.$Node.create)(Base);
    }
    $MetaNode.create = create;
})($MetaNode = exports.$MetaNode || (exports.$MetaNode = {}));

},{"../common":10,"../events/flow":25,"../util":122,"./node":49}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var util_1 = require("../util");
var action_1 = require("./action");
var context_1 = require("./context");
var control_1 = require("./control");
var error_1 = require("./error");
var export_1 = require("./export");
var iip_1 = require("./iip");
var isStartable_1 = require("./isStartable");
var link_1 = require("./link");
var loader_1 = require("./loader");
var map_1 = require("./map");
var meta_1 = require("./meta");
var node_1 = require("./node");
var port_1 = require("./port");
var ports_1 = require("./ports");
var process_1 = require("./process");
var providers_1 = require("./providers");
var report_1 = require("./report");
var shutdown_1 = require("./shutdown");
var toJSON_1 = require("./toJSON");
exports.FlowMixin = util_1.mixin(common_1.$Identity, common_1.$Status, common_1.$Parent, port_1.$Port, loader_1.$Loader, common_1.$Meta, meta_1.$MetaNode, report_1.$Report, process_1.$Process, node_1.$Node, link_1.$Link, iip_1.$IIP, control_1.$Control, map_1.$Map, action_1.$Action, context_1.$Context, error_1.$FlowError, common_1.$Event, export_1.$Export, isStartable_1.$IsStartable, common_1.$Meta, ports_1.$Ports, providers_1.$Providers, shutdown_1.$Shutdown, common_1.$Status, toJSON_1.$ToJSON);

},{"../common":10,"../util":122,"./action":34,"./context":35,"./control":36,"./error":37,"./export":38,"./iip":41,"./isStartable":43,"./link":44,"./loader":45,"./map":46,"./meta":47,"./node":49,"./port":50,"./ports":51,"./process":52,"./providers":53,"./report":54,"./shutdown":55,"./toJSON":57}],49:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var util = require("util");
var common_1 = require("../common");
var context_1 = require("../context");
var events_1 = require("../events");
var handler_1 = require("../io/handler");
var util_1 = require("../util");
var validate_1 = require("../validate");
var port_1 = require("./port");
var ports_1 = require("./ports");
var process_1 = require("./process");
var shutdown_1 = require("./shutdown");
var debug = _debug('chix:actor');
function $Node(Base) {
    return /** @class */ (function (_super) {
        __extends(Node$, _super);
        function Node$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // TODO: this was first defined in actor so remove it from there..
            _this.nodes = new Map();
            _this.ioHandler = new handler_1.IoHandler();
            _this.contextProvider = new context_1.DefaultContextProvider();
            return _this;
        }
        /**
         *
         * Create/instantiate  a node
         *
         * Node at this stage is nothing more then:
         *
         *  { ns: "fs", name: "readFile" }
         *
         * @param {Object} node - Node as defined within a map
         * @param {Object} nodeDefinition - Node Definition
         * @fires Flow#addNode
         * @public
         */
        Node$.prototype.createNode = function (node, nodeDefinition) {
            if (!nodeDefinition) {
                throw new Error(util.format('Failed to get node definition for %s:%s', node.ns, node.name));
            }
            if (!node.id) {
                throw Error('Node should have an id');
            }
            if (this.hasNode(node.id)) {
                console.log('Warning: Node already added, skipping... FIXME');
                this.event(events_1.FlowEvents.ADD_NODE, { node: this.getNode(node.id) });
                return this.getNode(node.id);
            }
            if (!nodeDefinition.ports) {
                nodeDefinition.ports = {};
            }
            // allow instance to overwrite other node definition data also.
            // probably make much more overwritable, although many
            // should not be overwritten, so maybe just keep it this way.
            if (node.title) {
                nodeDefinition.title = node.title;
            }
            if (node.description) {
                nodeDefinition.description = node.description;
            }
            var identifier = node.title || [node.ns, '::', node.name, '-', this.nodes.size].join('');
            var _node;
            if (nodeDefinition.type === 'flow') {
                var flow = node;
                if (!flow.id) {
                    throw Error('Flow id missing');
                }
                _node = this.create(flow.id, node, nodeDefinition);
                _node.identifier = identifier;
                this.nodes.set(flow.id, _node);
                debug('%s: created %s', this.identifier, _node.identifier);
            }
            else {
                var cls = nodeDefinition.type || 'xNode';
                var nodeTypes = this.constructor.nodeTypes;
                if (nodeTypes.hasOwnProperty(cls)) {
                    validate_1.validate.nodeDefinition(nodeDefinition);
                    _node = new nodeTypes[cls](node.id, nodeDefinition);
                    _node.identifier = identifier;
                    this.nodes.set(node.id, _node);
                    debug('%s: created %s', this.identifier, _node.identifier);
                    // register and set pid, xFlow/actor adds itself to it (hack)
                    this.processManager.register(_node);
                    if (_node.hasShutdown()) {
                        // TODO: implement shutdown
                        _node.on('execute', function () {
                            console.log('will execute');
                        });
                    }
                }
                else {
                    throw Error(util.format('Unknown node type: `%s`', cls));
                }
            }
            _node.setParent(this);
            if (node.provider) {
                _node.provider = node.provider;
            }
            if (node.context) {
                this.contextProvider.addContext(_node, node.context, nodeDefinition.ports.input);
            }
            this.event(events_1.FlowEvents.ADD_NODE, { node: _node });
            return _node;
            // CAN BE REMOVED, disposale can be done as soon as the IO manager writes
            /*
           _node.on('freePort', function freePortHandlerActor (event) {
           let links
           let i

           debug('%s:%s freePortHandler', self.identifier, event.port)

           // get all current port connections
           links = this.portGetConnections(event.port)

           if (links.length) {
           if (event.link) {
           // remove the link belonging to this event
           if (event.link.has('dispose')) {
           // TODO: remove cyclic all together, just use core/forEach
           //  this will cause bugs if you send multiple cyclics because
           //  the port is never unplugged..
           if (!event.link.target.has('cyclic')) {
           self.removeLink(event.link)
           }
           }
           }
           }
           })
           */
        };
        /**
         * Creates a new sub flow instance
         *
         * @param flow
         * @param id
         * @param flowDefinition
         * @param identifier
         */
        Node$.prototype.create = function (_id, _flow, flowDefinition) {
            console.error('Fix me: Not merging external ports');
            /*
            if (!flow.ports) {
              throw Error('Flow does not have any ports.')
            }

            if (!flowDefinition.ports) {
              throw Error('Flow Definition does not contain any ports.')
            }

            for (const type in flow.ports) {
              if (
                flow.ports.hasOwnProperty(type) &&
                flowDefinition.ports.hasOwnProperty(type)
              ) {
                const flowPorts = (flow.ports as any)[type] as ExternalPorts
                const flowDefinitionPorts = (flowDefinition.ports as any)[type] as ExternalPorts

                for (const name in flowPorts) {
                  if (
                    flowPorts.hasOwnProperty(name) &&
                    flowDefinitionPorts.hasOwnProperty(name)
                  ) {
                    for (const property in flowPorts[name]) {
                      if (flowPorts[name].hasOwnProperty(property)) {
                        // add or overwrite it.
                        (flowDefinitionPorts[name] as any)[property] =
                          (flowPorts[name] as any)[property]
                      }
                    }
                  }
                }
              }
            }
            */
            validate_1.validate.flow(flowDefinition);
            // must specify id...
            return new (this.Self)(_id, flowDefinition, this.loader, // single(ton) instance
            this.ioHandler, // single(ton) instance
            this.processManager // single(ton) instance
            );
        };
        /**
         *
         * Adds a node to the map.
         *
         * The object format is like it's defined within a map.
         *
         * Right now this is only used during map loading.
         *
         * For dynamic loading care should be taken to make
         * this node resolvable by the loader.
         *
         * Which means the definition should either be found
         * at the default location defined within the map.
         * Or the node itself should carry provider information.
         *
         * A provider can be defined as:
         *
         *  - url:        https://serve.rhcloud.com/flows/{ns}/{name}
         *  - file:       ./{ns}/{name}
         *  - namespace:  MyNs
         *
         * Namespaces are defined within the map, so MyNs will point to
         * either the full url or filesystem location.
         *
         * Once a map is loaded _all_ nodes will carry the full url individually.
         * The namespace is just their to simplify the json format and for ease
         * of maintainance.
         *
         *
         * @param {Object} node
         * @fires Flow#addNode
         * @public
         */
        Node$.prototype.addNode = function (node, nodeDefinition) {
            this.createNode(node, nodeDefinition);
            return this;
        };
        /**
         *
         * Renames a node
         *
         * Renames the id of a node.
         * This should not rename the real id.
         *
         * @param {string} nodeId
         * @public
         */
        Node$.prototype.renameNode = function (_nodeId) {
            throw Error('renameNode not implemented');
            // console.log(nodeId, cb)
        };
        /**
         *
         * Removes a node
         *
         * Warning:
         *  Does not automatically removes the links.
         *  Use $Link#removeLinks in order to do that.
         *
         * @param {string} nodeId
         * @fires Flow#removeNode
         * @public
         */
        Node$.prototype.removeNode = function (nodeId) {
            return __awaiter(this, void 0, void 0, function () {
                var oldNode;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                        // should wait for IO, especially there is a chance
                        // system events are still spitting.
                        // nodeId is an actual object here, the subgraph.
                        // register and set pid
                        return [4 /*yield*/, this.processManager.unregister(this.getNode(nodeId))];
                        case 1:
                            // should wait for IO, especially there is a chance
                            // system events are still spitting.
                            // nodeId is an actual object here, the subgraph.
                            // register and set pid
                            _a.sent();
                            oldNode = this.getNode(nodeId).export();
                            this.nodes.delete(nodeId);
                            this.event(events_1.FlowEvents.REMOVE_NODE, {
                                node: oldNode
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        Node$.prototype.removeNodes = function () {
            this.clear();
        };
        /**
         *
         * Get all nodes.
         *
         * @return {Array<xNode | Flow>} nodes
         * @public
         *
         */
        Node$.prototype.getNodes = function () {
            return Array.from(this.nodes.values());
        };
        /**
         *
         * Check if this node exists
         *
         * @param {String} id
         * @return {Object} node
         * @public
         */
        Node$.prototype.hasNode = function (id) {
            return this.nodes.has(id);
        };
        /**
         *
         * Get a node by it's id.
         *
         * @param {String} id
         * @return {Object} node
         * @public
         */
        Node$.prototype.getNode = function (id) {
            var e_1, _a;
            if (this.nodes.has(id)) {
                return this.nodes.get(id);
            }
            else {
                try {
                    for (var _b = __values(this.nodes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var node = _c.value;
                        if (node.id === id || node.identifier === id) {
                            return node;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            // :iip sets self as source
            if (id === this.id) {
                return this;
            }
            throw new Error(util.format('Node %s does not exist', id));
        };
        return Node$;
    }(Base));
}
exports.$Node = $Node;
(function ($Node) {
    function create(Base) {
        return util_1.mixin($Node, common_1.$Event.create, common_1.$Identity.create, port_1.$Port.create, ports_1.$Ports.create, process_1.$Process.create, shutdown_1.$Shutdown.create)(Base);
    }
    $Node.create = create;
})($Node = exports.$Node || (exports.$Node = {}));

},{"../common":10,"../context":23,"../events":26,"../io/handler":62,"../util":122,"../validate":127,"./port":50,"./ports":51,"./process":52,"./shutdown":55,"debug":147,"util":5}],50:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
var node_1 = require("./node");
function $Port(Base) {
    return /** @class */ (function (_super) {
        __extends(Port$, _super);
        function Port$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Plugs a source into a target node
         *
         *
         * @param {PortGroup} type
         * @param {Connector} connector
         */
        Port$.prototype.plugPort = function (type, connector) {
            return this.getNode(connector.id)
                .getPort(type, connector.port)
                .plug(connector);
        };
        /**
         *
         * Unplugs a port for the node specified.
         *
         * @param {PortGroup} type
         * @param {Connector} connector
         */
        Port$.prototype.unplugPort = function (type, connector) {
            if (this.hasNode(connector.id)) {
                return this.getNode(connector.id)
                    .getPort(type, connector.port)
                    .unplug(connector);
            }
            return false;
        };
        return Port$;
    }(Base));
}
exports.$Port = $Port;
(function ($Port) {
    function create(Base) {
        return util_1.mixin($Port, node_1.$Node.create)(Base);
    }
    $Port.create = create;
})($Port = exports.$Port || (exports.$Port = {}));

},{"../util":122,"./node":49}],51:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var forOf = require("object-forof");
var util = require("util");
var common_1 = require("../common");
var events_1 = require("../events");
var port_1 = require("../port/");
var util_1 = require("../util");
var action_1 = require("./action");
var export_1 = require("./export");
var link_1 = require("./link");
var node_1 = require("./node");
function $Ports(Base) {
    return /** @class */ (function (_super) {
        __extends(Ports$, _super);
        function Ports$() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, __spread(args)) || this;
            _this.ports = {
                input: {},
                output: {}
            };
            _this.linkMap = new Map();
            var node = util_1.getNodeArgument(args).node;
            if (node.ports) {
                _this.ports = JSON.parse(JSON.stringify(node.ports));
            }
            return _this;
            // Warning: is in between but moved to map mixin.
            // addMap
        }
        Object.defineProperty(Ports$.prototype, "filled", {
            get: function () {
                var filled = 0;
                if (this.ports.input) {
                    forOf(function (_name, port) {
                        if (port.filled) {
                            filled++;
                        }
                    }, this.ports.input);
                }
                return filled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ports$.prototype, "inPorts", {
            get: function () {
                return this.ports.input ? Object.keys(this.ports.input) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ports$.prototype, "outPorts", {
            get: function () {
                return this.ports.output ? Object.keys(this.ports.output) : [];
            },
            enumerable: true,
            configurable: true
        });
        // TODO: has been moved from Flow to here
        Ports$.prototype.initPortOptions = function () {
            // Init port options.
            for (var port in this.ports.input) {
                if (this.ports.input.hasOwnProperty(port)) {
                    // This flow's port
                    var thisPort = this.ports.input[port];
                    // set port option
                    if (thisPort.options) {
                        throw Error('Deprecated, use settings');
                        /*
                          for (const opt in thisPort.options) {
                            if (thisPort.options.hasOwnProperty(opt)) {
                              this.setPortOption(
                                'input',
                                port,
                                opt,
                                thisPort.options[opt])
                            }
                          }
                        */
                    }
                }
            }
        };
        /**
         *
         * Checks whether the port exists at the node
         * this Flow is relaying for.
         *
         * @param {String} type
         * @param {String} port
         */
        Ports$.prototype.portExists = function (type, port) {
            // this returns whether this port exists for _us_
            // it only considers the exposed ports.
            var portDef = this.getPortDefinition(port, type, false);
            return this.getNode(portDef.nodeId)
                .portExists(type, portDef.name);
        };
        /**
         *
         * Checks whether the port is open at the node
         * this Flow is relaying for.
         *
         * @param {String} port
         */
        Ports$.prototype.portIsOpen = function (port) {
            // the port open logic is about _our_ open and exposed ports.
            // yet of course it should check the real node.
            // so also delegate.
            var portDef = this.getPortDefinition(port, 'input');
            // Todo there is no real true false in portIsOpen?
            // it will fail hard.
            var node = this.getNode(portDef.nodeId);
            return node.portIsOpen(portDef.name);
        };
        /**
         *
         * Get _this_ Flow's port definition.
         *
         * The definition contains the _real_ port name
         * of the node _this_ port is relaying for.
         *
         * @param {String} port
         * @param {PortGroup} type
         * @param {boolean} _createStartPort
         */
        Ports$.prototype.getPortDefinition = function (port, type, _createStartPort) {
            if (port === ':start' && type === 'input') { // && _createStartPort && !this.portExists('input', ':start')) {
                this.addPort('input', ':start', {
                    name: ':start',
                    required: false,
                    type: 'any'
                });
            }
            var ports = this.ports[type];
            if (ports.hasOwnProperty(port)) {
                return ports[port];
            }
            throw new Error(util.format('Unable to find exported port definition for %s port `%s` (%s:%s)\n' +
                '\tAvailable ports: %s', type, port, this.ns, this.name, Object.keys(ports).toString()));
        };
        Ports$.prototype.getPort = function (type, name) {
            return this.getPortDefinition(name, type);
        };
        Ports$.prototype.getInputPort = function (name) {
            return this.getPortDefinition(name, 'input');
        };
        Ports$.prototype.getOutputPort = function (name) {
            return this.getPortDefinition(name, 'output');
        };
        /**
         *
         * Get the port option at the node
         * this flow is relaying for.
         *
         * @param {String} type
         * @param {String} port
         * @param {String} option
         */
        Ports$.prototype.getPortOption = function (type, port, option) {
            // Exposed ports can also have options set.
            // if this is _our_ port (it is exposed)
            // just delegate this to the real node.
            var portDef = this.getPortDefinition(port, type);
            // Todo there is no real true false in portIsOpen?
            // it will fail hard.
            return this.getNode(portDef.nodeId)
                .getPortOption(type, portDef.name, option);
        };
        /**
         *
         * Sets an input port option.
         *
         * The node schema for instance can specify whether a port is persistent.
         *
         * At the moment a connection can override these values.
         * It's a way of saying I give you this once so take care of it.
         *
         * Ok, with forks running this should eventually be much smarter.
         * If there are long running flows, all instances should have their
         * ports updated.
         *
         * Not sure when setPortOption is called, if it is called during 'runtime'
         * there is no problem and we could just set it on the current Actor.
         * I could also just already fix it and update baseActor and all _actors.
         * which would be sufficient.
         */
        Ports$.prototype.setPortOption = function (type, port, opt, value) {
            var portDef = this.getPortDefinition(port, type);
            this.getNode(portDef.nodeId)
                .setPortOption(type, portDef.name, opt, value);
        };
        Ports$.prototype.exposePort = function (type, nodeId, port, name) {
            var node = this.getNode(nodeId);
            var ports = node.ports[type];
            if (ports) {
                for (var p in ports) {
                    if (ports.hasOwnProperty(p)) {
                        if (p === port) {
                            this.addPort(type, name, {
                                name: port,
                                nodeId: nodeId
                            });
                            continue;
                        }
                    }
                }
            }
            this.event(events_1.FlowEvents.ADD_PORT, {
                name: port,
                node: this.export(),
                nodeId: nodeId,
                port: name,
                type: type
            });
        };
        Ports$.prototype.removePort = function (type, name) {
            if (this.portExists(type, name)) {
                this._deletePort(type, name);
                this.event(events_1.FlowEvents.REMOVE_PORT, {
                    node: this.export(),
                    port: name,
                    type: type
                });
            }
        };
        Ports$.prototype.renamePort = function (type, from, to) {
            var e_1, _a;
            var ports = this.ports[type];
            if (ports[from]) {
                ports[to] = ports[from];
                ports[to].name = to;
                try {
                    for (var _b = __values(this.links.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var link = _c.value;
                        if (type === 'input' &&
                            link.target.id === this.id &&
                            link.target.port === from) {
                            link.target.port = to;
                        }
                        else if (type === 'output' &&
                            link.source.id === this.id &&
                            link.source.port === from) {
                            link.source.port = to;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                this._deletePort(type, from);
                this.event(events_1.FlowEvents.RENAME_PORT, {
                    from: from,
                    node: this.export(),
                    to: to,
                    type: type
                });
            }
        };
        Ports$.prototype.addPort = function (type, name, externalPortDefinition) {
            var ports = this.ports[type];
            if (!ports) {
                ports[type] = {};
            }
            if (type === 'input' && name === ':start') {
                ports[name] = new port_1.ExternalStartPort(externalPortDefinition, this);
            }
            else {
                var internalPort = this.getNode(externalPortDefinition.nodeId)
                    .getPort(type, externalPortDefinition.name);
                if (type === 'input') {
                    ports[name] = new port_1.ExternalInputPort(externalPortDefinition, internalPort);
                }
                else {
                    ports[name] = new port_1.ExternalOutputPort(externalPortDefinition, internalPort);
                }
            }
            var _port = ports[name];
            _port.setParent(this);
        };
        /**
         *
         * Close the port of the node we are relaying for
         * and also close our own port.
         *
         * @param {String} port
         */
        Ports$.prototype.closePort = function (port) {
            // delegate this to the real node
            // only if this is one of _our_ exposed nodes.
            var portDef = this.getPortDefinition(port, 'input');
            if (port !== ':start') {
                this.getNode(portDef.nodeId).closePort(portDef.name);
            }
        };
        Ports$.prototype.getPortType = function (kind, port) {
            if (port === ':start') {
                return 'any';
            }
            var portName;
            if (Array.isArray(port)) {
                if (port.length < 1) {
                    throw Error('Cannot determine port.');
                }
                portName = port[0];
            }
            else {
                portName = port;
            }
            var portDef = this.getPortDefinition(portName, 'input');
            var node = this.getNode(portDef.nodeId);
            var type = node.getPortType(kind, portDef.name);
            if (type) {
                return type;
            }
            throw Error('Unable to determine port type');
        };
        Ports$.prototype.inputPortAvailable = function (target) {
            if (!target.port) {
                throw Error("Target port is not defined.");
            }
            if (target.action && !this.isAction()) {
                return this.action(target.action).inputPortAvailable(target);
            }
            else {
                if (target.port === ':start') {
                    return true;
                }
                else {
                    var portDef = this.getPortDefinition(target.port, 'input');
                    if (!target.wire) {
                        throw Error('Port is not connected');
                    }
                    if (!this.linkMap.has(target.wire.id)) {
                        throw Error('Cannot find internal link within linkMap');
                    }
                    var link = this.linkMap.get(target.wire.id);
                    if (link.target) {
                        var targetNode = this.getNode(portDef.nodeId);
                        return targetNode.inputPortAvailable(link.target);
                    }
                    throw Error("Internal link does not contain a target.");
                }
            }
        };
        /**
         *
         * Receive a ports definition and creates the Port instances
         *
         * @param {Object} ports
         * @param {Object} ports.input
         * @param {Object} ports.output
         */
        Ports$.prototype.createPorts = function (ports) {
            var _this = this;
            if (ports === void 0) { ports = {
                input: {},
                output: {}
            }; }
            // initialize both input and output ports might
            // one of them be empty.
            if (!ports.input) {
                ports.input = {};
            }
            if (!ports.output) {
                ports.output = {};
            }
            this.ports = { input: {}, output: {} };
            forOf(function (name, portDefinition) { return _this.addPort('input', name, portDefinition); }, ports.input);
            forOf(function (name, portDefinition) { return _this.addPort('output', name, portDefinition); }, ports.output);
            // Always add complete port, :start port will be added dynamically
            // this.addPort('output', ':complete', {name: ':complete', type: 'any'})
        };
        Ports$.prototype.sendPortOutput = function (port, packet) {
            var out = {
                node: this.export(),
                out: packet,
                port: port
            };
            if (this.isAction()) {
                out.action = this.action;
            }
            packet.release(this);
            this.event(events_1.FlowEvents.OUTPUT, out);
        };
        Ports$.prototype._deletePort = function (type, name) {
            var ports = this.ports[type];
            delete ports[name];
        };
        return Ports$;
    }(Base));
}
exports.$Ports = $Ports;
(function ($Ports) {
    function create(Base) {
        return util_1.mixin($Ports, action_1.$Action.create, common_1.$Event.create, export_1.$Export.create, common_1.$Identity.create, link_1.$Link.create, node_1.$Node.create)(Base);
    }
    $Ports.create = create;
})($Ports = exports.$Ports || (exports.$Ports = {}));

},{"../common":10,"../events":26,"../port/":104,"../util":122,"./action":34,"./export":38,"./link":44,"./node":49,"object-forof":161,"util":5}],52:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var manager_1 = require("../process/manager");
var util_1 = require("../util");
var node_1 = require("./node");
function $Process(Base) {
    return /** @class */ (function (_super) {
        __extends(Process$, _super);
        function Process$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.pid = null;
            _this.processManager = new manager_1.ProcessManager();
            return _this;
        }
        /**
         *
         * Add Process Manager.
         *
         * The Process Manager holds all processes.
         *
         * @param {ProcessManager} processManager
         * @public
         *
         */
        Process$.prototype.setProcessManager = function (processManager) {
            this.processManager = processManager;
            return this;
        };
        /**
         *
         * Retrieve a node by it's process id
         *
         * @param {String} pid - Process ID
         * @return {Object} node
         * @public
         */
        Process$.prototype.getNodeByPid = function (pid) {
            var process = Array.from(this.nodes.values())
                .find(function (node) { return node.pid === pid; });
            if (!process) {
                throw Error('Process not found');
            }
            return process;
        };
        /**
         *
         * Used by the process manager to set our id
         *
         */
        Process$.prototype.setPid = function (pid) {
            this.pid = pid;
        };
        return Process$;
    }(Base));
}
exports.$Process = $Process;
(function ($Process) {
    function create(Base) {
        return util_1.mixin($Process, node_1.$Node.create)(Base);
    }
    $Process.create = create;
})($Process = exports.$Process || (exports.$Process = {}));

},{"../process/manager":110,"../util":122,"./node":49}],53:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function $Providers(Base) {
    return /** @class */ (function (_super) {
        __extends(Providers$, _super);
        function Providers$() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, __spread(args)) || this;
            var node = util_1.getNodeArgument(args).node;
            if (node.provider) {
                _this.provider = node.provider;
            }
            if (node.providers) {
                _this.providers = node.providers;
            }
            return _this;
        }
        return Providers$;
    }(Base));
}
exports.$Providers = $Providers;
(function ($Providers) {
    function create(Base) {
        return util_1.mixin($Providers)(Base);
    }
    $Providers.create = create;
})($Providers = exports.$Providers || (exports.$Providers = {}));

},{"../util":122}],54:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var identity_1 = require("../common/identity");
var util_1 = require("../util");
var node_1 = require("./node");
function $Report(Base) {
    return /** @class */ (function (_super) {
        __extends(Report$, _super);
        function Report$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * JSON Status report about the nodes.
         *
         * Mainly meant to debug after shutdown.
         *
         * Should handle all stuff one can think of
         * why `it` doesn't work.
         *
         */
        Report$.prototype.report = function () {
            // let size
            // const qm = this.ioHandler.queueManager
            var e_1, _a;
            var _report = {
                flow: this.id,
                nodes: [],
                ok: true,
                queues: []
            };
            try {
                for (var _b = __values(this.nodes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    if (node.status !== 'complete') {
                        _report.ok = false;
                        _report.nodes.push({
                            node: node.report()
                        });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            /*
          for (const link of this.links.values()) {
            if (qm.hasQueue(link.ioid)) {
              size = qm.size(link.ioid)
              _report.ok = false
              _report.queues.push({
                link: link.toJSON(),
                port: link.target.port,
                // super weird, will be undefined if called here.
                // size: qm.size(link.ioid),
                size: size,
                node: this.getNode(link.target.id).report()
              })
            }
          }
          */
            return _report;
        };
        return Report$;
    }(Base));
}
exports.$Report = $Report;
(function ($Report) {
    function create(Base) {
        return util_1.mixin($Report, identity_1.$Identity.create, node_1.$Node.create)(Base);
    }
    $Report.create = create;
})($Report = exports.$Report || (exports.$Report = {}));

},{"../common/identity":9,"../util":122,"./node":49}],55:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function $Shutdown(Base) {
    return /** @class */ (function (_super) {
        __extends(Shutdown$, _super);
        function Shutdown$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Shutdown$.prototype.hasShutdown = function () {
            return false;
        };
        return Shutdown$;
    }(Base));
}
exports.$Shutdown = $Shutdown;
(function ($Shutdown) {
    function create(Base) {
        return util_1.mixin($Shutdown)(Base);
    }
    $Shutdown.create = create;
})($Shutdown = exports.$Shutdown || (exports.$Shutdown = {}));

},{"../util":122}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.$Status = {
    HOLD: 'hold',
    RUNNING: 'running',
    STOPPED: 'stopped'
};

},{}],57:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var util_1 = require("../util");
var validate_1 = require("../validate");
var link_1 = require("./link");
var node_1 = require("./node");
var ports_1 = require("./ports");
var providers_1 = require("./providers");
function $ToJSON(Base) {
    return /** @class */ (function (_super) {
        __extends(ToJSON$, _super);
        function ToJSON$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Export this modified instance to a node definition.
         *
         * @public
         */
        ToJSON$.prototype.toJSON = function () {
            var e_1, _a, e_2, _b;
            var nodeDefinition = {
                description: this.description,
                id: this.id,
                links: [],
                name: this.name,
                nodes: [],
                ns: this.ns,
                ports: this.ports,
                providers: this.providers,
                title: this.title,
                type: this.type
            };
            try {
                for (var _c = __values(this.nodes.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var node = _d.value;
                    nodeDefinition.nodes.push(node.toJSON());
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _e = __values(this.links.values()), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var link = _f.value;
                    nodeDefinition.links.push(link.toJSON());
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            validate_1.validate.flow(nodeDefinition);
            return nodeDefinition;
        };
        return ToJSON$;
    }(Base));
}
exports.$ToJSON = $ToJSON;
(function ($ToJSON) {
    function create(Base) {
        return util_1.mixin($ToJSON, common_1.$Identity.create, link_1.$Link.create, common_1.$Meta.create, node_1.$Node.create, ports_1.$Ports.create, providers_1.$Providers.create)(Base);
    }
    $ToJSON.create = create;
})($ToJSON = exports.$ToJSON || (exports.$ToJSON = {}));

},{"../common":10,"../util":122,"../validate":127,"./link":44,"./node":49,"./ports":51,"./providers":53}],58:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var BaseHandler = /** @class */ (function (_super) {
    __extends(BaseHandler, _super);
    function BaseHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BaseHandler;
}(events_1.EventEmitter));
exports.BaseHandler = BaseHandler;

},{"events":1}],59:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var uuid_1 = require("uuid");
var events_1 = require("../events");
var debug = _debug('chix:io');
function $Connect(Base) {
    return /** @class */ (function (_super) {
        __extends(Connect$, _super);
        function Connect$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.connections = new Map();
            return _this;
        }
        /**
         *
         * Connects ports together using the link information provided.
         *
         * @param {xLink} link
         * @fires IO#connect
         * @public
         */
        Connect$.prototype.connect = function (link) {
            if (!link.source ||
                !link.source.id ||
                !link.source.port) {
                throw Error('Link requires a source');
            }
            if (!link.source.pid) {
                link.source.pid = link.source.id;
            }
            if (!link.ioid) {
                link.ioid = uuid_1.v4();
            }
            if (!link.target ||
                !link.target.id ||
                !link.target.port) {
                throw Error('Link requires a target');
            }
            if (!link.target.pid) {
                link.target.pid = link.target.id;
            }
            this.connections.set(link.ioid, link);
            if (link.target.has('sync')) {
                this.addSyncedTarget(link);
            }
            if (link.source.get('pointer')) {
                this.addPointerPort(link);
            }
            debug('%s: link connected', link.ioid);
            link.source.on(events_1.ConnectorEvents.DATA, this.onDataHandler);
            this.emit(events_1.IOEvents.CONNECT, link);
        };
        Connect$.prototype.get = function (link) {
            if (this.connections.has(link.ioid)) {
                return this.connections.get(link.ioid);
            }
            throw Error('Unable to get link.');
        };
        return Connect$;
    }(Base));
}
exports.$Connect = $Connect;

},{"../events":26,"debug":147,"uuid":163}],60:[function(require,module,exports){
(function (process){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var events_1 = require("../events");
var packet_1 = require("../packet");
var util_1 = require("./util");
var debug = _debug('chix:io');
function $Control(Base) {
    return /** @class */ (function (_super) {
        __extends(Control$, _super);
        function Control$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._heldItems = [];
            _this._hold = false;
            _this._shutdown = false;
            _this.onDataHandler = function (packet, source) {
                var wire = source.wire;
                if (!wire) {
                    throw Error('Could not find link on connector.');
                }
                if (source.get('collect')) {
                    debug('%s: collecting packets', wire.ioid);
                    throw Error('Collect not implemented');
                    // this.CHI.collect(wire, packet)
                    // return // will be handled by event
                }
                _this.emit(events_1.IOEvents.SEND, wire);
                _this.send(wire, packet);
            };
            return _this;
        }
        /**
         * @param {Packet} p - Packet
         * @param {Connector} source - Source Connector
         * @fires IO#send
         */
        Control$.prototype.reset = function () {
            this._shutdown = true;
        };
        /**
         *
         * @param {Packet} packet - The dropped packet
         * @param {String} origin - Origin
         * @fires IO#drop
         */
        Control$.prototype.drop = function (packet, origin) {
            // TODO: drop data/packet gracefully
            debug('IoHandler: Dropping packet %s %s', packet, origin);
            this.emit(events_1.IOEvents.DROP, packet);
        };
        Control$.prototype.hold = function () {
            this._hold = true;
            this._heldItems = [];
        };
        Control$.prototype.step = function () {
            if (this._heldItems.length) {
                var _a = __read(this._heldItems.shift(), 2), link = _a[0], packet = _a[1];
                this.send(link, packet, true);
            }
        };
        Control$.prototype.resume = function () {
            this._hold = false;
            var item;
            if (this._heldItems.length) {
                // tslint:disable-next-line no-conditional-assignment
                while (item = this._heldItems.shift()) {
                    this.send(item[0], item[1], true);
                }
            }
        };
        /**
         *
         * The method to provide input to this io handler.
         *
         * @param {Link} link
         * @param {Packet} packet
         * @param {boolean} step
         *
         */
        Control$.prototype.send = function (link, packet, step) {
            if (this._hold && !step) {
                this._heldItems.push([link, packet]);
            }
            else {
                if (!packet_1.Packet.isPacket(packet)) {
                    throw Error('send expects a packet');
                }
                debug('sending packet');
                /*
                if (link.source.has('pointer')) { // is just a boolean
                  debug('%s: handling pointer', link.ioid)
                  p.setOwner(link)
                  p = p.clone(link)
                  p.release(link)

                  // Create an identifier
                  const pp = this.getSendPorts(link.source.pid)
                  pp.unshift(link.source.pid)
                  const identifier = pp.join('-')
                  // The source node+port are pointed to.
                  // The packet has it's chi updated with the
                  // source.pid as key and an assigned item id as value
                  this.CHI.pointer(
                    link.source.pid,
                    link.source.port,
                    p,
                    identifier
                  )
                }
                if (link.target.has('sync')) {
                  debug('%s: handling sync port', link.ioid)
                  const syncPorts = this.getSyncedTargetPorts(link.target)
                  this.CHI.sync(
                    link,
                    link.target.get('sync'), // originId
                    p,
                    syncPorts
                  )
                  // always return, react on CHI.on('synced')
                  return
                }
                */
                this.__sendData(link, packet);
            }
        };
        /**
         *
         * The method to provide input to this io handler.
         *
         * Ok, what misses here is info on how to find the actor
         * Who needs the information
         *
         *
         * Actor:
         *
         *  ioHandler.listenTo(Object.keys(this.nodes),
         *
         * @param {Connector} target
         * @param {object} input
         * @param {object} chi
         * @fires IO#data
         * @fires IO#packet
         * @fires IO#receive
         * @private
         */
        /*
        *
        * Send Data
        *
        * @param {xLink} link - Link to write to
        * @param {Packet} data - The input data
        * @private
        */
        Control$.prototype.__sendData = function (link, packet) {
            if (this._shutdown) {
                // TODO:: probably does not both have to be dropped
                // during __sendData *and* during output
                packet.release(link);
                this.drop(packet, link);
            }
            else {
                /* Do this with a component
                if (link.target.has('cyclic') &&
                  Array.isArray(p.read(link)) // second time it's not an array anymore
                ) {
                  debug('%s: cycling', link.ioid)
                  // grouping
                  // The counter part will be 'collect'
                  const g = this.CHI.group()
                  if (p.read(link).length === 0) {
                    return false
                  }
                  const data = JSON.parse(JSON.stringify(p.read(link)))
                  for (let i = 0; i < data.length; i++) {
                    // create new packet
                    const newPacket = Packet.create(
                      data[i],
                      typeof data[i] // not sure if this will always work.
                    ).setOwner(link)
                    // this is a copy taking place..
                    newPacket.set('chi', p.chi ? JSON.parse(JSON.stringify(p.chi)) : {})
                    g.item(newPacket.chi)
                    this.send(link, newPacket)
                  }
                  g.done()
                  return null
                }
                */
                var packetClone_1;
                if (link.source.has('index') && !packet.hasOwnProperty('index')) {
                    // already done during clone
                    // cp.chi = JSON.parse(JSON.stringify(cp.chi))
                    // const cp = packet.clone(link); // important!
                    packetClone_1 = packet.clone(packet.owner); // important!
                    if (undefined === packetClone_1.read(packet.owner)[link.source.get('index')]) {
                        debug('%s: INDEX UNDEFINED %s', link.ioid, link.source, packetClone_1.read(packetClone_1.owner));
                        return undefined; // nop
                    }
                    else {
                        util_1.handleIndex(link, packetClone_1.read(packetClone_1.owner), packetClone_1);
                        // cp.write(link, handleIndex(link, cp.read(link), cp))
                    }
                }
                else {
                    packetClone_1 = packet;
                }
                // better call it pointer
                if (link.target.has('mask')) {
                    packetClone_1.point(packetClone_1.owner, link.target.get('mask'));
                }
                this.emit(events_1.IOEvents.DATA, {
                    data: packetClone_1.read(link),
                    link: link
                    // data: cp.read(link) // only emit the data
                });
                this.emit(events_1.IOEvents.PACKET, {
                    data: packetClone_1,
                    link: link
                });
                debug('writing packet %s -> %s', link.source.port, link.target.port);
                process.nextTick(function () {
                    packetClone_1.release(link);
                    link.target.write(packetClone_1);
                });
                this.emit(events_1.IOEvents.RECEIVE, link);
            }
        };
        return Control$;
    }(Base));
}
exports.$Control = $Control;

}).call(this,require('_process'))
},{"../events":26,"../packet":93,"./util":67,"_process":3,"debug":147}],61:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var events_1 = require("../events");
var debug = _debug('chix:io');
function $Disconnect(Base) {
    return /** @class */ (function (_super) {
        __extends(Disconnect$, _super);
        function Disconnect$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Disconnects a link
         *
         * @param {xLink} link
         * @fires IO#disconnect
         */
        Disconnect$.prototype.disconnect = function (link) {
            // unregister the connection
            if (this.connections.has(link.ioid)) {
                this.connections.delete(link.ioid);
            }
            else {
                throw Error('Cannot disconnect an unknown connection');
            }
            if (this.syncedTargetMap.has(link.target.pid)) {
                this.removeSyncedTarget(link);
            }
            if (this.pointerPorts.has(link.source.pid)) {
                this.removePointerPort(link);
            }
            debug('%s: disconnected', link.ioid);
            delete link.ioid;
            link.source.removeListener(events_1.ConnectorEvents.DATA, this.onDataHandler);
            // used by actor to close ports
            this.emit(events_1.IOEvents.DISCONNECT, link);
        };
        return Disconnect$;
    }(Base));
}
exports.$Disconnect = $Disconnect;

},{"../events":26,"debug":147}],62:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BaseHandler_1 = require("./BaseHandler");
var mixin_1 = require("./mixin");
/**
 * Io Handler
 *
 * It should know:
 *
 *  - the connections.
 *  - relevant source & target connection settings.
 *
 * Connection settings can overlap with port settings.
 * Connection settings take precedence over port settings.
 *
 * @constructor
 * @public
 */
var IoHandler = /** @class */ (function (_super) {
    __extends(IoHandler, _super);
    function IoHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IoHandler;
}(mixin_1.IoHandlerMixin(BaseHandler_1.BaseHandler)));
exports.IoHandler = IoHandler;

},{"./BaseHandler":58,"./mixin":63}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
var connect_1 = require("./connect");
var control_1 = require("./control");
var disconnect_1 = require("./disconnect");
var pointer_1 = require("./pointer");
var sync_1 = require("./sync");
exports.IoHandlerMixin = util_1.mixin(connect_1.$Connect, control_1.$Control, disconnect_1.$Disconnect, pointer_1.$Pointer, sync_1.$Sync);

},{"../util":122,"./connect":59,"./control":60,"./disconnect":61,"./pointer":64,"./sync":65}],64:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var debug = _debug('chix:io');
function $Pointer(Base) {
    return /** @class */ (function (_super) {
        __extends(Pointer$, _super);
        function Pointer$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.pointerPorts = new Map();
            return _this;
        }
        Pointer$.prototype.addPointerPort = function (link) {
            if (!link.source.pid) {
                throw Error('Could not find pid for source.');
            }
            if (!this.pointerPorts.has(link.source.pid)) {
                this.pointerPorts.set(link.source.pid, []);
            }
            var pointers = this.pointerPorts.get(link.source.pid);
            pointers.push(link.source.port);
            debug('%s: added pointer port `%s`', link.ioid, link.source.port);
        };
        Pointer$.prototype.removePointerPort = function (link) {
            var src = this.pointerPorts.get(link.source.pid);
            if (!src) {
                throw Error("Could not find " + link.source.pid);
            }
            src.splice(src.indexOf(link.source.port), 1);
            if (src.length === 0) {
                this.pointerPorts.delete(link.source.pid);
            }
        };
        Pointer$.prototype.getPointerPorts = function (originId) {
            if (this.pointerPorts.has(originId)) {
                return this.pointerPorts.get(originId);
            }
            else {
                throw new Error(originId + " s has no pointer ports");
            }
        };
        return Pointer$;
    }(Base));
}
exports.$Pointer = $Pointer;

},{"debug":147}],65:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var debug = _debug('chix:io');
function $Sync(Base) {
    return /** @class */ (function (_super) {
        __extends(Sync$, _super);
        function Sync$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.syncedTargetMap = new Map();
            return _this;
        }
        // build the syncedTargetMap, it contains a port array
        // (the group that wants a sync with some originId
        Sync$.prototype.addSyncedTarget = function (link) {
            if (!this.syncedTargetMap.has(link.target.pid)) {
                this.syncedTargetMap.set(link.target.pid, {});
            }
            if (!this.syncedTargetMap.get(link.target.pid)[link.target.get('sync')]) {
                this.syncedTargetMap.get(link.target.pid)[link.target.get('sync')] = [];
            }
            this.syncedTargetMap.get(link.target.pid)[link.target.get('sync')]
                .push(link.target.port);
            debug('%s: syncing source port `%s` with target port %s', link.ioid, link.target.get('sync'), link.target.port);
        };
        Sync$.prototype.removeSyncedTarget = function (link) {
            var tgt = this.syncedTargetMap.get(link.target.pid);
            tgt.splice(tgt.indexOf(link.target.port), 1);
            if (tgt.length === 0) {
                this.syncedTargetMap.delete(link.target.pid);
            }
        };
        Sync$.prototype.getSyncedTargetPorts = function (target) {
            var originId = target.get('sync');
            if (!this.syncedTargetMap.has(target.pid)) {
                throw new Error("Unknown sync: " + target.pid);
            }
            if (!this.syncedTargetMap.get(target.pid)
                .hasOwnProperty(originId)) {
                throw new Error("Unknown sync with: " + originId);
            }
            // returns the ports array, those who want to sync with originId
            return this.syncedTargetMap.get(target.pid)[originId];
        };
        /**
         *
         * Send synchronized input
         *
         * TODO: Input is synced here then we
         *   throw it into the input sender.
         *   They probably stay synced, but
         *   it's not enforced anywhere after this.
         *
         * @param {string} targetId
         * @param {object} data
         */
        Sync$.prototype.sendSynced = function (_targetId, data) {
            for (var targetPort in data) {
                if (data.hasOwnProperty(targetPort)) {
                    var synced = data[targetPort];
                    // keep in sync, do not use setImmediate
                    debug('%s: sendSynced', synced.link.ioid);
                    this.__sendData(synced.link, synced.p);
                }
            }
        };
        return Sync$;
    }(Base));
}
exports.$Sync = $Sync;

},{"debug":147}],66:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Handles the index
 *
 * TODO: packet is still needed, because index is set
 *
 * @param {Link} link
 * @param {any} data
 * @param {Packet} packet
 * @public
 */
function handleIndex(link, data, packet) {
    // TODO: data should be better defined and a typed object
    var index = link.source.get('index');
    if (/^\d+/.test(index)) {
        // numeric
        if (Array.isArray(data)) {
            if (index < data.length) {
                // new remember index.
                packet.point(link, index);
                // packet.index = index
                // return data[index]
            }
            else {
                throw Error("index[] out-of-bounds on array output port " + link.source.port);
            }
        }
        else {
            throw Error("Got index[] on array output port " + link.source.port + ", but data is not of the array type");
        }
    }
    else {
        if (typeof data === 'object') {
            if (data.hasOwnProperty(index)) {
                // TODO: test with dot-object
                // new remember index.
                packet.point(link, index);
                // p.index = index
                // return data[index]
            }
            else {
                // maybe do not fail hard and just send to the error port.
                console.log(packet);
                throw Error("Property " + index + " not found on object output port " + link.source.port);
            }
        }
        else {
            throw Error("Got index[] on non-object output port " + link.source.port);
        }
    }
}
exports.handleIndex = handleIndex;

},{}],67:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./handleIndex"));

},{"./handleIndex":66}],68:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var uuid_1 = require("uuid");
var connector_1 = require("./connector");
var events_1 = require("./events");
var setting_1 = require("./setting");
var validate_1 = require("./validate");
/**
 * xLink
 *
 * Settings:
 *
 *   - ttl
 *   - expire
 *   - dispose: true
 *
 * Just need something to indicate it's an iip.
 *
 * @constructor
 * @public
 */
var Link = /** @class */ (function (_super) {
    __extends(Link, _super);
    function Link(id, ioid) {
        if (id === void 0) { id = uuid_1.v4(); }
        if (ioid === void 0) { ioid = uuid_1.v4(); }
        var _this = _super.call(this) || this;
        _this.fills = 0;
        _this.writes = 0;
        _this.metadata = {};
        _this.source = new connector_1.Connector();
        _this.target = new connector_1.Connector();
        _this.id = id;
        _this.ioid = ioid;
        return _this;
    }
    /**
     *
     * Creates a new connection/link
     *
     * Basically takes a plain link object
     * and creates a proper xLink from it.
     *
     * The internal map holds xLinks, whereas
     * the source map is just plain JSON.
     *
     * Structure wise they are almost the same.
     *
     * @param {LinkDefinition} linkDefinition
     * @return {Link} LinkType
     * @public
     */
    Link.create = function (linkDefinition, LinkType) {
        if (linkDefinition === void 0) { linkDefinition = {}; }
        if (LinkType === void 0) { LinkType = Link; }
        if (!linkDefinition.source) {
            linkDefinition.source = {};
        }
        if (!linkDefinition.target) {
            linkDefinition.target = {};
        }
        var link = new LinkType(linkDefinition.id, linkDefinition.ioid);
        if (linkDefinition.source || linkDefinition.target) {
            link.build(linkDefinition);
        }
        return link;
    };
    Link.prototype.build = function (linkDefinition) {
        if (!linkDefinition.source) {
            throw Error('Create link expects a source');
        }
        if (!linkDefinition.target) {
            throw Error('Create link expects a target');
        }
        this.source.clearSettings();
        this.target.clearSettings();
        validate_1.validate.link(linkDefinition);
        this.setSource(linkDefinition.source.id, linkDefinition.source.port, linkDefinition.source.setting, linkDefinition.source.action);
        if (linkDefinition.metadata) {
            this.setMetadata(linkDefinition.metadata);
        }
        else {
            this.setMetadata({});
        }
        this.setTarget(linkDefinition.target.id, linkDefinition.target.port, linkDefinition.target.setting, linkDefinition.target.action);
    };
    /**
     *
     * Set target
     *
     * @param {String} targetId
     * @param {String} port
     * @param {Object} settings
     * @param {String} action
     * @public
     */
    Link.prototype.setTarget = function (targetId, port, settings, action) {
        if (settings) {
            this.target.configure(settings);
        }
        this.target.wire = this;
        this.target.plug(targetId, port, action);
    };
    /**
     *
     * Set Source
     *
     * @param {Object} sourceId
     * @param {String} port
     * @param {Object} settings
     * @param {String} action
     * @public
     */
    Link.prototype.setSource = function (sourceId, port, settings, action) {
        if (settings) {
            this.source.configure(settings);
        }
        this.source.wire = this;
        this.source.plug(sourceId, port, action);
    };
    /**
     *
     * Setting of pids is delayed.
     * I would like them to be available during plug.
     * but whatever.
     *
     */
    Link.prototype.setSourcePid = function (pid) {
        this.source.setPid(pid);
    };
    Link.prototype.setTargetPid = function (pid) {
        this.target.setPid(pid);
    };
    Link.prototype.setMetadata = function (metadata) {
        this.metadata = metadata;
    };
    Link.prototype.setMeta = function (key, val) {
        this.metadata[key] = val;
    };
    /**
     *
     * Set Title
     *
     * @param {String} title
     * @fires Link#metadata
     * @public
     */
    Link.prototype.setTitle = function (title) {
        this.setMeta('title', title);
        this.emit(events_1.LinkEvents.CHANGE, this, 'metadata', this.metadata);
    };
    /**
     *
     * @fires Link#clear
     * @public
     */
    Link.prototype.clear = function () {
        this.fills = 0;
        this.writes = 0;
        this.emit(events_1.LinkEvents.CLEAR, this);
    };
    /**
     * Update link by passing it a full object.
     *
     * Will only emit one change event.
     *
     * @fires Link#change
     * @public
     */
    Link.prototype.update = function (linkDefinition) {
        this.build(linkDefinition);
        this.emit(events_1.LinkEvents.CHANGE, this);
    };
    Link.prototype.toJSON = function () {
        // TODO: use schema validation for toJSON
        if (!this.hasOwnProperty('source')) {
            console.log(this);
            throw Error('Link should have a source property');
        }
        if (!this.hasOwnProperty('target')) {
            throw Error('Link should have a target property');
        }
        var link = {
            id: this.id,
            source: this.source.toJSON(),
            target: this.target.toJSON()
        };
        if (this.metadata) {
            link.metadata = this.metadata;
        }
        if (this.fills) {
            link.fills = this.fills;
        }
        if (this.writes) {
            link.writes = this.writes;
        }
        if (this.data !== undefined) {
            link.data = JSON.parse(JSON.stringify(this.data));
        }
        return link;
    };
    return Link;
}(setting_1.Setting));
exports.Link = Link;

},{"./connector":21,"./events":26,"./setting":120,"./validate":127,"uuid":163}],69:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseNode = /** @class */ (function () {
    function BaseNode() {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
    }
    return BaseNode;
}());
exports.BaseNode = BaseNode;

},{}],70:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("util");
var common_1 = require("../common");
var events_1 = require("../events");
var packet_1 = require("../packet");
var util_1 = require("../util");
var output_1 = require("./output");
var ports_1 = require("./ports");
function $CallbackWrapper(Base) {
    return /** @class */ (function (_super) {
        __extends(CallbackWrapper$, _super);
        function CallbackWrapper$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Generic Callback wrapper
         *
         * Will collect the arguments and pass them on to the next node
         *
         * So technically the next node is the callback.
         *
         * Parameters are defined on the output as ports.
         *
         * Each callback argument must be defined as output port
         * in the callee's schema
         *
         * e.g.
         *
         *  node style callback:
         *
         *  ports.output: { err: ..., result: ... }
         *
         *  connect style callback:
         *
         *  ports.output: { req: ..., res: ..., next: ... }
         *
         * The order of appearance of arguments must match those of the ports within
         * the json schema.
         *
         * TODO: Within the schema you must define the correct type otherwise output
         * will be refused
         */
        CallbackWrapper$.prototype._callbackWrapper = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var obj = {};
            var ports = this.outPorts;
            for (var i = 0; i < args.length; i++) {
                if (!ports[i]) {
                    this.event(events_1.NodeEvents.ERROR, {
                        msg: Error(util.format('Unexpected extra port of type %s', typeof args[i] === 'object' ? args[i].constructor.name : typeof args[i]))
                    });
                }
                else {
                    obj[ports[i]] = packet_1.Packet.create(args[i]);
                }
            }
            this._output(obj);
        };
        return CallbackWrapper$;
    }(Base));
}
exports.$CallbackWrapper = $CallbackWrapper;
(function ($CallbackWrapper) {
    function create(Base) {
        return util_1.mixin($CallbackWrapper, common_1.$Event.create, ports_1.$Ports.create, output_1.$Output.create)(Base);
    }
    $CallbackWrapper.create = create;
})($CallbackWrapper = exports.$CallbackWrapper || (exports.$CallbackWrapper = {}));

},{"../common":10,"../events":26,"../packet":93,"../util":122,"./output":83,"./ports":85,"util":5}],71:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var forOf = require("object-forof");
var common_1 = require("../common");
var events_1 = require("../events");
var packet_1 = require("../packet");
var util_1 = require("../util");
var ports_1 = require("./ports");
var debug = _debug('chix:node');
function $Context(Base) {
    return /** @class */ (function (_super) {
        __extends(Context$, _super);
        function Context$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.setContext = _this.setContextProperty;
            return _this;
        }
        Context$.prototype.$setContextProperty = function (port, data, trigger) {
            debug('%s:%s set context', this.identifier, port);
            if (data === undefined) {
                throw Error('Refused to $setContextProperty to undefined');
            }
            var packet;
            if (packet_1.Packet.isPacket(data)) {
                packet = data;
            }
            else {
                packet = packet_1.Packet.create(data, this.getPortType('input', port))
                    .setOwner(this);
            }
            this.getInputPort(port)
                .setContext(packet, trigger);
        };
        Object.defineProperty(Context$.prototype, "context", {
            get: function () {
                var context = {};
                forOf(function (name, port) {
                    context[name] = port.context;
                }, this.ports.input);
                return context;
            },
            enumerable: true,
            configurable: true
        });
        Context$.prototype.clearContextProperty = function (port) {
            debug('%s:%s clear context', this.identifier, port);
            this.getInputPort(port)
                .clearContext();
            this.event(events_1.NodeEvents.CONTEXT_CLEAR, {
                node: this,
                port: port
            });
        };
        /**
         *
         * Add context.
         *
         * Must be set in one go.
         *
         * @param {Object} context
         * @public
         */
        Context$.prototype.addContext = function (context) {
            var _this = this;
            forOf(function (port, val) {
                _this.setContextProperty(port, val);
            }, context);
        };
        /**
         *
         * Set context to a port.
         *
         * Can be changed during runtime, but will never trigger
         * a start.
         *
         * Adding the whole context in one go could trigger a start.
         *
         * @param {String} port
         * @param {Mixed} data
         * @param {Boolean} trigger whether to trigger a port fill event
         * @emits BaseNode#contextUpdate
         * @private
         */
        Context$.prototype.setContextProperty = function (port, data, trigger) {
            if (port === ':start') {
                this._initStartPort();
            }
            if (this.portExists('input', port)) {
                this.$setContextProperty(port, data, trigger);
                this.event(events_1.NodeEvents.CONTEXT_UPDATE, {
                    data: data,
                    node: this,
                    port: port
                });
            }
            else {
                throw Error('No such input port: ' + port);
            }
        };
        return Context$;
    }(Base));
}
exports.$Context = $Context;
(function ($Context) {
    function create(Base) {
        return util_1.mixin($Context, common_1.$Event.create, common_1.$Identity.create, ports_1.$Ports.create)(Base);
    }
    $Context.create = create;
})($Context = exports.$Context || (exports.$Context = {}));

},{"../common":10,"../events":26,"../packet":93,"../util":122,"./ports":85,"debug":147,"object-forof":161}],72:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var forOf = require("object-forof");
var common_1 = require("../common");
var events_1 = require("../events");
var util_1 = require("../util");
var export_1 = require("./export");
var ports_1 = require("./ports");
var debug = _debug('chix:node:control');
function $Control(Base) {
    return /** @class */ (function (_super) {
        __extends(Control$, _super);
        function Control$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.active = false;
            _this.runCount = 0;
            _this.outputCount = 0;
            _this.state = {};
            _this.__halted = false;
            return _this;
        }
        Control$.prototype.start = function () {
            throw Error('Node needs to implement start() method');
        };
        /**
         *
         * Holds all input until release is called
         *
         * @public
         */
        Control$.prototype.hold = function () {
            this.setStatus('hold');
            this.__halted = true;
        };
        /**
         *
         * Releases the node if it was on hold
         *
         * @public
         */
        Control$.prototype.release = function () {
            this.setStatus('running');
            if (this.__halted) {
                this.__halted = false;
            }
        };
        Control$.prototype.isHalted = function () {
            return this.__halted;
        };
        /**
         *
         * Node completion
         *
         * Sends an empty string to the :complete port.
         * Each node automatically has one of those available.
         *
         * Emits the complete event and frees all input ports.
         *
         * @private
         */
        Control$.prototype.complete = function () {
            this.active = false;
            /**
             * Complete Event.
             *
             * The node has completed.
             *
             * TODO: a node can set itself as being active
             * active must be taken into account before calling
             * a node complete. As long as a node is active
             * it is not complete.
             *
             * @event Node#complete
             * @type {object}
             * @property {object} node - An export of this node
             */
            // this.setStatus('complete')
            this.event(events_1.NodeEvents.COMPLETE, {
                node: this.export()
            });
        };
        /**
         *
         * Live reset, connections, etc. stay alive.
         *
         */
        Control$.prototype.reset = function () {
            debug('%s: reset', this.identifier);
            // clear any input
            this.freeInput();
            // reset any internal state.
            this.state = {};
            this.runCount = 0;
            this.status = 'stopped';
            this.start();
        };
        Control$.prototype.freeInput = function () {
            forOf(function (_name, port) {
                port.reset();
            }, this.ports.input);
        };
        Control$.prototype.destroy = function () { };
        return Control$;
    }(Base));
}
exports.$Control = $Control;
(function ($Control) {
    function create(Base) {
        return util_1.mixin(common_1.$Event.create, export_1.$Export.create, common_1.$Identity.create, ports_1.$Ports.create, common_1.$Status.create)(Base);
    }
    $Control.create = create;
})($Control = exports.$Control || (exports.$Control = {}));

},{"../common":10,"../events":26,"../util":122,"./export":75,"./ports":85,"debug":147,"object-forof":161}],73:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
var callbackWrapper_1 = require("./callbackWrapper");
function $Delegate(Base) {
    return /** @class */ (function (_super) {
        __extends(Delegate$, _super);
        function Delegate$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Execute the delegated callback for this node.
         *
         * [fs, 'readFile', '/etc/passwd']
         *
         * will execute:
         *
         * fs['readFile']('/etc/passwd', this.callbackWrapper)
         *
         * @param {Object} output
         * @emits Node#branching
         */
        Delegate$.prototype._delegate = function (output) {
            var fn = output.splice(0, 1).pop();
            var method = output.splice(0, 1).pop();
            output.push(this._callbackWrapper.bind(this));
            fn[method].apply(fn, output);
        };
        return Delegate$;
    }(Base));
}
exports.$Delegate = $Delegate;
(function ($Delegate) {
    function create(Base) {
        return util_1.mixin($Delegate, callbackWrapper_1.$CallbackWrapper.create)(Base);
    }
    $Delegate.create = create;
})($Delegate = exports.$Delegate || (exports.$Delegate = {}));

},{"../util":122,"./callbackWrapper":70}],74:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var events_1 = require("../events");
var util_1 = require("../util");
function $Error(Base) {
    return /** @class */ (function (_super) {
        __extends(Error$, _super);
        function Error$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Could be used to externally set a node into error state
         *
         * BaseNode.error(node, Error('you are bad')
         *
         * @param {Error| string} error
         * @returns {Error}
         */
        Error$.prototype.error = function (error) {
            error = error instanceof Error ? error : Error(error);
            // Update our own status
            this.setStatus('error');
            // TODO: better to have full (custom) error objects
            var errorObject = {
                // node: node.export(),
                msg: error,
                node: this // do not export so soon.
            };
            this.event(events_1.NodeEvents.ERROR, errorObject);
            return error;
        };
        return Error$;
    }(Base));
}
exports.$Error = $Error;
(function ($Error) {
    function create(Base) {
        return util_1.mixin(common_1.$Event.create, common_1.$Status.create)(Base);
    }
    $Error.create = create;
})($Error = exports.$Error || (exports.$Error = {}));

},{"../common":10,"../events":26,"../util":122}],75:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var util_1 = require("../util");
var context_1 = require("./context");
var control_1 = require("./control");
var nodebox_1 = require("./nodebox");
var ports_1 = require("./ports");
var process_1 = require("./process");
var start_1 = require("./start");
function $Export(Base) {
    return /** @class */ (function (_super) {
        __extends(Export$, _super);
        function Export$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Do a lightweight export of this node.
         *
         * Used in emit's to give node information
         *
         *
         * @return {Object}
         * @public
         */
        Export$.prototype.export = function () {
            return {
                active: this.active,
                context: this.context,
                dependencies: this.dependencies,
                expose: this.expose,
                filled: this.filled,
                id: this.id,
                identifier: this.identifier,
                inPorts: this.inPorts,
                // input: this.filteredInput(),
                inputTimeout: this.inputTimeout,
                metadata: this.metadata,
                name: this.name,
                nodeTimeout: this.nodeTimeout,
                ns: this.ns,
                outPorts: this.outPorts,
                parentId: this.hasParent() ? this.getParent().id : null,
                pid: this.pid,
                ports: this.ports,
                provider: this.provider,
                runCount: this.runCount,
                state: this.state,
                status: this.status,
                title: this.title
            };
        };
        /**
         *
         * Filters the input for export.
         *
         * Leaving out everything defined as a function
         *
         * Note: depends on the stage of emit whether this value contains anything
         *
         * @return {Object} Filtered Input
         * @private
         */
        // TODO: Input now only exists within the ports, so fetch it from there.
        Export$.prototype.filteredInput = function () {
            /*
            const input: NodeInput = {}

            for (const port in this.input) {
              if (this.input.hasOwnProperty(port)) {

                if (this.portExists('input', port)) {
                  const type = (this.ports as any).input[port].type

                  if (type === 'string' ||
                    type === 'number' ||
                    type === 'enum' ||
                    type === 'boolean') {
                    input[port] = this.input[port]
                  } else {
                    // can't think of anything better right now
                    input[port] = Object.prototype.toString.call(this.input[port])
                  }
                } else {
                  // faulty but used during export so we want to know
                  input[port] = this.input[port]
                }
              }
            }

            return input
            */
        };
        return Export$;
    }(Base));
}
exports.$Export = $Export;
(function ($Export) {
    function create(Base) {
        return util_1.mixin(context_1.$Context.create, control_1.$Control.create, common_1.$Identity.create, common_1.$Meta.create, nodebox_1.$Nodebox.create, common_1.$Parent.create, ports_1.$Ports.create, process_1.$Process.create, common_1.$Status.create, start_1.$Start.create)(Base);
    }
    $Export.create = create;
})($Export = exports.$Export || (exports.$Export = {}));

},{"../common":10,"../util":122,"./context":71,"./control":72,"./nodebox":82,"./ports":85,"./process":86,"./start":90}],76:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var forOf = require("object-forof");
var common_1 = require("../common");
var events_1 = require("../events");
var packet_1 = require("../packet");
var port_1 = require("../port");
var util_1 = require("../util");
var control_1 = require("./control");
var nodebox_1 = require("./nodebox");
var ports_1 = require("./ports");
var start_1 = require("./start");
var debug = _debug('chix:node');
function $Fill(Base) {
    return /** @class */ (function (_super) {
        __extends(Fill$, _super);
        function Fill$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.notFilled = [];
            return _this;
        }
        // seems like NodeEvents.PORT_FILL is not listened to anymore.
        // Should probably be PortEvents.PORT_FILL now anyway.
        // Hold should put the packet back in the queue.
        Fill$.prototype.onPortFill = function () {
            var _this = this;
            debug('%s onPortFill', this.identifier);
            if (this.status === 'hold') {
                this.__halted = true;
                this.event(events_1.NodeEvents.PORT_FILL, this);
                return undefined;
            }
            if (this.status !== 'running') {
                throw Error('onPortFill: node must be in `running` state, current state: ' + this.status);
            }
            var inputPorts = this.ports.input;
            this.notFilled = [];
            var res = forOf(function (name, port) {
                if (port.isSync()) {
                    var ret = port.isFilled();
                    if (ret) {
                        debug('%s.%s: ready using `%s`', _this.identifier, name, port_1.Port.Message[ret]);
                        return true;
                    }
                    debug('%s.%s: not ready', _this.identifier, name);
                    _this.notFilled.push(name);
                    return undefined;
                }
                // async is always ready
                debug('%s.%s: ready using `%s`', _this.identifier, name, 'async always ready');
                return true;
            }, inputPorts).length;
            if (res === this.inPorts.length) {
                debug('%s:onPortFill running', this.identifier);
                this.setStatus('running');
                // need an emit here to indicate running
                // can also run shutdown then first.
                if (this.async) {
                    var atLeastOneAsyncFilled = forOf(function (_portName, port) { return ((port.isAsync() && port.isFilled()) || undefined); }, inputPorts).length;
                    if (atLeastOneAsyncFilled) {
                        this.event(events_1.NodeEvents.EXECUTE, {});
                        var input_1 = {};
                        forOf(function (name, port) {
                            if (port.isSync()) {
                                input_1[name] = port.read();
                            }
                            else if (port.isFilled()) {
                                input_1[name] = port.read();
                            }
                        }, inputPorts);
                        var packetContainer_1;
                        try {
                            packetContainer_1 = packet_1.PacketContainer.create(input_1);
                        }
                        catch (e) {
                            console.log('%s: INPUT TRIED TO MERGE', this.identifier, JSON.stringify(input_1, null, 2));
                            throw Error('stop');
                            /*
                            this.emit('error', {
                              node: this,
                              // todo: should be named 'error' and be an error everywhere
                              msg: e
                            })
                            this.event(NodeEvents.PORTFILL, this)
                            return false
                            */
                        }
                        forOf(function (name, port) {
                            // input[name] because already read() above (isFilled() === false)
                            if (!port.isSync() && input_1[name]) {
                                debug('%s.%s: execute %s', _this.identifier, name, port.fn.name);
                                port.run(packetContainer_1, _this.state); // this state?
                                _this.state = _this.nodebox.state = port.fn.state;
                            }
                        }, inputPorts);
                    }
                    else {
                        this.event(events_1.NodeEvents.PORT_FILL, this);
                        return false;
                    }
                }
                else {
                    this.event(events_1.NodeEvents.EXECUTE, {});
                    var input_2 = {};
                    forOf(function (portName, port) {
                        input_2[portName] = port.read();
                    }, inputPorts);
                    var params = void 0;
                    try {
                        params = packet_1.PacketContainer.create(input_2);
                    }
                    catch (e) {
                        this.emit('error', {
                            msg: e.toString(),
                            node: this
                            // todo: should be named 'error' and be an error everywhere
                        });
                        this.event(events_1.NodeEvents.PORT_FILL, this);
                        return false;
                    }
                    this.__start(params);
                }
                this.runCount++;
                this.event(events_1.NodeEvents.EXECUTED, {
                    node: this
                    // port: port
                });
                // Cleanup all these events
                this.complete();
                this.event(events_1.NodeEvents.PORT_FILL, this);
                return true;
            }
            else {
                debug('%s:onPortFill ports: %s not ready', this.identifier, this.notFilled);
                this.event(events_1.NodeEvents.PORT_FILL, this);
                return undefined;
            }
        };
        return Fill$;
    }(Base));
}
exports.$Fill = $Fill;
(function ($Fill) {
    function create(Base) {
        return util_1.mixin($Fill, control_1.$Control.create, common_1.$Event.create, nodebox_1.$Nodebox.create, common_1.$Identity.create, ports_1.$Ports.create, common_1.$Status.create, start_1.$Start.create)(Base);
    }
    $Fill.create = create;
})($Fill = exports.$Fill || (exports.$Fill = {}));

},{"../common":10,"../events":26,"../packet":93,"../port":104,"../util":122,"./control":72,"./nodebox":82,"./ports":85,"./start":90,"debug":147,"object-forof":161}],77:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./callbackWrapper"));
__export(require("./context"));
__export(require("./delegate"));
__export(require("./fill"));
__export(require("./init"));
__export(require("./mixin"));
__export(require("./node"));
__export(require("./nodebox"));
__export(require("./output"));
__export(require("./port"));
__export(require("./runOnce"));
__export(require("./shutdown"));
__export(require("./start"));
__export(require("./context"));
__export(require("./control"));
__export(require("./error"));
__export(require("./export"));
__export(require("./isStartable"));
__export(require("./mixin"));
__export(require("./ports"));
__export(require("./process"));
__export(require("./report"));
__export(require("./toJSON"));

},{"./callbackWrapper":70,"./context":71,"./control":72,"./delegate":73,"./error":74,"./export":75,"./fill":76,"./init":78,"./isStartable":79,"./mixin":80,"./node":81,"./nodebox":82,"./output":83,"./port":84,"./ports":85,"./process":86,"./report":87,"./runOnce":88,"./shutdown":89,"./start":90,"./toJSON":91}],78:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
var nodebox_1 = require("./nodebox");
function $Init(Base) {
    return /** @class */ (function (_super) {
        __extends(Init$, _super);
        function Init$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Init$.prototype.init = function () {
            this.setupNodeBox();
            this.createPorts(this.nodeDefinition.ports);
            this.setStatus('created');
            this.start();
        };
        return Init$;
    }(Base));
}
exports.$Init = $Init;
(function ($Init) {
    function create(Base) {
        return util_1.mixin($Init, nodebox_1.$Nodebox.create)(Base);
    }
    $Init.create = create;
})($Init = exports.$Init || (exports.$Init = {}));

},{"../util":122,"./nodebox":82}],79:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var forOf = require("object-forof");
var util_1 = require("../util");
var ports_1 = require("./ports");
function $IsStartable(Base) {
    return /** @class */ (function (_super) {
        __extends(IsStartable$, _super);
        function IsStartable$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IsStartable$.prototype.isStartable = function () {
            return forOf(function (_name, port) { return (port.isFilled() || undefined); }, this.ports.input).length === this.inPorts.length;
        };
        return IsStartable$;
    }(Base));
}
exports.$IsStartable = $IsStartable;
(function ($IsStartable) {
    function create(Base) {
        return util_1.mixin($IsStartable, ports_1.$Ports.create)(Base);
    }
    $IsStartable.create = create;
})($IsStartable = exports.$IsStartable || (exports.$IsStartable = {}));

},{"../util":122,"./ports":85,"object-forof":161}],80:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var util_1 = require("../util");
var callbackWrapper_1 = require("./callbackWrapper");
var context_1 = require("./context");
var control_1 = require("./control");
var delegate_1 = require("./delegate");
var error_1 = require("./error");
var export_1 = require("./export");
var fill_1 = require("./fill");
var init_1 = require("./init");
var isStartable_1 = require("./isStartable");
var nodebox_1 = require("./nodebox");
var output_1 = require("./output");
var port_1 = require("./port");
var ports_1 = require("./ports");
var process_1 = require("./process");
var report_1 = require("./report");
var runOnce_1 = require("./runOnce");
var shutdown_1 = require("./shutdown");
var start_1 = require("./start");
var toJSON_1 = require("./toJSON");
exports.NodeMixin = util_1.mixin(callbackWrapper_1.$CallbackWrapper, context_1.$Context, delegate_1.$Delegate, fill_1.$Fill, init_1.$Init, nodebox_1.$Nodebox, output_1.$Output, port_1.$Port, runOnce_1.$RunOnce, shutdown_1.$Shutdown, start_1.$Start, toJSON_1.$ToJSON, report_1.$Report, export_1.$Export, common_1.$Parent, isStartable_1.$IsStartable, control_1.$Control, process_1.$Process, error_1.$Error, ports_1.$Ports, common_1.$Event, common_1.$Status, common_1.$Meta, common_1.$Identity);

},{"../common":10,"../util":122,"./callbackWrapper":70,"./context":71,"./control":72,"./delegate":73,"./error":74,"./export":75,"./fill":76,"./init":78,"./isStartable":79,"./nodebox":82,"./output":83,"./port":84,"./ports":85,"./process":86,"./report":87,"./runOnce":88,"./shutdown":89,"./start":90,"./toJSON":91}],81:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseNode_1 = require("./BaseNode");
var mixin_1 = require("./mixin");
function NodeMix(Base) {
    return mixin_1.NodeMixin(Base);
}
exports.NodeMix = NodeMix;
// tslint:disable-next-line class-name
var xNode = /** @class */ (function (_super) {
    __extends(xNode, _super);
    // constructor (id: string, node: NodeDefinition, identifier?: string, _CHI?: any) {
    function xNode(id, node, _CHI) {
        var _this = _super.call(this, {
            id: id,
            node: __assign({ type: 'node' }, node)
        }) || this;
        _this.type = 'node';
        _this.status = 'init';
        _this.active = false;
        _this.init();
        return _this;
    }
    return xNode;
}(NodeMix(BaseNode_1.BaseNode)));
exports.xNode = xNode;

},{"./BaseNode":69,"./mixin":80}],82:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var node_1 = require("../sandbox/node");
var util_1 = require("../util");
var control_1 = require("./control");
var output_1 = require("./output");
var port_1 = require("./port");
function $Nodebox(Base) {
    return /** @class */ (function (_super) {
        __extends(Nodebox$, _super);
        function Nodebox$() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, __spread(args)) || this;
            /** delay interval */
            _this._delay = 0;
            _this.async = false;
            _this.interval = 100;
            _this.inputTimeout = 3000;
            _this.nodeTimeout = 3000;
            var node = util_1.getNodeArgument(args).node;
            if (node.expose) {
                _this.expose = node.expose;
            }
            if (node.dependencies) {
                _this.dependencies = node.dependencies;
            }
            if (node.nodeTimeout) {
                _this.nodeTimeout = node.nodeTimeout;
            }
            if (node.inputTimeout) {
                _this.inputTimeout = node.inputTimeout;
            }
            if (!_this.async) { // extended might have set it
                if (node.async) {
                    _this.async = node.async;
                }
            }
            // remember def for .compile()
            _this.nodeDefinition = node;
            return _this;
            // this.setupNodeBox(node)
        }
        // public setupNodeBox(node: NodeDefinition) {
        Nodebox$.prototype.setupNodeBox = function () {
            this.nodebox = new node_1.NodeBox(this.ns + "_" + this.name);
            this.nodebox.set('done', this.complete.bind(this));
            this.nodebox.set('cb', this._asyncOutput.bind(this));
            this.nodebox.set('state', this.state);
            if (this.dependencies && this.dependencies.npm) {
                this.nodebox.require(this.dependencies.npm);
            }
            if (this.expose) {
                this.nodebox.expose(this.expose);
            }
            this.nodebox.set('output', this.async ? this._asyncOutput.bind(this) : {});
            if (!this.nodeDefinition.ports) {
                throw Error('Node definition does not contain any ports.');
            }
            if (this.nodeDefinition.hasOwnProperty('fn')) { // Note: fn: '' is allowed.
                this.fn = this.nodeDefinition.fn;
            }
            if (this.nodeDefinition.ports.input) {
                if (this._isPreloaded(this.nodeDefinition.ports.input)) {
                    if (this.fn) {
                        // this.nodebox.fill(this.fn)
                        // not tested..
                        this.nodebox.fill(this.fn);
                    }
                    if (this.async) {
                        // how about nodebox.state?
                        // state is now in the definition itself..
                        // this should really also be a deep copy.
                        this.nodebox.state = this.nodeDefinition.state;
                        // this._loadAsync()
                        // this.createPorts(node.ports)
                    }
                }
                else {
                    // console.log(compile(node, true))
                    if (this.fn !== undefined) {
                        this.nodebox.compile(this.fn);
                    }
                    if (this.async) {
                        // This collects the port definitions they
                        // attach to `on`
                        this.nodebox.run();
                        // this._loadAsync()
                        // this.createPorts(node.ports)
                    }
                }
            }
            this.state = this.nodebox.state;
        };
        /**
         *
         * Test whether this is a preloaded node.
         *
         * @private
         */
        Nodebox$.prototype._isPreloaded = function (inputPorts) {
            if (typeof this.fn === 'function') {
                return true;
            }
            for (var port in inputPorts) {
                if (inputPorts.hasOwnProperty(port)) {
                    if (inputPorts[port].fn) {
                        return true;
                    }
                }
            }
            return false;
        };
        return Nodebox$;
    }(Base));
}
exports.$Nodebox = $Nodebox;
(function ($Nodebox) {
    function create(Base) {
        return util_1.mixin($Nodebox, common_1.$Identity.create, control_1.$Control.create, output_1.$Output.create, port_1.$Port.create)(Base);
    }
    $Nodebox.create = create;
})($Nodebox = exports.$Nodebox || (exports.$Nodebox = {}));

},{"../common":10,"../sandbox/node":111,"../util":122,"./control":72,"./output":83,"./port":84}],83:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var forOf = require("object-forof");
var util_1 = require("../util");
var delegate_1 = require("./delegate");
var ports_1 = require("./ports");
function $Output(Base) {
    return /** @class */ (function (_super) {
        __extends(Output$, _super);
        function Output$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * This node handles the output of the `blackbox`
         *
         * It is specific to the API of the internal Chix node function.
         *
         * out = { port1: data, port2: data }
         * out = [fs.readFile, arg1, arg2 ]
         *
         * Upon output the input will be freed.
         *
         * @param {Object} output
         * @private
         */
        Output$.prototype._asyncOutput = function (output) {
            var _this = this;
            // delegate and object output has
            // synchronous output on _all_ ports
            // however we do not know if we we're called from
            // the function type of output..
            forOf(function (port, packet) {
                _this.sendPortOutput(port, packet);
            }, output);
        };
        /**
         *
         * Output
         *
         * Directs the output to the correct handler.
         *
         * If output is a function it is handled by asyncOutput.
         *
         * If it's an array, it means it's the shorthand variant
         *
         * e.g. output = [fs, 'readFile']
         *
         * This will be handled by the delegate() method.
         *
         * Otherwise it is a normal output object containing the output for the ports.
         *
         * e.g. { out1: ...,  out2: ...,  error: ... } etc.
         *
         * TODO: not sure if this should always call complete.
         *
         * @param {Object} output
         * @private
         */
        Output$.prototype._output = function (output) {
            var _this = this;
            if (typeof output === 'function') {
                output.call(this, this._asyncOutput.bind(this));
            }
            else if (Array.isArray(output)) {
                this._delegate(output);
            }
            else {
                forOf(function (port, packet) {
                    _this.sendPortOutput(port, packet);
                }, output);
            }
        };
        return Output$;
    }(Base));
}
exports.$Output = $Output;
(function ($Output) {
    function create(Base) {
        return util_1.mixin($Output, delegate_1.$Delegate.create, ports_1.$Ports.create)(Base);
    }
    $Output.create = create;
})($Output = exports.$Output || (exports.$Output = {}));

},{"../util":122,"./delegate":73,"./ports":85,"object-forof":161}],84:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var common_1 = require("../common");
var port_1 = require("../sandbox/port");
var util_1 = require("../util");
var nodebox_1 = require("./nodebox");
var output_1 = require("./output");
var ports_1 = require("./ports");
var debug = _debug('chix:node');
function $Port(Base) {
    return /** @class */ (function (_super) {
        __extends(Port$, _super);
        function Port$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Executes the async variant
         *
         * state is the only variable which will persist.
         *
         * @param {string} fn - Portbox Function Body
         * @param {string} name - Portbox Function Name
         * @returns {PortBox}
         * @private
         */
        Port$.prototype._createPortBox = function (fn, name) {
            debug('%s: creating portbox `%s`', this.identifier, name);
            var portbox = new port_1.PortBox(name);
            portbox.set('state', this.nodebox.state);
            portbox.set('output', this._asyncOutput.bind(this));
            // also absorbs already required.
            if (this.dependencies && this.dependencies.npm) {
                portbox.require(this.dependencies.npm, true);
            }
            if (this.expose) {
                portbox.expose(this.expose); // , this.CHI)
            }
            if (typeof fn !== 'function') {
                fn = fn.slice(fn.indexOf('{') + 1, fn.lastIndexOf('}'));
                portbox.compile(fn);
            }
            else {
                portbox.fill(fn);
            }
            return portbox;
        };
        Port$.prototype.$portIsFilled = function (port) {
            var inputPorts = this.ports.input;
            if (inputPorts) {
                var inputPort = inputPorts[port];
                return inputPort.isFilled();
            }
            return false;
        };
        Port$.prototype.handlePortSettings = function (_port) {
            throw Error('Method not implemented...');
            /*
            if (this.ports.input.hasOwnProperty(port)) {
            }
            const inputPorts = this.ports.input

            if (inputPorts) {
              const inputPort = (inputPorts as any)[port]

              inputPort.....
            }
            */
        };
        // TODO: not sure if these are still used, probably should be checked on the ports themselves
        Port$.prototype.portIsOpen = function (_name) {
            return true;
        };
        Port$.prototype.inputPortAvailable = function (_target) {
            return true;
        };
        return Port$;
    }(Base));
}
exports.$Port = $Port;
(function ($Port) {
    function create(Base) {
        return util_1.mixin($Port, common_1.$Identity.create, nodebox_1.$Nodebox.create, ports_1.$Ports.create, output_1.$Output.create)(Base);
    }
    $Port.create = create;
})($Port = exports.$Port || (exports.$Port = {}));

},{"../common":10,"../sandbox/port":112,"../util":122,"./nodebox":82,"./output":83,"./ports":85,"debug":147}],85:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var forOf = require("object-forof");
var common_1 = require("../common");
var events_1 = require("../events");
var packet_1 = require("../packet");
var port_1 = require("../port");
var util_1 = require("../util");
var control_1 = require("./control");
var fill_1 = require("./fill");
var nodebox_1 = require("./nodebox");
var port_2 = require("./port");
var debug = _debug('chix:node');
exports.createPorts = util_1.mixin(nodebox_1.$Nodebox, control_1.$Control, common_1.$Event, fill_1.$Fill, common_1.$Identity, port_2.$Port);
function $Ports(Base) {
    return /** @class */ (function (_super) {
        __extends(Ports$, _super);
        function Ports$() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, __spread(args)) || this;
            _this.async = false;
            _this.ports = {};
            var node = util_1.getNodeArgument(args).node;
            if (!node.ports) {
                throw Error('NodeDefinition does not declare any ports');
            }
            return _this;
        }
        Object.defineProperty(Ports$.prototype, "openPorts", {
            get: function () {
                var ports = [];
                forOf(function (name, port) {
                    if (port.isOpen()) {
                        ports.push(name);
                    }
                }, this.ports.input);
                return ports;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Fills the port.
         *
         * Does the same as fillPort, however it also checks:
         *
         *   - port availability
         *   - port settings
         *
         * FIXME: fill & fillPort can just be merged probably.
         *
         * @param {Object} target
         * @public
         */
        Ports$.prototype.handleLinkSettings = function (target) {
            if (!target.port) {
                throw Error('Cannot determine target port.');
            }
            // FIX: hold is not handled anywhere as setting anymore
            if (target.has('hold')) {
                this.hold();
            }
            else if (target.has('persist')) {
                var index = target.get('index');
                var ports = this.ports.input;
                if (ports && ports[target.port]) {
                    var _port = ports[target.port];
                    // persist can be a boolean, or it becomes an array of indexes to persist.
                    if (index) {
                        if (!Array.isArray(_port.persist)) {
                            _port.persist = [];
                        }
                        _port.persist.push(index);
                    }
                    else {
                        _port.persist = true;
                    }
                }
                else {
                    throw Error("Could not find input port " + target.port);
                }
            }
        };
        Ports$.prototype.sendPortOutput = function (port, output) {
            if (port === 'error' && output.read(this) === null) {
                // do nothing
                return undefined;
            }
            if (/error/.test(port)) {
                if (!this.portExists('output', port)) {
                    // throw Error(output.read(output.owner))
                    this.emit('error', {
                        msg: output.read(output.owner),
                        node: this
                    });
                    return undefined;
                }
                var errorPort = this.getPort('output', port);
                if (!errorPort.hasConnections()) {
                    this.emit('error', {
                        msg: output.read(output.owner),
                        node: this
                    });
                    return undefined;
                }
            }
            if (!packet_1.Packet.isPacket(output)) {
                throw Error(this.identifier + ": Output for port '" + port + "' must be a Packet");
            }
            var outputPorts = this.ports.output;
            if (outputPorts &&
                outputPorts.hasOwnProperty(port)) {
                debug('%s:sendPortOutput port `%s`', this.identifier, port);
                this.event(events_1.NodeEvents.OUTPUT, {
                    node: this,
                    out: output,
                    port: port
                });
                var _port = outputPorts[port];
                _port.write(output);
                return undefined;
            }
            throw Error(this.identifier + ": no such output port " + port);
        };
        /**
         *
         * Wires a source port to one of our ports
         *
         * target is the target object of the connection.
         * which consist of a source and target object.
         *
         * So in this link the target is _our_ port.
         *
         * If a connection is made to the virtual `:start` port
         * it will be created automatically if it does not exist already.
         *
         * The port will be set to the open state and the connection
         * will be registered.
         *
         * A port can have multiple connections.
         *
         * TODO: the idea was to also keep track of
         *       what sources are connected.
         *
         * @private
         */
        Ports$.prototype._initStartPort = function () {
            // add it to known ports
            if (!this.portExists('input', ':start')) {
                debug('%s:%s initialized', this.identifier, ':start');
                this.addPort('input', ':start', {
                    name: ':start',
                    required: false,
                    type: 'any'
                });
            }
        };
        Ports$.prototype.addPort = function (type, port, portDefinition) {
            var _this = this;
            if (this.portExists(type, port)) {
                throw Error(this.identifier + ": Port " + port + " already exists");
            }
            // TODO: this generic, however options does not exists anymore, it's settings
            /*
            _setup () {
              for (const port in this.ports.input) {
                if (this.ports.input.hasOwnProperty(port)) {
                  if (this.ports.input[port].options) {
                    for (const opt in this.ports.input[port].options) {
                      if (this.ports.input[port].options.hasOwnProperty(opt)) {
                        this.setPortOption(
                          'input',
                          port,
                          opt,
                          this.ports.input[port].options[opt])
                      }
                    }
                  }
                }
              }
            }
            */
            var _portDefinition = __assign({}, portDefinition);
            // If there is a port function defined for this port it means it's async
            // ASYNC PORT SETUP
            if (this.nodebox && this.nodebox.on.input.hasOwnProperty(port)) {
                _portDefinition.fn = this._createPortBox(this.nodebox.on.input[port].toString(), ('__' + port + '__').toUpperCase());
                this.async = true;
                portDefinition.async = true;
            }
            else if (_portDefinition.fn) {
                // pre-compiled
                _portDefinition.fn = this._createPortBox(_portDefinition.fn, ('__' + port + '__').toUpperCase());
                this.async = true;
                _portDefinition.async = true;
            }
            // was Port.create()
            var _port = port_1.portFactory(type, __assign({}, _portDefinition, { name: port }));
            if (type === 'input' && _port.setState) {
                _port.setState(this.state);
            }
            if (portDefinition.options) {
                forOf(function (opt, val) {
                    _this.setPortOption('input', port, opt, val);
                }, portDefinition.options);
            }
            _port.setParent(this);
            _port.on(events_1.PortEvents.FILL, this.onPortFill.bind(this));
            this.ports[type][port] = _port;
            return _port;
        };
        Ports$.prototype.removePort = function (type, port) {
            if (this.portExists(type, port)) {
                var _port = this.getPort(type, port);
                // Add shutdown task?
                // io handler would also need to disconnect etc.
                _port.destroy();
                // this.clearContextProperty(port)
                this._deletePort(type, port);
                return true;
            }
            throw Error(this.identifier + ": Port '" + port + "' does not exist");
        };
        // TODO: name within the port object does not seem to be updated.
        Ports$.prototype.renamePort = function (type, from, to) {
            if (this.portExists(type, from)) {
                if (this.portExists(type, to)) {
                    throw Error("Refusing to rename " + type + " port " + from + " to " + to + ", port with that name already exists");
                }
                var port = this.ports[type];
                port[to] = port[from];
                this._deletePort(type, from);
                return true;
            }
            throw Error(this.identifier + ": Port '" + from + "' does not exist");
        };
        Ports$.prototype.getPort = function (type, name) {
            if (type === 'input' && name === ':start') {
                this._initStartPort();
            }
            if (this.portExists(type, name)) {
                var ports = this.ports[type];
                return ports[name];
            }
            else {
                throw new Error(this.identifier + ": Port '" + name + "' does not exist");
            }
        };
        Ports$.prototype.getInputPort = function (name) {
            return this.getPort('input', name);
        };
        Ports$.prototype.getOutputPort = function (name) {
            return this.getPort('output', name);
        };
        Ports$.prototype.getOutputPorts = function () {
            var _this = this;
            return this.outPorts.map(function (name) { return _this.getOutputPort(name); });
        };
        Ports$.prototype.getInputPorts = function () {
            var _this = this;
            return this.inPorts.map(function (name) { return _this.getInputPort(name); });
        };
        Ports$.prototype.getPortOption = function (type, name, opt) {
            return this.getPort(type, name).getOption(opt);
        };
        /*
        portExists (type, port) {
          return (this.ports[type] && this.ports[type].hasOwnProperty(port)) ||
          (type === 'output' && Ports.events.indexOf(port) >= 0)
        }
        */
        Ports$.prototype.portExists = function (type, port) {
            var ports = this.ports[type];
            return Boolean(ports && ports.hasOwnProperty(port));
        };
        // Array format is used to get nested property type
        Ports$.prototype.getPortType = function (kind, port) {
            var type;
            var ports = this.ports[kind];
            if (Array.isArray(port)) {
                var obj = ports;
                if (obj) {
                    for (var i = 0; i < port.length; i++) {
                        if (i === 0) {
                            if (obj[port[i]]) {
                                obj = obj[port[i]];
                            }
                        }
                        else {
                            if (obj.properties) {
                                obj = obj.properties[port[i]];
                            }
                            else {
                                throw Error(kind + " path " + port + " does not exists");
                            }
                        }
                    }
                    type = obj.type;
                }
                else {
                    throw Error("No " + kind + " ports found");
                }
            }
            else {
                if (this.portExists(kind, port)) {
                    type = ports[port].type;
                }
                else {
                    throw new Error(this.identifier + ": Port '" + port + "' does not exist");
                }
            }
            if (type) {
                return type;
            }
            throw Error(this.identifier + ": Unable to determine type for port " + port);
        };
        /**
         *
         * Sets an input port option.
         *
         * The node schema for instance can specify whether a port is persistent.
         *
         * At the moment a connection can override these values.
         * It's a way of saying I give you this once so take care of it.
         *
         * @param {string} type
         * @param {string} name
         * @param {string} opt
         * @param {any} value
         * @returns {undefined}
         */
        Ports$.prototype.setPortOption = function (type, name, opt, value) {
            this.getPort(type, name).setOption(opt, value);
        };
        Ports$.prototype.setPortOptions = function (type, options) {
            var _this = this;
            forOf(function (port, opt, _val) {
                return _this.setPortOption(type, port, opt, options[opt]);
            }, options);
        };
        /**
         *
         * Receive a ports definition and creates the Port instances
         *
         * @param {Object} ports
         * @param {Object} ports.input
         * @param {Object} ports.output
         */
        Ports$.prototype.createPorts = function (portsDefinition) {
            var _this = this;
            if (!portsDefinition.output) {
                portsDefinition.output = {};
            }
            if (!portsDefinition.input) {
                portsDefinition.input = {};
            }
            this.ports = { input: {}, output: {} };
            forOf(function (name, portDefinition) {
                return _this.addPort('input', name, portDefinition);
            }, portsDefinition.input);
            forOf(function (name, portDefinition) {
                return _this.addPort('output', name, portDefinition);
            }, portsDefinition.output);
            forOf(function (_name, event) {
                if (event.expose) {
                    var port = ":" + event.name;
                    _this.addPort('output', port, { name: port, type: 'any' });
                }
            }, events_1.NodeEvents);
        };
        Ports$.prototype._portsAvailable = function () {
            var inputPorts = this.ports.input;
            return forOf(function (_name, port) {
                if ((!port.hasOwnProperty('required') ||
                    port.required === true) && !port.hasOwnProperty('default')) {
                    return port + '*';
                }
                return port;
            }, inputPorts).join(', ');
        };
        // TODO: check if this is deprecated
        Ports$.prototype.closePort = function (_name) { };
        Ports$.prototype._deletePort = function (type, port) {
            var ports = this.ports[type];
            delete ports[port];
        };
        Object.defineProperty(Ports$.prototype, "inPorts", {
            /** @property {Array} inPorts */
            get: function () {
                var inputPorts = this.ports.input;
                return inputPorts ? Object.keys(inputPorts) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ports$.prototype, "outPorts", {
            /** @property {Array} outPorts */
            get: function () {
                var outputPorts = this.ports.output;
                return outputPorts ? Object.keys(outputPorts) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ports$.prototype, "filled", {
            get: function () {
                var inputPorts = this.ports.input;
                if (inputPorts) {
                    return forOf(function (_name, port) { return port.isFilled() || undefined; }, inputPorts)
                        .length;
                }
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        return Ports$;
    }(Base));
}
exports.$Ports = $Ports;
(function ($Ports) {
    function create(Base) {
        return util_1.mixin($Ports, nodebox_1.$Nodebox.create, control_1.$Control.create, common_1.$Event.create, fill_1.$Fill.create, common_1.$Identity.create, port_2.$Port.create)(Base);
    }
    $Ports.create = create;
})($Ports = exports.$Ports || (exports.$Ports = {}));

},{"../common":10,"../events":26,"../packet":93,"../port":104,"../util":122,"./control":72,"./fill":76,"./nodebox":82,"./port":84,"debug":147,"object-forof":161}],86:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function $Process(Base) {
    return /** @class */ (function (_super) {
        __extends(Process$, _super);
        function Process$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.pid = null;
            return _this;
        }
        Process$.prototype.getPid = function () {
            if (!this.pid) {
                throw Error('Failed to get pid');
            }
            return this.pid;
        };
        /**
         *
         * @param {type} pid
         * @public
         */
        Process$.prototype.setPid = function (pid) {
            this.pid = pid;
        };
        return Process$;
    }(Base));
}
exports.$Process = $Process;
(function ($Process) {
    function create(Base) {
        return util_1.mixin($Process)(Base);
    }
    $Process.create = create;
})($Process = exports.$Process || (exports.$Process = {}));

},{"../util":122}],87:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var util_1 = require("../util");
var context_1 = require("./context");
var control_1 = require("./control");
var export_1 = require("./export");
var ports_1 = require("./ports");
function $Report(Base) {
    return /** @class */ (function (_super) {
        __extends(Report$, _super);
        function Report$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @returns {Object}
         * @public
         */
        Report$.prototype.report = function () {
            return {
                context: this.context,
                filled: this.filled,
                id: this.id,
                identifier: this.identifier,
                // input: this.filteredInput(),
                outputCount: this.outputCount,
                ports: this.ports,
                runCount: this.runCount,
                state: this.state,
                status: this.status,
                title: this.title,
            };
        };
        return Report$;
    }(Base));
}
exports.$Report = $Report;
(function ($Report) {
    function create(Base) {
        return util_1.mixin($Report, context_1.$Context.create, control_1.$Control.create, export_1.$Export.create, common_1.$Identity.create, common_1.$Meta.create, ports_1.$Ports.create, common_1.$Status.create)(Base);
    }
    $Report.create = create;
})($Report = exports.$Report || (exports.$Report = {}));

},{"../common":10,"../util":122,"./context":71,"./control":72,"./export":75,"./ports":85}],88:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var common_1 = require("../common");
var events_1 = require("../events");
var util_1 = require("../util");
var export_1 = require("./export");
var nodebox_1 = require("./nodebox");
var output_1 = require("./output");
var ports_1 = require("./ports");
var debug = _debug('chix:node');
function $RunOnce(Base) {
    return /** @class */ (function (_super) {
        __extends(RunOnce$, _super);
        function RunOnce$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.active = false;
            return _this;
        }
        /**
         *
         * Runs the node
         *
         * @emits Node#nodeTimeout
         * @emits Node#start
         * @emits Node#executed
         * @private
         */
        RunOnce$.prototype._runOnce = function () {
            var _this = this;
            var t = setTimeout(function () {
                debug('%s: node timeout', _this.identifier);
                /**
                 * Timeout Event.
                 *
                 * @event Node#nodeTimeout
                 * @type {object}
                 * @property {object} node - An export of this node
                 */
                _this.event(events_1.NodeEvents.TIMEOUT, {
                    node: _this.export()
                });
            }, this.nodeTimeout);
            /**
             * Start Event.
             *
             * @event Node#start
             * @type {object}
             * @property {object} node - An export of this node
             */
            this.event(events_1.NodeEvents.START, {
                node: this.export()
            });
            // this.nodebox.runInNewContext(this.sandbox)
            // this.setStatus('running')
            this.nodebox.run();
            this.state = this.nodebox.state;
            debug('%s:%s executed', this.identifier, this.nodebox.fn.name);
            clearTimeout(t);
            this.active = false;
            this._output(this.nodebox.output);
        };
        return RunOnce$;
    }(Base));
}
exports.$RunOnce = $RunOnce;
(function ($RunOnce) {
    function create(Base) {
        return util_1.mixin($RunOnce, common_1.$Event.create, export_1.$Export.create, common_1.$Identity.create, nodebox_1.$Nodebox.create, output_1.$Output.create, ports_1.$Ports.create)(Base);
    }
    $RunOnce.create = create;
})($RunOnce = exports.$RunOnce || (exports.$RunOnce = {}));

},{"../common":10,"../events":26,"../util":122,"./export":75,"./nodebox":82,"./output":83,"./ports":85,"debug":147}],89:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var node_1 = require("../events/node");
var util_1 = require("../util");
var nodebox_1 = require("./nodebox");
var ports_1 = require("./ports");
function $Shutdown(Base) {
    return /** @class */ (function (_super) {
        __extends(Shutdown$, _super);
        function Shutdown$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Runs the shutdown method of the blackbox
         *
         * An asynchronous node can define a shutdown function:
         *
         *   on.shutdown = function() {
         *
         *     // do shutdown stuff
         *
         *   }
         *
         * When a network shuts down, this function will be called.
         * To make sure all nodes shutdown gracefully.
         *
         * e.g. A node starting a http server can use this
         *      method to shutdown the server.
         *
         * @returns {undefined}
         * @public
         */
        Shutdown$.prototype.shutdown = function () {
            if (this.nodebox.on && this.nodebox.on.shutdown) {
                // TODO: nodes now do nothing with the callback, they should..
                // otherwise we will hang
                this.nodebox.on.shutdown();
                // TODO: send the nodebox, or just the node export?
                this.event(node_1.NodeEvents.SHUTDOWN, this.nodebox);
            }
        };
        Shutdown$.prototype.hasShutdown = function () {
            // shutdown is not picked up.
            // console.log(this.nodebox.fn.toString())
            return this.nodebox.on && this.nodebox.on.shutdown;
        };
        return Shutdown$;
    }(Base));
}
exports.$Shutdown = $Shutdown;
(function ($Shutdown) {
    function create(Base) {
        return util_1.mixin($Shutdown, common_1.$Event.create, nodebox_1.$Nodebox.create, ports_1.$Ports.create)(Base);
    }
    $Shutdown.create = create;
})($Shutdown = exports.$Shutdown || (exports.$Shutdown = {}));

},{"../common":10,"../events/node":29,"../util":122,"./nodebox":82,"./ports":85}],90:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var common_1 = require("../common");
var events_1 = require("../events");
var util_1 = require("../util");
var control_1 = require("./control");
var export_1 = require("./export");
var nodebox_1 = require("./nodebox");
var port_1 = require("./port");
var ports_1 = require("./ports");
var runOnce_1 = require("./runOnce");
var shutdown_1 = require("./shutdown");
var debug = _debug('chix:actor');
// THIS STUFF IS INCORRECT.
// is more of a load method then a run each and every time thing
// actually why not just use the compile() to make it compiled.
function $Start(Base) {
    return /** @class */ (function (_super) {
        __extends(Start$, _super);
        function Start$() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.active = false;
            return _this;
        }
        Start$.prototype.start = function () {
            if (['created', 'stopped'].indexOf(this.status) >= 0) {
                this.setStatus('started');
                debug('%s: running on start', this.identifier);
                if (this.nodebox.on.start) {
                    // Run onStart functionality first
                    var name_1 = this.ns + "_" + this.name;
                    if (!this._onStart) {
                        var onStart = this.nodebox.on.start === 'function' ? this.nodebox.on.start : this.nodebox.on.start.toString();
                        this._onStart = this._createPortBox(onStart, name_1);
                        this._onStart.run(this);
                        this.nodebox.state = this.state = this._onStart.state;
                    }
                    else {
                        this._onStart.run(this);
                    }
                }
                this.event(events_1.NodeEvents.STARTED, {
                    node: this.export()
                });
                this.setStatus('running');
            }
            else {
                throw Error('Only can start node which is in the `created` or `stopped` state, current status: ' + this.status);
            }
        };
        Start$.prototype.__start = function (params) {
            var _this = this;
            if (this.active) {
                debug('%s: node still active delaying', this.identifier);
                this._delay = this._delay + this.interval;
                setTimeout(function () {
                    _this.__start(params);
                }, 500 + this._delay);
            }
            else {
                // set active state.
                this.active = true;
                // document, is for servers etc, next run must shut the old one down
                if (!this.async) {
                    if (this.nodebox.on) {
                        if (this.nodebox.on.shutdown) {
                            debug('%s: running shutdown', this.identifier);
                            this.shutdown();
                        }
                    }
                }
                this.nodebox.set('$', params);
                // done before compile.
                // this.nodebox.output = this.async ? this._asyncOutput.bind(this) : {}
                this._runOnce();
            }
        };
        return Start$;
    }(Base));
}
exports.$Start = $Start;
(function ($Start) {
    function create(Base) {
        return util_1.mixin($Start, control_1.$Control.create, common_1.$Identity.create, common_1.$Event.create, export_1.$Export.create, runOnce_1.$RunOnce.create, nodebox_1.$Nodebox.create, port_1.$Port.create, ports_1.$Ports.create, common_1.$Status.create, shutdown_1.$Shutdown.create)(Base);
    }
    $Start.create = create;
})($Start = exports.$Start || (exports.$Start = {}));

},{"../common":10,"../events":26,"../util":122,"./control":72,"./export":75,"./nodebox":82,"./port":84,"./ports":85,"./runOnce":88,"./shutdown":89,"debug":147}],91:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var util_1 = require("../util");
function $ToJSON(Base) {
    return /** @class */ (function (_super) {
        __extends(ToJSON$, _super);
        function ToJSON$() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * Returns the node representation to be stored along
         * with the graph.
         *
         * This is not the full definition of the node itself.
         *
         * The full definition can be found using the ns/name pair
         * along with the provider property.
         *
         */
        ToJSON$.prototype.toJSON = function () {
            var _this = this;
            var json = {
                id: this.id,
                name: this.name,
                ns: this.ns,
            };
            ['title', 'description', 'metadata', 'provider'].forEach(function (prop) {
                var value = _this[prop];
                if (value) {
                    if (typeof value !== 'object' ||
                        Object.keys(value).length > 0) {
                        json[prop] = value;
                    }
                }
            });
            return json;
        };
        return ToJSON$;
    }(Base));
}
exports.$ToJSON = $ToJSON;
(function ($ToJSON) {
    function create(Base) {
        return util_1.mixin($ToJSON, common_1.$Identity.create, common_1.$Meta.create)(Base);
    }
    $ToJSON.create = create;
})($ToJSON = exports.$ToJSON || (exports.$ToJSON = {}));

},{"../common":10,"../util":122}],92:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// temp to debug copy problem
var ContainerPacket = /** @class */ (function () {
    function ContainerPacket(data) {
        this['.'] = data;
    }
    return ContainerPacket;
}());
exports.ContainerPacket = ContainerPacket;

},{}],93:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./packet"));
__export(require("./packetContainer"));

},{"./packet":94,"./packetContainer":95}],94:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: only has to be a pointer packet if it's actually used.
var _debug = require("debug");
var json_ptr_1 = require("json-ptr");
var forOf = require("object-forof");
var ContainerPacket_1 = require("./ContainerPacket");
var debug = _debug('chix:packet');
/**
 *
 * A Packet wraps the data.
 *
 * The packet is always owned by one owner at a time.
 *
 * In order to read or write a packet, the owner must identify
 * itself first, by sending itself als a reference as first argument
 * to any of the methods.
 *
 * const p = new Packet(data)
 *
 * Packet containing it's own map of source & target.
 * Could be possible, only what will happen on split.
 *
 */
var nr = 10000000000;
var Packet = /** @class */ (function () {
    function Packet(data, type, n, c, pp) {
        this.trail = [];
        this.typeTrail = [];
        this.pointerPath = '/.';
        this._meta = {};
        this.c = 0;
        this.updated_at = null;
        // TODO: hacked in used by chix-chi
        this.chi = {};
        if (pp) {
            this.pointerPath = pp;
        }
        this.type = type || typeof data;
        // string must be assigned to? or {".": "string"}
        // which means base is /. instead of ''
        this.__data = data instanceof ContainerPacket_1.ContainerPacket ? data : new ContainerPacket_1.ContainerPacket(data);
        this.nr = n || nr++;
        // clone version
        if (c) {
            this.c = c;
        }
        this.pointer = json_ptr_1.JsonPointer.create(this.pointerPath);
        Object.defineProperty(this, 'data', {
            get: function () {
                throw Error('data property should not be accessed');
            },
            set: function () {
                throw Error('data property should not be written to');
            }
        });
        this.created_at = new Date();
    }
    Packet.create = function (data, type, n, c, pp) {
        return new Packet(data, type, n, c, pp);
    };
    Packet.metaMerge = function (target, source) {
        forOf(function (ns, name, val) {
            if (!target.hasOwnProperty(ns)) {
                target[ns] = {};
            }
            if (!target[ns].hasOwnProperty(name) || target[ns][name] === val) {
                target[ns][name] = val;
            }
            else {
                console.log('tgt:', target, 'src:', source);
                console.log('oldValue: %s, newValue: %s', target[ns][name], val);
                throw Error("Refusing to overwrite meta property " + ns + ":" + name);
            }
        }, source);
    };
    // guard for two versions of Packet
    // instanceof would normally be sufficient
    Packet.isPacket = function (packet) {
        return packet && typeof packet === 'object' && (packet instanceof Packet ||
            packet.constructor.name === 'Packet');
    };
    /**
     *
     * Pointer is a JSON Pointer.
     *
     * If the pointer does not start with a slash
     * the pointer will be (forward) relative to the current position
     * If the pointer is empty the pointer will be to the root.
     *
     * @param {Object} owner
     * @param {String} pointer JSON Pointer
     */
    Packet.prototype.point = function (owner, pointer) {
        if (this.isOwner(owner)) {
            if (pointer === undefined || pointer === '') {
                this.pointerPath = '/.';
            }
            else if (pointer[0] === '/') {
                this.pointerPath = '/.' + pointer;
            }
            else {
                this.pointerPath = this.pointer.pointer + '/' + pointer;
            }
            this.pointer = json_ptr_1.JsonPointer.create(this.pointerPath);
        }
        return this;
    };
    Packet.prototype.read = function (owner) {
        if (!this.hasOwner() || this.isOwner(owner)) {
            return this.pointer.get(this.__data);
        }
        throw Error('Not allowed to read packet');
    };
    Packet.prototype.write = function (owner, data, type) {
        if (this.isOwner(owner)) {
            this.updated_at = new Date();
            this.pointer.set(this.__data, data);
            if (type) {
                this.type = type;
            }
            return this;
        }
        throw Error('Not allowed to write packet');
    };
    /**
     * Clone the current packet
     *
     * In case of non plain objects it's mostly desired
     * not to clone the data itself, however do create a *new*
     * packet with the other cloned information.
     *
     * To enable this set cloneData to true.
     *
     * @param {Object} owner Owner of the packet
     */
    Packet.prototype.clone = function (owner) {
        if (this.isOwner(owner)) {
            var packet = new Packet(null, undefined, this.nr, this.c + 1, this.pointerPath);
            packet.setOwner(owner);
            if (!this.type) {
                throw Error('Refusing to clone substance of unknown type');
            }
            // TODO: make sure String Object are always lowercase.
            // I think they are..
            if (this.type === 'function' || /[A-Z]/.test(this.type)) {
                // do not clone, ownership will throw if things go wrong
                packet.__data = this.__data;
            }
            else {
                try {
                    packet.__data = JSON.parse(JSON.stringify(this.__data));
                }
                catch (e) {
                    console.log('ERROR', this.__data, e);
                    throw e;
                }
            }
            packet.type = this.type;
            packet._meta = JSON.parse(JSON.stringify(this._meta));
            return packet;
        }
        throw Error('Packet is not owned by this owner, refusing to clone.');
    };
    Packet.prototype.setType = function (owner, type) {
        if (this.isOwner(owner)) {
            this.typeTrail.push(this.type);
            this.type = type;
            return this;
        }
        // throw in isOwner is disabled for now.
        return this;
    };
    Packet.prototype.release = function (owner) {
        if (this.isOwner(owner)) {
            this.trail.push({
                id: owner.id,
                pid: owner.pid
            });
            this.owner = undefined;
            return this;
        }
        // throw in isOwner is disabled for now.
        return this;
    };
    Packet.prototype.setOwner = function (newOwner) {
        if (this.owner === undefined) {
            this.owner = newOwner;
            return this;
        }
        if (newOwner === this.owner) {
            debug('Warning: Packet already owned by this owner');
            return this;
        }
        throw Error('Refusing to overwrite owner');
    };
    Packet.prototype.hasOwner = function () {
        return this.owner !== undefined;
    };
    Packet.prototype.isOwner = function (owner) {
        if (owner === this.owner) {
            return true;
        }
        if (!owner) {
            throw Error('Packet.isOwner expects an owner object as parameter');
        }
        else if (this.owner === undefined) {
            debug('Warning: Packet is unclaimed, claim it first');
            this.setOwner(owner);
            return true;
        }
        debug('Warning: Packet is not owned by this instance. REQUESTOR: %s:%s OWNER: %s:%s', owner.constructor.name, owner.name || owner, this.owner.constructor.name, this.owner.name || this.owner);
        this.release(this.owner);
        this.setOwner(owner);
        return true;
    };
    Packet.prototype.dump = function () {
        return JSON.stringify(this, null, 2);
    };
    // Are these used?
    Packet.prototype.set = function (prop, value) {
        this[prop] = value;
        return this;
    };
    Packet.prototype.get = function (prop) {
        return this[prop];
    };
    Packet.prototype.del = function (prop) {
        delete this[prop];
        return this;
    };
    Packet.prototype.has = function (prop) {
        return this.hasOwnProperty(prop);
    };
    Packet.prototype.meta = function (ns, key, val) {
        if (val !== undefined) {
            if (!this._meta[ns]) {
                this._meta[ns] = {};
            }
            this._meta[ns][key] = val;
            return this;
        }
        if (!this._meta.hasOwnProperty(ns)) {
            throw Error("No such key " + ns);
        }
        if (key) {
            if (!this._meta[ns].hasOwnProperty(key)) {
                throw Error("No such key [" + ns + "][" + key + "]");
            }
            return this._meta[ns][key];
        }
        return this._meta[ns];
    };
    Packet.prototype.hasMeta = function (ns, key) {
        if (!this._meta.hasOwnProperty(ns)) {
            return false;
        }
        return this._meta[ns].hasOwnProperty(key);
    };
    Packet.prototype.removeMeta = function (ns, key) {
        if (this._meta.hasOwnProperty(ns)) {
            if (key) {
                if (this._meta[ns].hasOwnProperty(key)) {
                    delete this._meta[ns][key];
                }
            }
            else {
                delete this._meta[ns];
            }
        }
    };
    Packet.prototype.export = function () {
        return {
            c: this.c,
            data: this.pointer.get(this.__data),
            meta: this._meta,
            nr: this.nr,
            owner: this.owner ? this.owner.id : null,
            pointerPath: this.pointerPath,
            trail: this.trail,
            type: this.type,
            typeTrail: this.typeTrail
        };
    };
    return Packet;
}());
exports.Packet = Packet;

},{"./ContainerPacket":92,"debug":147,"json-ptr":156,"object-forof":161}],95:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var forOf = require("object-forof");
var packet_1 = require("./packet");
/**
 * Packet container to be used within components.
 *
 * API:
 *
 * const x = new PacketContainer(input)
 * x.in1
 * x.in1 = 'my-value'
 */
var reserved = ['isPacket', 'get', 'read', 'write', 'create', 'clone'];
var PacketContainer = /** @class */ (function () {
    function PacketContainer(params) {
        if (params === void 0) { params = {}; }
        var _this = this;
        this._meta = {};
        this.params = params;
        forOf(function (name, packet) {
            if (!packet_1.Packet.isPacket(packet)) {
                throw Error("Packet expected got " + typeof packet + " for param " + name);
            }
            // merge meta
            if (reserved.indexOf(name) === -1) {
                Object.defineProperty(_this, name, {
                    enumerable: true,
                    get: function () {
                        return packet.read(packet.owner);
                    },
                    set: function (val) {
                        packet.write(packet.owner, val);
                    }
                });
                // meta
                packet_1.Packet.metaMerge(_this._meta, packet._meta);
            }
            else {
                throw Error("Parameter name '" + name + "' not allowed");
            }
        }, this.params);
        // merge meta for all packets
        forOf(function (_name, p) {
            Object.assign(p._meta, _this._meta);
        }, this.params);
    }
    PacketContainer.create = function (params) {
        return new PacketContainer(params);
    };
    /**
     * Determines whether the value is a Packet
     *
     * @param {Packet} packet - Value to test
     * @returns {*}
     */
    PacketContainer.prototype.isPacket = function (packet) {
        return packet_1.Packet.isPacket(packet);
    };
    /**
     *
     * @param {String} name - Param name
     * @returns {*}
     */
    PacketContainer.prototype.get = function (name) {
        return this.params[name];
    };
    PacketContainer.prototype.clone = function (name, value) {
        this.hasParamOrThrow(name);
        var packet = this.params[name];
        var packetClone = packet.clone(packet.owner);
        if (packet === packetClone) {
            throw Error('Failed to clone packet.');
        }
        if (value) {
            packetClone.write(packet.owner, value);
        }
        return packetClone;
    };
    PacketContainer.prototype.read = function (name) {
        this.hasParamOrThrow(name);
        var packet = this.params[name];
        return packet.read(packet.owner);
    };
    PacketContainer.prototype.write = function (name, val) {
        this.hasParamOrThrow(name);
        var packet = this.params[name];
        return packet.write(packet.owner, val);
    };
    PacketContainer.prototype.hasParam = function (name) {
        return !!this.params[name];
    };
    PacketContainer.prototype.hasParamOrThrow = function (name) {
        if (this.hasParam(name)) {
            return true;
        }
        throw Error(name + " does not exist.");
    };
    PacketContainer.prototype.create = function (value, type) {
        var p = packet_1.Packet.create(value, type);
        Object.assign(p._meta, this._meta);
        return p;
    };
    return PacketContainer;
}());
exports.PacketContainer = PacketContainer;

},{"./packet":94,"object-forof":161}],96:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var input_1 = require("./input");
var runPortBox_1 = require("./runPortBox");
var AsyncInputPort = /** @class */ (function (_super) {
    __extends(AsyncInputPort, _super);
    function AsyncInputPort(portDefinition) {
        var _this = _super.call(this, portDefinition) || this;
        if (portDefinition.hasOwnProperty('default')) {
            _this.setDefault(portDefinition.default);
        }
        if (portDefinition.context) {
            _this.setContext(portDefinition.context);
        }
        if (!portDefinition.fn) {
            throw Error('AsyncInputPort requires a function');
        }
        _this.reset();
        return _this;
    }
    AsyncInputPort.prototype.isSync = function () {
        return false;
    };
    AsyncInputPort.prototype.isAsync = function () {
        return true;
    };
    AsyncInputPort.prototype.setState = function (state) {
        this.state = state;
    };
    /**
     *
     * @param {Packets[]} params Array of param/input Packets
     * @param {Object} state Object
     */
    AsyncInputPort.prototype.run = function (params, state) {
        this.setState(state);
        runPortBox_1.runPortBox.call(this, params);
    };
    return AsyncInputPort;
}(input_1.InputPort));
exports.AsyncInputPort = AsyncInputPort;

},{"./input":105,"./runPortBox":108}],97:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./input"));
__export(require("./output"));
__export(require("./start"));

},{"./input":98,"./output":99,"./start":100}],98:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var input_1 = require("../input");
var util_1 = require("./util");
var ExternalInputPort = /** @class */ (function (_super) {
    __extends(ExternalInputPort, _super);
    function ExternalInputPort(externalPort, internalPort) {
        var _this = _super.call(this, util_1.externalToInternalFilter(externalPort, internalPort)) || this;
        _this.nodeId = externalPort.nodeId;
        _this.name = externalPort.name;
        _this._port = internalPort;
        if (externalPort) {
            if (externalPort.hasOwnProperty('default')) {
                _this.setDefault(externalPort.default);
            }
            if (externalPort.context) {
                _this.setContext(externalPort.context);
            }
        }
        return _this;
    }
    ExternalInputPort.prototype.isSync = function () {
        return this._port.isSync();
    };
    ExternalInputPort.prototype.receive = function (packet, index) {
        this._port.receive(packet, index);
        return this;
        // throw Error('Receive is bypassed')
    };
    ExternalInputPort.prototype.fill = function (_packet) {
        console.error('Fill is bypassed for external input port');
        return this;
    };
    ExternalInputPort.prototype.isFilled = function () {
        return this._port.isFilled();
    };
    ExternalInputPort.prototype.isRequired = function () {
        return this._port.isRequired();
    };
    ExternalInputPort.prototype.read = function () {
        return this._port.read();
    };
    ExternalInputPort.prototype.connect = function (link) {
        this._port.connect(link);
        return this;
    };
    ExternalInputPort.prototype.plug = function (target) {
        this._port.plug(target);
        return this;
    };
    ExternalInputPort.prototype.disconnect = function (link) {
        this._port.disconnect(link);
    };
    ExternalInputPort.prototype.unplug = function (target) {
        this._port.unplug(target);
    };
    ExternalInputPort.prototype.clearInput = function () {
        if (this._port) {
            this._port.clearInput();
        }
        return this;
    };
    ExternalInputPort.prototype.setDefault = function (value) {
        if (this._port) {
            this._port.setDefault(value);
        }
        return this;
    };
    ExternalInputPort.prototype.hasDefault = function () {
        return this._port.hasDefault();
    };
    ExternalInputPort.prototype.clearDefault = function () {
        this._port.clearDefault();
        return this;
    };
    ExternalInputPort.prototype.setContext = function (value) {
        if (this._port) {
            this._port.setContext(value);
        }
        return this;
    };
    ExternalInputPort.prototype.hasContext = function () {
        return this._port.hasContext();
    };
    ExternalInputPort.prototype.clearContext = function () {
        this._port.clearContext();
        return this;
    };
    ExternalInputPort.prototype.setPersist = function (value) {
        this._port.setPersist(value);
        return this;
    };
    ExternalInputPort.prototype.hasPersist = function () {
        return this._port.hasPersist();
    };
    ExternalInputPort.prototype.clearPersist = function () {
        this._port.clearPersist();
        return this;
    };
    ExternalInputPort.prototype.destroy = function () {
        this._port.destroy();
    };
    return ExternalInputPort;
}(input_1.InputPort));
exports.ExternalInputPort = ExternalInputPort;

},{"../input":105,"./util":102}],99:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("../../events");
var output_1 = require("../output");
var util_1 = require("./util");
var ExternalOutputPort = /** @class */ (function (_super) {
    __extends(ExternalOutputPort, _super);
    function ExternalOutputPort(externalPort, internalPort) {
        var _this = _super.call(this, util_1.externalToInternalFilter(externalPort, internalPort)) || this;
        _this.nodeId = externalPort.nodeId;
        _this.name = externalPort.name;
        _this._port = internalPort;
        internalPort.on(events_1.PortEvents.DATA, function (packet) { return _this.write(packet); });
        return _this;
    }
    return ExternalOutputPort;
}(output_1.OutputPort));
exports.ExternalOutputPort = ExternalOutputPort;

},{"../../events":26,"../output":106,"./util":102}],100:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var input_1 = require("../input");
var ExternalStartPort = /** @class */ (function (_super) {
    __extends(ExternalStartPort, _super);
    function ExternalStartPort(externalPort, actor) {
        var _this = _super.call(this, {
            name: externalPort.name,
            type: ':start',
        }) || this;
        _this.nodeId = externalPort.nodeId;
        _this.name = externalPort.name;
        _this.actor = actor;
        return _this;
    }
    ExternalStartPort.prototype.isSync = function () {
        return true;
    };
    ExternalStartPort.prototype.receive = function (_packet, _index) {
        this.actor.push();
        return this;
    };
    ExternalStartPort.prototype.fill = function (_packet) {
        console.error('Fill is bypassed');
        return this;
    };
    ExternalStartPort.prototype.isFilled = function () {
        return _super.prototype.isFilled.call(this);
    };
    ExternalStartPort.prototype.isRequired = function () {
        return false;
    };
    ExternalStartPort.prototype.read = function () {
        return _super.prototype.read.call(this);
    };
    ExternalStartPort.prototype.connect = function (link) {
        return _super.prototype.connect.call(this, link);
    };
    ExternalStartPort.prototype.plug = function (target) {
        return _super.prototype.plug.call(this, target);
    };
    ExternalStartPort.prototype.disconnect = function (link) {
        return _super.prototype.disconnect.call(this, link);
    };
    ExternalStartPort.prototype.unplug = function (target) {
        return _super.prototype.unplug.call(this, target);
    };
    ExternalStartPort.prototype.clearInput = function () {
        return _super.prototype.clearInput.call(this);
    };
    ExternalStartPort.prototype.setDefault = function (_value) {
        console.error('Default not supported');
        return this;
    };
    ExternalStartPort.prototype.hasDefault = function () {
        console.error('Default not supported');
        return false;
    };
    ExternalStartPort.prototype.clearDefault = function () {
        console.error('Default not supported');
        return this;
    };
    ExternalStartPort.prototype.setContext = function (_value) {
        console.error('Context not supported');
        return this;
    };
    ExternalStartPort.prototype.hasContext = function () {
        console.error('Context not supported');
        return false;
    };
    ExternalStartPort.prototype.clearContext = function () {
        console.error('Context not supported');
        return this;
    };
    ExternalStartPort.prototype.setPersist = function (_value) {
        console.error('Persist not supported');
        return this;
    };
    ExternalStartPort.prototype.hasPersist = function () {
        console.error('Persist not supported');
        return false;
    };
    ExternalStartPort.prototype.clearPersist = function () {
        console.error('Persist not supported');
        return this;
    };
    ExternalStartPort.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    return ExternalStartPort;
}(input_1.InputPort));
exports.ExternalStartPort = ExternalStartPort;

},{"../input":105}],101:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
function externalToInternalFilter(externalPort, internalPort) {
    return __assign({ type: internalPort.type }, _.omit(externalPort, ['nodeId']));
}
exports.externalToInternalFilter = externalToInternalFilter;

},{"lodash":157}],102:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./externalToInternalFilter"));

},{"./externalToInternalFilter":101}],103:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var asyncInput_1 = require("./asyncInput");
var input_1 = require("./input");
var output_1 = require("./output");
function portFactory(type, portDefinition) {
    // TODO: async can actually be an object port.
    if (type === 'input') {
        if (portDefinition.fn) {
            return new asyncInput_1.AsyncInputPort(portDefinition);
        }
        return new input_1.InputPort(portDefinition);
    }
    return new output_1.OutputPort(portDefinition);
}
exports.portFactory = portFactory;

},{"./asyncInput":96,"./input":105,"./output":106}],104:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./external"));
__export(require("./asyncInput"));
__export(require("./factory"));
__export(require("./input"));
__export(require("./output"));
__export(require("./port"));
__export(require("./runPortBox"));

},{"./asyncInput":96,"./external":97,"./factory":103,"./input":105,"./output":106,"./port":107,"./runPortBox":108}],105:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var events_1 = require("../events");
var packet_1 = require("../packet/");
var port_1 = require("./port");
var debug = _debug('chix:inputPort');
var InputPort = /** @class */ (function (_super) {
    __extends(InputPort, _super);
    function InputPort(portDefinition) {
        var _this = _super.call(this, portDefinition) || this;
        _this.data = [];
        _this.required = true;
        _this._isCycling = false;
        _this.receiveListener = _this.receiveListener.bind(_this);
        if (portDefinition) {
            if (portDefinition.hasOwnProperty('default')) {
                _this.setDefault(portDefinition.default);
            }
            if (portDefinition.context) {
                _this.setContext(portDefinition.context);
            }
        }
        _this.reset();
        return _this;
    }
    Object.defineProperty(InputPort.prototype, "persist", {
        get: function () {
            return this._persist;
        },
        set: function (persist) {
            this._persist = persist;
        },
        enumerable: true,
        configurable: true
    });
    InputPort.prototype.receiveListener = function (packet, target) {
        this.receive(packet, target.get('index'), target);
    };
    InputPort.prototype.close = function () {
        _super.prototype.close.call(this);
        debug('close %s port', this.name);
    };
    InputPort.prototype.isSync = function () {
        return true;
    };
    InputPort.prototype.isAsync = function () {
        return false;
    };
    InputPort.prototype.cycle = function (packet, index, target) {
        var e_1, _a;
        var values = packet.read(this);
        this._isCycling = true;
        if (Array.isArray(values) && this.type !== 'array') {
            try {
                for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                    var value = values_1_1.value;
                    this.receive(packet.clone(this).write(this, value), index, target);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        this._isCycling = false;
    };
    /**
     * Receive a packet
     *
     * Packets are always accepted, unless the data is non-consumable.
     * In which case there will be an error state and everything halts.
     *
     */
    InputPort.prototype.receive = function (value, index, target) {
        var packet = packet_1.Packet.isPacket(value) ? value : packet_1.Packet.create(value, this.type || typeof value);
        packet.setOwner(this);
        if (!this._isCycling && target && target.has('cyclic')) {
            this.cycle(packet, index, target);
            return this;
        }
        if (this._validatePacket(packet, index)) {
            if (index === undefined) {
                this.fill(packet, target);
            }
            else {
                this.indexed = true;
                this.fillIndex(packet, index, target);
            }
        }
        return this;
    };
    InputPort.prototype.fill = function (packet, target) {
        if (this.hasParent()) {
            var _node = this.getParent();
            debug('fill -> (%s) %s', this.name, _node ? (_node.title || _node.name) : '');
        }
        // how to get the link back and thus the index?
        if (!packet_1.Packet.isPacket(packet)) {
            packet = packet_1.Packet.create(packet, this.type || typeof packet)
                .setOwner(this);
        }
        // if the persist is based on the connection, persist should be on that connection.
        if (this.persist || (target && target.setting.persist)) {
            this.__persist = packet.clone(this);
        }
        this._handleFunctionType(packet);
        if (this._validatePacket(packet)) {
            this.data.push(packet);
            this.fills++;
            this.emit(events_1.PortEvents.FILL);
        }
        return this;
    };
    InputPort.prototype.fillIndex = function (packet, index, target) {
        var e_2, _a, _b;
        if (this.hasParent()) {
            var _node = this.getParent();
            debug('fill -> [%s] (%s) %s', index, this.name, _node ? (_node.title || _node.name) : '');
        }
        try {
            for (var _c = __values(this.data), _d = _c.next(); !_d.done; _d = _c.next()) {
                var packetData = _d.value;
                // test whether our position is free
                var value = packetData.read(this);
                if (value[index] === undefined) {
                    value[index] = packet.read(this);
                    packet_1.Packet.metaMerge(packetData._meta, packet._meta);
                    this.emit(events_1.PortEvents.FILL);
                    return;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // could not fill push a new packet on the queue
        var data;
        if (this.type === 'object') {
            data = (_b = {}, _b[index] = packet.read(this), _b);
        }
        else if (this.type === 'array') {
            data = [];
            data[index] = packet.read(this);
        }
        else {
            throw Error('index on non object/array port');
        }
        this.fill(packet_1.Packet.create(data, this.type) // array / object
            .setOwner(this), target);
    };
    InputPort.prototype.reset = function () {
        this.clearInput();
        _super.prototype.reset.call(this);
        return this;
    };
    Object.defineProperty(InputPort.prototype, "filled", {
        get: function () {
            return this.isFilled() === port_1.Port.EMPTY;
        },
        enumerable: true,
        configurable: true
    });
    InputPort.prototype.isFilled = function () {
        var e_3, _a, e_4, _b;
        if (this.hasConnections()) {
            if (this.indexed) {
                if (this.data.length) {
                    var data = this.data[0].read(this);
                    // todo should be able to set deep properties.
                    if (typeof data === 'object' && this.type === 'object') {
                        if (Object.keys(data).length !== this._connections.length) {
                            return port_1.Port.EMPTY;
                        }
                    }
                    else if (Array.isArray(data) && this.type === 'array') {
                        if (this._connections.length &&
                            data.length !== this._connections.length) {
                            return port_1.Port.EMPTY;
                        }
                        try {
                            for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                                var packet = data_1_1.value;
                                if (packet === undefined) {
                                    return port_1.Port.EMPTY;
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                    else {
                        throw Error('non array/object port cannot be indexed');
                    }
                }
            }
            if (this.data.length) {
                return port_1.Port.FILLED;
            }
            else if (this.__persist) {
                return port_1.Port.PERSIST;
            }
        }
        else if (this.data.length) {
            if (this.indexed) {
                var data = this.data[0].read(this);
                try {
                    for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
                        var packet = data_2_1.value;
                        if (packet === undefined) {
                            return port_1.Port.EMPTY;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (data_2_1 && !data_2_1.done && (_b = data_2.return)) _b.call(data_2);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
            return port_1.Port.DIRECT;
        }
        else if (this.context) {
            return port_1.Port.CONTEXT;
        }
        else if (this.default) {
            return port_1.Port.DEFAULT;
        }
        else if (this.required === false) {
            return port_1.Port.NOT_REQUIRED;
        }
        return port_1.Port.EMPTY;
    };
    InputPort.prototype.isRequired = function () {
        return !!this.required;
    };
    /**
     * Reads the first item
     * before reading first test with isFilled()
     */
    InputPort.prototype.read = function () {
        // this.indexed = false
        if (this.hasConnections()) {
            if (this.data.length) {
                this.indexed = false; // new input will toggle it again
                this.reads++;
                return this.data.shift().release(this);
                // } else if (this.persist && this.__persist) {
            }
            else if (this.__persist) {
                this.reads++;
                return this.__persist.clone(this).release(this);
            }
        }
        else if (this.data.length) {
            this.reads++;
            return this.data.shift().release(this);
        }
        else if (this.context) {
            this.reads++;
            return this.context.clone(this).release(this);
        }
        else if (this.default) {
            this.reads++;
            return this.default.clone(this).release(this);
        }
        else if (!this.required) {
            return new packet_1.Packet(undefined);
        }
        console.log(this);
        throw Error('Unable to read port data');
    };
    InputPort.prototype.peek = function () {
        // this.indexed = false
        if (this.hasConnections()) {
            if (this.data.length) {
                this.indexed = false; // new input will toggle it again
                return this.data[0].release(this);
                // } else if (this.persist && this.__persist) {
            }
            else if (this.__persist) {
                return this.__persist.clone(this).release(this);
            }
        }
        else if (this.data.length) {
            return this.data[0].release(this);
        }
        else if (this.context) {
            return this.context.clone(this).release(this);
        }
        else if (this.default) {
            return this.default.clone(this).release(this);
        }
        else if (!this.required) {
            return new packet_1.Packet(undefined);
        }
        throw Error('Unable to read port data');
    };
    // TODO: emit the right event, right now IO handler is doing this I think
    InputPort.prototype.connect = function (link) {
        if (!this.hasConnection(link)) {
            this.open();
            debug('Connecting link');
            link.target.on(events_1.ConnectorEvents.DATA, this.receiveListener);
            this._connections.push(link);
        }
        else {
            console.log('Link already connected');
        }
        return this;
    };
    InputPort.prototype.plug = function (target) {
        if (target.wire && !this.hasConnection(target.wire)) {
            this.open();
            var index = target.get('index');
            if (index !== undefined && this.type === 'any') {
                this.type = isNaN(parseInt(index, 10)) ? 'object' : 'array';
            }
            debug('plug %s -> %s(%s)', target.wire.source.port, index === undefined ? '' : "[" + index + "] ", target.port);
            target.on(events_1.ConnectorEvents.DATA, this.receiveListener);
            /*
            if (target.setting) {
              // shouldn't overwrite options, test options both on port and optionally the connection
              // this.setOptions(target.setting)
            }
            */
            this._connections.push(target.wire);
        }
        else {
            console.log('Link already connected');
        }
        return this;
    };
    InputPort.prototype.disconnect = function (link) {
        if (this.hasConnection(link)) {
            if (this._connections.length === 1) {
                this.close();
                if (this.__persist) {
                    this.__persist = undefined;
                }
            }
            link.target.removeListener(events_1.ConnectorEvents.DATA, this.receiveListener);
            this._connections.splice(this._connections.indexOf(link), 1);
        }
        else {
            console.log('Link already disconnected');
        }
    };
    InputPort.prototype.unplug = function (target) {
        if (target.wire && this.hasConnection(target.wire)) {
            var index = target.get('index');
            if (index !== undefined && this.type === 'any') {
                this.type = isNaN(parseInt(index, 10)) ? 'object' : 'array';
            }
            debug('unplug %s -> %s(%s)', target.wire.source.port, index === undefined ? '' : "[" + index + "] ", target.port);
            if (this._connections.length === 1) {
                this.close();
                if (this.__persist) {
                    this.__persist = undefined;
                }
            }
            target.removeListener(events_1.ConnectorEvents.DATA, this.receiveListener);
            this._connections.splice(this._connections.indexOf(target.wire), 1);
        }
        else {
            console.log('Link already disconnected');
        }
    };
    InputPort.prototype.clearInput = function () {
        this.data = [];
        return this;
    };
    InputPort.prototype.setDefault = function (val) {
        var p = packet_1.Packet.isPacket(val) ? val : packet_1.Packet.create(val, this.type || typeof val);
        this._handleFunctionType(p);
        if (this._validatePacket(p)) {
            this.default = p;
        }
        return this;
    };
    InputPort.prototype.hasDefault = function () {
        return this.default !== undefined;
    };
    InputPort.prototype.clearDefault = function () {
        this.default = undefined;
        return this;
    };
    // TODO: set indexed default
    InputPort.prototype.setContext = function (value, trigger) {
        // OK, value is already a packet yet it contains undefined.
        if (value === undefined) {
            throw Error('Refuse to set context to undefined');
        }
        var packet = packet_1.Packet.isPacket(value) ? value : packet_1.Packet.create(value, this.type || typeof value);
        this._handleFunctionType(packet);
        if (this._validatePacket(packet)) {
            this.context = packet;
            if (trigger) {
                this.emit(events_1.PortEvents.FILL);
            }
        }
        return this;
    };
    InputPort.prototype.hasContext = function () {
        return this.context !== undefined;
    };
    InputPort.prototype.clearContext = function () {
        this.context = undefined;
        return this;
    };
    InputPort.prototype.setPersist = function (value) {
        this.persist = value;
        return this;
    };
    InputPort.prototype.hasPersist = function () {
        return this.__persist !== undefined;
    };
    InputPort.prototype.clearPersist = function () {
        this.__persist = undefined;
        return this;
    };
    InputPort.prototype.destroy = function () {
        this.clearContext();
        this.clearPersist();
        this.clearInput();
    };
    return InputPort;
}(port_1.Port));
exports.InputPort = InputPort;

},{"../events":26,"../packet/":93,"./port":107,"debug":147}],106:[function(require,module,exports){
(function (process){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var events_1 = require("../events");
var packet_1 = require("../packet");
var port_1 = require("./port");
var debug = _debug('chix:outputPort');
var OutputPort = /** @class */ (function (_super) {
    __extends(OutputPort, _super);
    function OutputPort(portDefinition) {
        var _this = _super.call(this, portDefinition) || this;
        _this.data = [];
        _this.pull = false;
        _this._writeListener = _this._writeListener.bind(_this);
        return _this;
    }
    OutputPort.prototype.peek = function () {
        if (this.data.length) {
            return this.data[0];
        }
        return null;
    };
    OutputPort.prototype.size = function () {
        return this.data.length;
    };
    OutputPort.prototype.read = function () {
        if (this.data.length) {
            return this.data.shift();
        }
        if (this.hasParent()) {
            throw Error("Unable to read from port " + this.parent().identifier + "(" + this.name + ")");
        }
        throw Error("Unable to read from main port (" + this.name + ")");
    };
    OutputPort.prototype.write = function (packet) {
        if (!packet_1.Packet.isPacket(packet)) {
            packet = packet_1.Packet.create(packet, this.type);
        }
        else {
            packet.type = this.type;
        }
        // validate type (if validate)
        this.fills++;
        if (this.pull) {
            this.data.push(packet);
        }
        else {
            this.emit(events_1.PortEvents.DATA, packet);
        }
    };
    OutputPort.prototype.open = function () {
        if (this.isClosed()) {
            _super.prototype.open.call(this);
            debug('open %s port', this.name);
            this.on(events_1.PortEvents.DATA, this._writeListener);
        }
    };
    OutputPort.prototype.close = function () {
        if (this.isOpen()) {
            _super.prototype.close.call(this);
            debug('close %s port', this.name);
            this.removeListener(events_1.PortEvents.DATA, this._writeListener);
        }
    };
    OutputPort.prototype.connect = function (link) {
        if (!this.hasConnection(link)) {
            this.open();
            this._connections.push(link);
        }
        else {
            console.log('Link already connected');
        }
    };
    OutputPort.prototype.plug = function (source) {
        if (source.wire) {
            if (this.hasConnection(source.wire)) {
                console.log('Link already connected');
            }
            else {
                this.open();
                debug('plug (%s) -> %s', source.port, source.wire.target.port);
                if (source.setting) {
                    this.setOptions(source.setting);
                }
                this._connections.push(source.wire);
            }
        }
        else {
            throw Error('Wireless connector.');
        }
    };
    OutputPort.prototype.disconnect = function (link) {
        if (this.hasConnection(link)) {
            if (this._connections.length === 1) {
                this.close();
            }
            return this._connections.splice(this._connections.indexOf(link), 1);
        }
        console.log('Link already disconnected');
        return undefined;
    };
    OutputPort.prototype.unplug = function (target) {
        if (target.wire && this.hasConnection(target.wire)) {
            if (this._connections.length === 1) {
                this.close();
            }
            // target.wire.removeListener(PortEvents.DATA, this.receiveListener)
            return this._connections.splice(this._connections.indexOf(target.wire), 1);
        }
        console.log('Link already disconnected');
        return undefined;
    };
    OutputPort.prototype.destroy = function () {
        this.removeAllListeners(events_1.PortEvents.DATA);
    };
    OutputPort.prototype._send = function (connection, packet) {
        process.nextTick(function () {
            connection.source.write(packet);
        });
    };
    OutputPort.prototype._writeListener = function (packet) {
        var e_1, _a;
        debug('%s writing to %d connections', this.name, this._connections.length);
        var _cp = packet;
        try {
            for (var _b = __values(this._connections), _c = _b.next(); !_c.done; _c = _b.next()) {
                var connection = _c.value;
                if (this.hasParent()) {
                    var node = this.getParent();
                    debug('write %s (%s) -> %s', node ? node.title || node.name : '', this.name, connection.target.port);
                }
                this._send(connection, _cp);
                _cp = _cp.clone(_cp.owner); // cheat owner for now
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.reads += this.listenerCount(events_1.PortEvents.DATA) - 1 + this._connections.length;
    };
    return OutputPort;
}(port_1.Port));
exports.OutputPort = OutputPort;

}).call(this,require('_process'))
},{"../events":26,"../packet":93,"./port":107,"_process":3,"debug":147}],107:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var forOf = require("object-forof");
var common_1 = require("../common");
var util_1 = require("../util");
var validate_1 = require("../validate");
function PortMix(Base) {
    return util_1.mixin(common_1.$Parent)(Base);
}
/**
 * Port
 *
 * Distinct between input & output port
 * Most methods are for input ports.
 *
 * @example
 *
 *  const port = new Port()
 *  port.receive(p)
 *  port.receive(p); // queued (arrayed)
 *  port.read(); // must test whether it's filled, will sweep along all ports
 *  port.read() // and actually takes the value if the condition is met for *all* ports
 *  port.receive(p)
 *
 *  @param {Object} def Port Definitions
 *  @param {Boolean} def.required whether this port requires input
 *  @param {Any} def.default default value for this port
 *  @param {Boolean|Array} def.persist whether incoming values should persist
 *                                     If value is an array it corresponds to an index
 *                                     position within the array port.
 *  @param {Object} def.settings The port settings
 *  @param {Object} def.settings The port settings
 */
var Port = /** @class */ (function (_super) {
    __extends(Port, _super);
    function Port(portDefinition) {
        var _this = _super.call(this) || this;
        // portFactory creates cyclic reference, use portFactory directly.
        /*
        public static create(type: string, name: string, portDefinition: PortDefinition) {
         console.log('portDefinition?', portDefinition)
          return portFactory(type, {
            ...portDefinition,
            name
          })
        }
        */
        _this.name = '';
        _this.indexed = false;
        _this._open = false;
        _this.args = [];
        _this.fills = 0;
        _this.reads = 0;
        _this.runCount = 0;
        _this._connections = [];
        _this.type = portDefinition.type;
        /*
        for (const key in portDefinition) {
          if (portDefinition.hasOwnProperty(key)) {
            (this as any)[key]  = (portDefinition as any)[key]
          }
        }
        */
        Object.assign(_this, portDefinition);
        if (!_this.name) {
            console.log(portDefinition);
            throw Error('Port name is required');
        }
        if (!_this.type) {
            console.log(portDefinition);
            throw Error('Port type is required');
        }
        _this.async = !!_this.fn;
        return _this;
    }
    /**
     * Whether this port is open
     *
     * @returns {boolean}
     */
    Port.prototype.isOpen = function () {
        return this._open;
    };
    /**
     * Whether this port is closed
     *
     * @returns {boolean}
     */
    Port.prototype.isClosed = function () {
        return !this._open;
    };
    /**
     * Open port
     */
    Port.prototype.open = function () {
        this._open = true;
    };
    /**
     *
     * Used from within a component to close the port
     *
     * A component receives an open port.
     * When the port closes it's ready to be filled.
     * This also means there are two sides on a port
     * Open for input and open for output to the component.
     *
     */
    Port.prototype.close = function () {
        this._open = false;
    };
    /**
     * Test whether the link is connected to this port
     *
     * @param link
     * @returns {boolean}
     */
    Port.prototype.hasConnection = function (link) {
        return this._connections && this._connections.indexOf(link) >= 0;
    };
    /**
     * Whether this port has any connections
     *
     * @returns {boolean}
     */
    Port.prototype.hasConnections = function () {
        return this._connections.length > 0;
    };
    /**
     * Get all connections
     *
     * @returns {boolean}
     */
    Port.prototype.getConnections = function () {
        return this._connections;
    };
    Port.prototype.isFilled = function () {
        throw Error('method not implemented');
    };
    /**
     * Reset this port
     * Sets `fills`, `reads` and `runCount` to zero.
     *
     * Also closes the port again.
     */
    Port.prototype.reset = function () {
        this.fills = 0;
        this.reads = 0;
        this.runCount = 0;
        this.close();
    };
    Port.prototype.isAvailable = function () { };
    /**
     * Get Port Option
     *
     * @param opt
     * @returns {*}
     */
    Port.prototype.getOption = function (opt) {
        if (this.hasOwnProperty(opt)) {
            return this[opt];
        }
        else {
            return undefined;
        }
    };
    /**
     *
     * Sets an input port option.
     *
     * The node schema for instance can specify whether a port is persistent.
     *
     * At the moment a connection can override these values.
     * It's a way of saying I give you this once so take care of it.
     *
     */
    Port.prototype.setOption = function (opt, value) {
        this[opt] = value;
    };
    /**
     *
     * TODO: implementation was incorrect, started as all ports level, check this.
     * Seems to have never surfaced because this method is not used..
     *
     * @param {Object} options
     */
    Port.prototype.setOptions = function (options) {
        var _this = this;
        forOf(function (opt, val) { return _this.setOption(opt, val); }, options);
    };
    Port.prototype.destroy = function () {
        throw Error('method destroy() not implemented');
    };
    /**
     * convert to function if it's not already a function
     *
     * @param {Port} port
     * @private
     */
    Port.prototype._handleFunctionType = function (packet) {
        if (this.type === 'function') {
            var data = packet.read(this);
            if (data !== null) {
                var type = typeof data;
                if (type === 'string') {
                    // args, can be used as a hint for named params
                    // if there are no arg names defined, use arguments
                    var args = this.args ? this.args : [];
                    packet.write(this, new (Function.bind.apply(Function, __spread([void 0], args, [data])))());
                }
                else {
                    if (type !== 'function' && type !== 'object') {
                        var node = this.getParent();
                        throw Error(node.identifier + ": port " + this.name + " expects a function");
                    }
                }
            }
        }
    };
    Port.prototype._validatePacket = function (packet, index) {
        var data = packet.read(this);
        if (index !== undefined) {
            // fix this, def should be properly set for port, not only this.type
            return true;
        }
        // allow null always
        if (data !== null) {
            if (!validate_1.validate.data(this.type, data)) {
                var real = Object.prototype.toString.call(data).match(/\s(\w+)/)[1];
                if (data && typeof data === 'object' &&
                    data.constructor.name === 'Object') {
                    var tmp = Object.getPrototypeOf(data).constructor.name;
                    if (tmp) {
                        real = tmp;
                    }
                }
                // improve this error handling, emit the error.
                // TODO: move that is connected check to this.error()
                // see sendPortOutput()
                this.emit('error', Error("Expected '" + this.type + "' got '" + real + "' on port '" + this.name + "'"));
            }
        }
        return true;
    };
    Port.EMPTY = 0;
    Port.FILLED = 1;
    Port.PERSIST = 2;
    Port.DIRECT = 3;
    Port.CONTEXT = 4;
    Port.DEFAULT = 5;
    // TODO: these were missing.
    Port.NOT_REQUIRED = 6;
    Port.NOT_FILLED = 7;
    Port.PERSISTED_SET = 8;
    Port.CONTEXT_SET = 9;
    Port.DEFAULT_SET = 10;
    Port.SYNC_PORTS_UNFULFILLED = 11;
    Port.Message = [
        'not filled',
        'connection filled',
        'connection persisted',
        'direct fill',
        'context',
        'default',
        'required'
    ];
    return Port;
}(PortMix(events_1.EventEmitter)));
exports.Port = Port;

},{"../common":10,"../util":122,"../validate":127,"events":1,"object-forof":161}],108:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * @param {PacketContainer} pc PacketContainer
 * @private
 */
function runPortBox(packetContainer) {
    // setup is done elsewhere, should be done over here
    var sb = this.fn;
    /*
     this.event(':start', {
     node: this.export()
     })
     */
    sb.set('$', packetContainer);
    // this is the nodes state, guess there should be a setState() thing
    sb.set('state', this.state);
    // this.setStatus('running')
    // NOTE: (this) has changed now also, but I think it's not used anyway,
    //       it is what is bound to the function
    var ret = sb.run(this);
    // this.nodebox.state = this.state = sb.state
    this.state = sb.state;
    if (ret === false) {
        throw Error('Returning false from sandbox deprecated');
    }
    this.runCount++;
}
exports.runPortBox = runPortBox;

},{}],109:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./manager"));

},{"./manager":110}],110:[function(require,module,exports){
(function (process){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _debug = require("debug");
var events_1 = require("events");
var uuid_1 = require("uuid");
var events_2 = require("../events");
var debug = _debug('chix:pm');
var onExit = [];
if (typeof process !== 'undefined' && process.on) { // old browserify
    process.on('exit', function onExitHandlerProcessManager() {
        onExit.forEach(function (instance) { return instance.onExit.bind(instance)(); });
    });
}
var noop = function (_processes, _that) { };
/**
 *
 * Default Process Manager
 *
 * @constructor
 * @public
 *
 */
var ProcessManager = /** @class */ (function (_super) {
    __extends(ProcessManager, _super);
    function ProcessManager(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.processes = new Map();
        _this.onExitHandler = noop;
        /**
         *
         * Process Error Handler.
         *
         * The only errors we receive come from the nodes themselves.
         * It's also guaranteed if we receive an error the process itself
         * Is already within an error state.
         *
         */
        _this.processErrorHandler = function (event) {
            /* TODO: re-enable
            if (event.node.status !== 'error') {
              console.log('STATUS', event.node.status)
              throw Error('Process is not within error state', event.node.status)
            }
            */
            // Emit it, humans must solve this.
            console.log('PM Error', event);
            _this.emit(events_2.PMEvents.ERROR, event);
        };
        _this.onProcessStartHandler = function (event) {
            debug('Process started ' + event.node.identifier);
            _this.emit(events_2.PMEvents.START_PROCESS, event.node);
        };
        _this.onProcessStopHandler = function (event) {
            debug('Process stopped ' + event.node.identifier);
            _this.emit(events_2.PMEvents.STOP_PROCESS, event.node);
        };
        _this.onProcessStatusHandler = function (event) {
            debug('Changed status ' + event.node.identifier + ' to ' + event.status);
            _this.emit(events_2.PMEvents.PROCESS_STATUS, event);
        };
        if (options.onExit) {
            _this.onExitHandler = options.onExit;
        }
        onExit.push(_this);
        return _this;
    }
    ProcessManager.prototype.onExit = function () {
        var processes = Array.from(this.processes.values()).reverse();
        this.onExitHandler(processes, this);
    };
    ProcessManager.prototype.hasMainGraph = function () {
        return this.getMainGraphs().length > 0;
    };
    ProcessManager.prototype.getMainGraph = function () {
        var main = this.getMainGraphs().pop();
        if (!main) {
            throw Error('Could not find main actor');
        }
        return main;
    };
    ProcessManager.prototype.getMainGraphs = function () {
        var e_1, _a;
        var main = [];
        try {
            for (var _b = __values(this.processes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var process_1 = _c.value;
                if (process_1.type === 'flow' && !process_1.hasParent()) {
                    main.push(process_1);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return main;
    };
    ProcessManager.prototype.register = function (node) {
        if (node.pid) {
            throw new Error('Refusing to add node with existing process id');
        }
        var pid = uuid_1.v4();
        node.setPid(pid);
        this.processes.set(pid, node);
        node.on(events_2.NodeEvents.START.name, this.onProcessStartHandler);
        node.on(events_2.NodeEvents.STOP.name, this.onProcessStopHandler);
        node.on(events_2.NodeEvents.STATUS_UPDATE.name, this.onProcessStatusHandler);
        node.on(events_2.NodeEvents.ERROR.name, this.processErrorHandler);
        debug('Registered ' + node.identifier);
        this.emit(events_2.PMEvents.ADD_PROCESS, node);
    };
    ProcessManager.prototype.changePid = function (from, to) {
        if (this.processes.has(from)) {
            this.processes.set(to, this.processes.get(from));
            this.processes.delete(from);
        }
        else {
            throw Error('Process id not found');
        }
        this.emit(events_2.PMEvents.CHANGE_PID, {
            from: from,
            to: to
        });
    };
    ProcessManager.prototype.getProcess = function (pid) {
        if (this.processes.has(pid)) {
            return this.processes.get(pid);
        }
        throw Error('Process id not found');
    };
    ProcessManager.prototype.getProcesses = function () {
        return Array.from(this.processes.values());
    };
    // TODO: improve start, stop, hold, release logic..
    ProcessManager.prototype.start = function (node) {
        // allow by pid and by node object
        var pid = typeof node === 'object' ? node.pid : node;
        var process = this.getProcess(pid);
        if (process.type === 'flow') {
            process.start();
        }
        else {
            process.release();
        }
    };
    ProcessManager.prototype.stop = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var pid, process;
            return __generator(this, function (_a) {
                pid = typeof node === 'object' ? node.pid : node;
                process = this.getProcess(pid);
                if (process.type === 'flow') {
                    return [2 /*return*/, process.stop()];
                }
                return [2 /*return*/, process.hold()];
            });
        });
    };
    // TODO: just deleting is not enough.
    // links also contains the pids
    // on remove process those links should also be removed.
    ProcessManager.prototype.unregister = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var process;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.pid) {
                            throw new Error('Process id not found');
                        }
                        process = this.getProcess(node.pid);
                        if (!(process.type === 'flow')) return [3 /*break*/, 2];
                        // wait for `subgraph` to be finished
                        return [4 /*yield*/, this.stop(node)];
                    case 1:
                        // wait for `subgraph` to be finished
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, node.shutdown()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        node.removeListener(events_2.NodeEvents.START.name, this.onProcessStartHandler);
                        node.removeListener(events_2.NodeEvents.STOP.name, this.onProcessStopHandler);
                        node.removeListener(events_2.NodeEvents.STATUS_UPDATE.name, this.onProcessStatusHandler);
                        node.removeListener(events_2.NodeEvents.ERROR.name, this.processErrorHandler);
                        this.processes.delete(node.pid);
                        // remove pid
                        delete node.pid;
                        this.emit(events_2.PMEvents.REMOVE_PROCESS, node);
                        debug('Unregistered ' + node.identifier);
                        return [2 /*return*/, node];
                }
            });
        });
    };
    /**
     *
     * Get Process
     * Either by id or it's pid.
     *
     */
    ProcessManager.prototype.get = function (pid) {
        return this.processes.get(pid);
    };
    ProcessManager.prototype.getById = function (id, actor) {
        return this.findBy('id', id, actor);
    };
    ProcessManager.prototype.findBy = function (prop, value, actor) {
        var e_2, _a;
        var found;
        try {
            for (var _b = __values(this.processes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var process_2 = _c.value;
                if (process_2[prop] === value &&
                    (!actor || actor.hasNode(process_2.id))) {
                    if (found) {
                        console.log(this.processes);
                        throw Error('conflict: multiple ' + prop + 's matching ' + value);
                    }
                    found = process_2;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return found;
    };
    ProcessManager.prototype.filterByStatus = function (status) {
        return this.filterBy('status', status);
    };
    ProcessManager.prototype.filterBy = function (prop, value) {
        var e_3, _a;
        var filtered = [];
        try {
            for (var _b = __values(this.processes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var process_3 = _c.value;
                if (process_3[prop] === value) {
                    filtered.push(process_3);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return filtered;
    };
    return ProcessManager;
}(events_1.EventEmitter));
exports.ProcessManager = ProcessManager;

}).call(this,require('_process'))
},{"../events":26,"_process":3,"debug":147,"events":1,"uuid":163}],111:[function(require,module,exports){
(function (process,global){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var iobox_1 = require("@chix/iobox");
var sha1 = require("js-sha1");
// import * as path from 'path'
function _underscored(str) {
    return str
        .replace(/([a-z\d])([A-Z]+)/g, '$1_$2')
        .replace(/[.-\s]+/g, '_')
        .toLowerCase();
}
/**
 *
 * NodeBox
 *
 * @constructor
 * @public
 *
 */
var NodeBox = /** @class */ (function (_super) {
    __extends(NodeBox, _super);
    function NodeBox(name) {
        var _this = _super.call(this, name) || this;
        _this.name = 'NodeBox';
        if (name) {
            _this.name = name;
        }
        // FIXME: IOBox extends eventEmitter and already defines on.
        /*
        (this.on as any).input
        (this.on as any).shutdown
        (this.on as any).start
        */
        _this.define();
        return _this;
    }
    NodeBox.prototype.define = function () {
        // Define the structure
        this.addArg('input', {});
        this.addArg('$', {});
        this.addArg('output', {});
        this.addArg('state', {});
        this.addArg('done', null);
        this.addArg('cb', null);
        // this.addArg('console', console)
        this.addArg('on', {
            input: {}
        }); // dynamic construction
        // what to return from the function
        this.addReturn('output');
        this.addReturn('state');
        this.addReturn('on');
    };
    /**
     *
     * Add requires to the sandbox.
     *
     * xNode should use check = true and then have
     * a try catch block.
     *
     * @param {Object} requires
     * @param {Boolean} check
     */
    NodeBox.prototype.require = function (requires, check) {
        // the generic sandbox should do the same logic
        // for adding the requires but should not check if
        // they are available.
        var u_key;
        // 'require': '<version'
        for (var key in requires) {
            if (requires.hasOwnProperty(key)) {
                // only take last part e.g. chix-flow/SomeThing-> some_thing
                u_key = _underscored(key.split('/').pop());
                this.emit('require', { require: key });
                if (check !== false) {
                    if (typeof requires[key] !== 'string') {
                        // assume it's already required.
                        // the npm installed versions use this.
                        // e.g. nodule-template
                        this.addArg(u_key, requires[key]);
                    }
                    else {
                        var failed = void 0;
                        if (typeof process === 'object' && process.cwd) {
                            try {
                                var p = process.cwd() + "/node_modules/" + key;
                                this.addArg(u_key, require(p));
                                failed = false;
                            }
                            catch (e) {
                                failed = true;
                            }
                        }
                        if (failed) {
                            // TODO: deep not handled yet.
                            var hash = 'x' + sha1(key);
                            if (typeof window !== 'undefined' && window[hash]) {
                                this.addArg(u_key, window[hash]);
                            }
                            else {
                                this.addArg(u_key, require(key));
                            }
                        }
                    }
                }
                else {
                    // just register it, used for generate
                    this.addArg(u_key, undefined);
                }
            }
        }
    };
    NodeBox.prototype.expose = function (exposed) {
        var e_1, _a;
        // created to allow window to be exposed to a node.
        // only meant to be used for dom nodes.
        var _global = typeof window === 'undefined' ? global : window;
        if (exposed) {
            try {
                for (var exposed_1 = __values(exposed), exposed_1_1 = exposed_1.next(); !exposed_1_1.done; exposed_1_1 = exposed_1.next()) {
                    var expose = exposed_1_1.value;
                    this.emit('expose', { expose: expose });
                    if (expose === 'window') {
                        this.addArg('win', window);
                    }
                    else if (expose === 'self') {
                        this.addArg('self', this);
                    }
                    else {
                        // Do not re-expose anything already going in
                        if (!this.args.hasOwnProperty(expose)) {
                            this.addArg(expose, _global[expose]);
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (exposed_1_1 && !exposed_1_1.done && (_a = exposed_1.return)) _a.call(exposed_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    NodeBox.prototype.compile = function (fn) {
        return _super.prototype.compile.call(this, fn, true); // return as object
        /*
        return super.compile.call(
          this, fn, true // return as object
        )
        */
    };
    /**
     *
     * Runs the sandbox.
     *
     */
    NodeBox.prototype.run = function (bind) {
        var res = _super.prototype.run.apply(this, [bind]);
        var ret;
        // puts the result back into our args/state
        // TODO: I do not think this is needed?
        for (var k in res) {
            if (k === 'return') {
                ret = res.return;
            }
            else if (res.hasOwnProperty(k)) {
                this.set(k, res[k]);
            }
        }
        return ret; // original return value
    };
    return NodeBox;
}(iobox_1.IOBox));
exports.NodeBox = NodeBox;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"@chix/iobox":132,"_process":3,"js-sha1":150}],112:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var node_1 = require("./node");
/**
 *
 * PortBox
 *
 * @constructor
 * @public
 *
 */
var PortBox = /** @class */ (function (_super) {
    __extends(PortBox, _super);
    function PortBox(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name || 'PortBox';
        return _this;
    }
    PortBox.prototype.define = function () {
        // Define the structure
        this.addArg('data', null);
        this.addArg('source', null); // not sure..
        this.addArg('state', {});
        this.addArg('input', {});
        this.addArg('$', {});
        this.addArg('output', null); // output function should be set manually
        // what to return from the function.
        this.addReturn('state');
    };
    return PortBox;
}(node_1.NodeBox));
exports.PortBox = PortBox;

},{"./node":111}],113:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = {
    'type': 'object',
    'title': 'Chiχ Context Object',
    'description': 'A context object contains all context for a given map',
    'properties': {
        'key': {
            'type': 'string',
            'required': true
        },
        'title': {
            'type': 'string',
            'required': true
        },
        'description': {
            'type': 'string',
            'required': true
        },
        'context': {
            'type': 'object',
            'required': false
        },
        'ports': {
            'type': 'object',
            'required': true,
            'properties': {
                'input': {
                    'type': 'object'
                },
                'output': {
                    'type': 'object'
                },
                'event': {
                    'type': 'object'
                }
            }
        }
    }
};

},{}],114:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Events = {
    'events': {
        'error': {
            'node': {
                'type': 'object'
            },
            'msg': {
                'type': 'string'
            }
        },
        'nodeContext': {
            'node': {
                'type': 'object'
            },
            'message': {
                'type': 'string'
            }
        },
        'start': {
            'node': {
                'type': 'object'
            }
        },
        'branching': {
            'node': {
                'type': 'object'
            },
            'method': {
                'type': 'string'
            }
        },
        'statusUpdate': {
            'node': {
                'type': 'object'
            },
            'status': {
                'type': 'string'
            }
        },
        'output': {
            'node': {
                'type': 'object'
            },
            'port': {
                'type': 'string'
            },
            'out': {
                'type': 'any'
            }
        },
        'fillCore': {
            'node': {
                'type': 'object'
            },
            'fn': {
                'type': 'string'
            },
            'name': {
                'type': 'string'
            }
        },
        'nodeComplete': {
            'node': {
                'type': 'object'
            },
            'message': {
                'type': 'string'
            }
        },
        'nodeTimeout': {
            'node': {
                'type': 'object'
            }
        },
        'inputTimeout': {
            'node': {
                'type': 'object'
            },
            'message': {
                'type': 'string'
            }
        },
        'portReject': {
            'node': {
                'type': 'object'
            },
            'port': {
                'type': 'string'
            },
            'options': {
                'type': 'object'
            },
            'data': {
                'type': 'object'
            }
        },
        'portFill': {
            'node': {
                'type': 'object'
            },
            'message': {
                'type': 'string'
            }
        },
        'expose': {
            'node': {
                'type': 'object'
            },
            'expose': {
                'type': 'string'
            }
        },
        'inputValidated': {
            'node': {
                'type': 'object'
            },
            'port': {
                'type': 'string'
            }
        }
    }
};

},{}],115:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./context"));
__export(require("./events"));
__export(require("./link"));
__export(require("./map"));
__export(require("./node"));
__export(require("./stage"));

},{"./context":113,"./events":114,"./link":116,"./map":117,"./node":118,"./stage":119}],116:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Link = {
    'type': 'object',
    'title': 'Chiχ Link',
    'properties': {
        'id': {
            'type': 'string',
            'required': false
        },
        'source': {
            'type': 'object',
            'required': true,
            'properties': {
                'id': {
                    'type': 'string'
                },
                'port': {
                    'type': 'string'
                },
                'index': {
                    'type': ['string', 'number']
                },
                'settings': {
                    'type': 'object'
                }
            }
        },
        'target': {
            'type': 'object',
            'required': true,
            'properties': {
                'id': {
                    'type': 'string'
                },
                'port': {
                    'type': 'string'
                },
                'index': {
                    'type': ['string', 'number']
                },
                'settings': {
                    'type': 'object',
                    'properties': {
                        'persist': {
                            'type': 'boolean'
                        },
                        'sync': {
                            'type': 'string'
                        },
                        'cyclic': {
                            'type': 'boolean'
                        }
                    }
                }
            }
        },
        'settings': {
            'type': 'object',
            'properties': {
                'dispose': {
                    'type': 'boolean'
                }
            }
        },
        'metadata': {
            'type': 'object'
        }
    },
    'additionalProperties': false
};

},{}],117:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Map = {
    'type': 'object',
    'title': 'Chiχ Map',
    'collectionName': 'flows',
    'properties': {
        '_id': {
            'type': 'string'
        },
        'id': {
            'type': 'string',
            'required': false
        },
        'private': {
            'type': 'boolean',
            'required': false
        },
        'main': {
            'type': 'boolean',
            'required': false
        },
        'type': {
            'type': 'string',
            'required': true
        },
        'env': {
            'type': 'string',
            'required': false
        },
        'ns': {
            'type': 'string',
            'required': false
        },
        'name': {
            'type': 'string',
            'required': false
        },
        'title': {
            'type': 'string',
            'required': false
        },
        'description': {
            'type': 'string'
        },
        'provider': {
            'type': 'string'
        },
        'providers': {
            'type': 'object'
        },
        'keywords': {
            'type': 'array'
        },
        'nodeDefinitions': {
            'type': 'object'
        },
        'ports': {
            'type': 'object',
            'properties': {
                'input': {
                    'type': 'object'
                },
                'output': {
                    'type': 'object'
                }
            }
        },
        'nodes': {
            'type': 'array',
            'title': 'Nodes',
            'required': true,
            'items': {
                'type': 'object',
                'title': 'Node',
                'properties': {
                    'id': {
                        'type': 'string',
                        'required': true
                    },
                    'ns': {
                        'type': 'string',
                        'required': true
                    },
                    'name': {
                        'type': 'string',
                        'required': true
                    },
                    'version': {
                        'type': 'string',
                        'required': false
                    },
                    'context': {
                        'type': 'object',
                        'required': false
                    }
                }
            }
        },
        'links': {
            'type': 'array',
            'title': 'Links',
            'required': false,
            'items': {
                'type': 'object',
                'title': 'Link',
                'properties': {
                    'id': {
                        'type': 'string',
                        'required': false
                    },
                    'source': {
                        'type': 'object',
                        'required': true,
                        'properties': {
                            'id': {
                                'type': 'string',
                                'required': true
                            },
                            'port': {
                                'type': 'string',
                                'required': true
                            },
                            'index': {
                                'type': ['string', 'number'],
                                'required': false
                            }
                        }
                    },
                    'target': {
                        'type': 'object',
                        'required': true,
                        'properties': {
                            'id': {
                                'type': 'string',
                                'required': true
                            },
                            'port': {
                                'type': 'string',
                                'required': true
                            },
                            'index': {
                                'type': ['string', 'number'],
                                'required': false
                            }
                        }
                    },
                    'settings': {
                        'persist': {
                            'type': 'boolean',
                            'required': false
                        },
                        'cyclic': {
                            'type': 'boolean',
                            'required': false
                        }
                    }
                }
            }
        }
    },
    'additionalProperties': false
};

},{}],118:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = {
    'type': 'object',
    'title': 'Chiχ Nodes',
    'properties': {
        'title': {
            'type': 'string',
            'required': false
        },
        'description': {
            'type': 'string',
            'required': false
        },
        '_id': {
            'type': 'string'
        },
        'id': {
            'type': 'string'
        },
        'private': {
            'type': 'boolean',
            'required': false
        },
        'name': {
            'type': 'string',
            'required': true
        },
        'ns': {
            'type': 'string',
            'required': true
        },
        'state': {
            'type': 'any'
        },
        'phrases': {
            'type': 'object'
        },
        'env': {
            'type': 'string',
            'enum': ['server', 'browser', 'polymer', 'phonegap']
        },
        'async': {
            'type': 'boolean',
            'required': false
        },
        'dependencies': {
            'type': 'object',
            'required': false
        },
        'provider': {
            'required': false,
            'type': 'string'
        },
        'providers': {
            'required': false,
            'type': 'object'
        },
        'expose': {
            'type': 'array',
            'required': false
        },
        'fn': {
            'type': ['string', 'function'],
            'required': false
        },
        'ports': {
            'type': 'object',
            'required': true,
            'properties': {
                'input': {
                    'type': 'object'
                },
                'output': {
                    'type': 'object'
                },
                'event': {
                    'type': 'object'
                }
            }
        },
        'type': {
            'enum': [
                'node',
                'flow',
                'provider',
                'data',
                'PolymerNode',
                'ReactNode',
                'StateNode'
            ],
            'required': false
        }
    },
    'additionalProperties': false
};

},{}],119:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stage = {
    'type': 'object',
    'title': 'Chiχ Stage',
    'properties': {
        'id': {
            'type': 'string',
            'required': false
        },
        'env': {
            'type': 'string',
            'required': false
        },
        'title': {
            'type': 'string',
            'required': true
        },
        'description': {
            'type': 'string',
            'required': true
        },
        'actors': {
            'type': 'array',
            'title': 'Actors',
            'required': true,
            'items': {
                'type': 'object',
                'title': 'Actor',
                'properties': {
                    'id': {
                        'type': 'string',
                        'required': true
                    },
                    'ns': {
                        'type': 'string',
                        'required': true
                    },
                    'name': {
                        'type': 'string',
                        'required': true
                    },
                    'version': {
                        'type': 'string',
                        'required': false
                    },
                    'context': {
                        'type': 'object',
                        'required': false
                    }
                }
            }
        },
        'links': {
            'type': 'array',
            'title': 'Links',
            'required': true,
            'items': {
                'type': 'object',
                'title': 'Link',
                'properties': {
                    'id': {
                        'type': 'string',
                        'required': false
                    },
                    'source': {
                        'type': 'string',
                        'required': true
                    },
                    'target': {
                        'type': 'string',
                        'required': true
                    },
                    'out': {
                        'type': 'string',
                        'required': false
                    },
                    'in': {
                        'type': 'string',
                        'required': false
                    },
                    'settings': {
                        'persist': {
                            'type': 'boolean',
                            'required': false
                        },
                        'cyclic': {
                            'type': 'boolean',
                            'required': false
                        }
                    }
                }
            }
        }
    }
};

},{}],120:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var events_2 = require("./events");
/**
 *
 * Setting
 *
 * Both used by Connector and xLink
 *
 * @constructor
 * @public
 *
 */
var Setting = /** @class */ (function (_super) {
    __extends(Setting, _super);
    function Setting(settings) {
        var _this = _super.call(this) || this;
        _this.setting = {};
        if (settings) {
            _this.configure(settings);
        }
        return _this;
    }
    Setting.prototype.configure = function (settings) {
        if (settings === void 0) { settings = {}; }
        for (var key in settings) {
            if (settings.hasOwnProperty(key)) {
                this.set(key, settings[key]);
            }
        }
    };
    /**
     * Clears settings
     */
    Setting.prototype.clearSettings = function () {
        this.setting = {};
    };
    /**
     *
     * Set
     *
     * Sets a setting
     *
     * @param {String} name
     * @param {Any} val
     */
    Setting.prototype.set = function (name, val) {
        if (undefined !== val) {
            this.setting[name] = val;
            this.emit(events_2.SettingEvents.CHANGE, this, 'setting', this.setting);
        }
    };
    /**
     *
     * Get
     *
     * Returns the setting or undefined.
     *
     * @returns {Any}
     */
    Setting.prototype.get = function (name) {
        return this.setting ? this.setting[name] : undefined;
    };
    /**
     *
     * Delete a setting
     *
     * @returns {Any}
     */
    Setting.prototype.del = function (name) {
        if (this.setting && this.setting.hasOwnProperty(name)) {
            delete this.setting[name];
        }
    };
    /**
     *
     * Check whether a setting is set.
     *
     * @returns {Any}
     */
    Setting.prototype.has = function (name) {
        return this.setting && this.setting.hasOwnProperty(name);
    };
    return Setting;
}(events_1.EventEmitter));
exports.Setting = Setting;

},{"./events":26,"events":1}],121:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getNodeArgument(args) {
    if (!args || !args.length) {
        throw Error('Not enough arguments.');
    }
    var _a = args[0], node = _a.node, id = _a.id;
    if (!id || typeof id !== 'string') {
        throw Error('id parameter is required.');
    }
    if (!node) {
        throw Error('node parameter is required.');
    }
    if (!node.ns || !node.name) {
        throw Error('Invalid node parameter.');
    }
    return {
        id: id,
        node: node
    };
}
exports.getNodeArgument = getNodeArgument;

},{}],122:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./getNodeArgument"));
__export(require("./mixin"));

},{"./getNodeArgument":121,"./mixin":123}],123:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mixin = function () {
    var mixer = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        mixer[_i] = arguments[_i];
    }
    return function (Base) {
        var seen = [];
        return mixer
            .reverse()
            .reduce(function (Clazz, mix) {
            if (seen.indexOf(mix) === -1) {
                seen.push(mix);
                return mix(Clazz);
            }
            return Clazz;
        }, Base);
    };
};

},{}],124:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ValidationError = /** @class */ (function () {
    function ValidationError(message, id, obj) {
        this.message = message;
        this.id = id;
        this.obj = obj;
        this.name = 'ValidationError';
    }
    return ValidationError;
}());
exports.ValidationError = ValidationError;

},{}],125:[function(require,module,exports){
"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var getPortsIfExists_1 = require("./getPortsIfExists");
var ValidationError_1 = require("./ValidationError");
/**
 *
 * Check if we are not adding a (rotten) flow. Where there are id's which
 * overlap other ids in other flows.
 *
 * This shouldn't happen but just perform this check always.
 *
 */
function _checkIds(flowDefinition, nodeDefinitions) {
    var e_1, _a, e_2, _b;
    var knownIds = [];
    var nodes = {};
    if (flowDefinition.nodes.length > 0 && !nodeDefinitions) {
        throw new Error('Cannot validate without nodeDefinitions');
    }
    try {
        // we will not add the flow, we will show a warning and stop adding the
        // flow.
        for (var _c = __values(flowDefinition.nodes), _d = _c.next(); !_d.done; _d = _c.next()) {
            var node = _d.value;
            // nodeDefinition should be loaded
            if (!node.ns) {
                throw new ValidationError_1.ValidationError("Cannot find nodeDefinition without name: " + node.name);
            }
            if (!nodeDefinitions[node.ns]) {
                throw new ValidationError_1.ValidationError("Cannot find nodeDefinition with namespace: " + node.ns);
            }
            if (!nodeDefinitions[node.ns][node.name]) {
                throw new ValidationError_1.ValidationError("Cannot find nodeDefinition for " + node.ns + ":" + node.name);
            }
            knownIds.push(node.id);
            nodes[node.id] = node;
            // _checkPortDefinitions(nodeDefinitions[node.ns][node.name])
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var _e = __values(flowDefinition.links), _f = _e.next(); !_f.done; _f = _e.next()) {
            var link = _f.value;
            // links should not point to non-existing nodes.
            if (!link.source) {
                throw Error('source not defined');
            }
            if (!link.target) {
                throw Error('target not defined');
            }
            if (knownIds.indexOf(link.source.id) === -1) {
                throw new ValidationError_1.ValidationError('Source node does not exist ' + link.source.id);
            }
            if (knownIds.indexOf(link.target.id) === -1) {
                throw new ValidationError_1.ValidationError('Target node does not exist ' + link.target.id);
            }
            var source = nodes[link.source.id];
            var target = nodes[link.target.id];
            var outputPorts = getPortsIfExists_1.getPortsIfExists('output', source, nodeDefinitions);
            // allow :start
            if (link.source.port[0] !== ':' &&
                !outputPorts[link.source.port]) {
                throw new ValidationError_1.ValidationError([
                    'Process',
                    link.source.id,
                    'has no output port named',
                    link.source.port,
                    '\n\n\tOutput ports available:',
                    '\n\n\t',
                    Object.keys(outputPorts).join(', ')
                ].join(' '));
            }
            var inputPorts = getPortsIfExists_1.getPortsIfExists('input', target, nodeDefinitions);
            if (link.target.port[0] !== ':' &&
                !inputPorts[link.target.port]) {
                throw new ValidationError_1.ValidationError([
                    'Process',
                    link.target.id,
                    'has no input port named',
                    link.target.port,
                    '\n\n\tInput ports available:',
                    '\n\n\t',
                    Object.keys(inputPorts).join(', ')
                ].join(' '));
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return true;
}
exports._checkIds = _checkIds;

},{"./ValidationError":124,"./getPortsIfExists":126}],126:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ValidationError_1 = require("./ValidationError");
function getPortsIfExists(type, node, nodeDefinitions) {
    var nodeDefinition = nodeDefinitions[node.ns][node.name];
    if (!nodeDefinition) {
        throw new ValidationError_1.ValidationError("NodeDefinitions " + node.ns + ":" + node.name + " does not exist.");
    }
    if (!nodeDefinition.ports ||
        Object.keys(nodeDefinition.ports).length === 0) {
        throw new ValidationError_1.ValidationError("NodeDefinitions " + node.ns + ":" + node.name + " has no ports.");
    }
    var ports = nodeDefinition.ports[type];
    if (!ports || Object.keys(ports).length === 0) {
        throw new ValidationError_1.ValidationError("NodeDefinitions " + node.ns + ":" + node.name + " has no " + type + " ports.");
    }
    return ports;
}
exports.getPortsIfExists = getPortsIfExists;

},{"./ValidationError":124}],127:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _checkIds_1 = require("./_checkIds");
var validateData_1 = require("./validateData");
exports.validateData = validateData_1.validateData;
var validateFlow_1 = require("./validateFlow");
exports.validateFlow = validateFlow_1.validateFlow;
var validateLink_1 = require("./validateLink");
exports.validateLink = validateLink_1.validateLink;
var validateNodeDefinition_1 = require("./validateNodeDefinition");
exports.validateNodeDefinition = validateNodeDefinition_1.validateNodeDefinition;
exports.validate = {
    data: validateData_1.validateData,
    flow: validateFlow_1.validateFlow,
    link: validateLink_1.validateLink,
    nodeDefinition: validateNodeDefinition_1.validateNodeDefinition,
    nodeDefinitions: _checkIds_1._checkIds
};

},{"./_checkIds":125,"./validateData":128,"./validateFlow":129,"./validateLink":130,"./validateNodeDefinition":131}],128:[function(require,module,exports){
"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var instanceOf = require("instance-of");
var lodash_1 = require("lodash");
function validateData(type, data) {
    var e_1, _a;
    if (Array.isArray(type)) {
        try {
            for (var type_1 = __values(type), type_1_1 = type_1.next(); !type_1_1.done; type_1_1 = type_1.next()) {
                var _type = type_1_1.value;
                if (validateData(_type, data)) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (type_1_1 && !type_1_1.done && (_a = type_1.return)) _a.call(type_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    }
    switch (type) {
        case 'string':
            return typeof data === 'string';
        case 'array':
            return Object.prototype.toString.call(data) === '[object Array]';
        case 'integer':
        case 'number':
            return Object.prototype.toString.call(data) === '[object Number]';
        case 'null':
            type = type.charAt(0).toUpperCase() + type.slice(1);
            return Object.prototype.toString.call(data) === '[object ' + type + ']';
        case 'boolean':
        case 'bool':
            return data === true || data === false || data === 0 || data === 1;
        case 'any':
            return true;
        case 'object':
            if (lodash_1.isPlainObject(data)) {
                return true;
            }
            return instanceOf(data, type);
        case 'function':
            return true;
        default:
            return instanceOf(data, type);
    }
}
exports.validateData = validateData;

},{"instance-of":149,"lodash":157}],129:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsongate = require("json-gate");
var map_1 = require("../schemas/map");
var mapSchema = jsongate.createSchema(map_1.Map);
/**
 * Validates the flow
 */
function validateFlow(flowDefinition) {
    mapSchema.validate(flowDefinition);
    // _checkIds(flow, nodeDefinitions)
}
exports.validateFlow = validateFlow;

},{"../schemas/map":117,"json-gate":153}],130:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsongate = require("json-gate");
var link_1 = require("../schemas/link");
var linkSchema = jsongate.createSchema(link_1.Link);
function validateLink(link) {
    linkSchema.validate(link);
}
exports.validateLink = validateLink;

},{"../schemas/link":116,"json-gate":153}],131:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsongate = require("json-gate");
var node_1 = require("../schemas/node");
var nodeSchema = jsongate.createSchema(node_1.Node);
/**
 *
 * Validates a nodeDefinition
 *
 */
function validateNodeDefinition(nodeDefinition) {
    nodeSchema.validate(nodeDefinition);
    // _checkIds(flow, nodeDefinitions)
    // make sure the id's are correct
}
exports.validateNodeDefinition = validateNodeDefinition;

},{"../schemas/node":118,"json-gate":153}],132:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("events");
/**
 *
 * IO Box
 *
 * @param {String} name
 */
var IOBox = /** @class */ (function (_super) {
    __extends(IOBox, _super);
    function IOBox(name, args, returns) {
        var _this = _super.call(this) || this;
        // to ensure correct order
        _this._keys = [];
        _this.name = 'UNNAMED';
        _this.args = {};
        _this.returns = [];
        _this.code = null;
        if (name) {
            _this.name = name;
        }
        _this.setup(args, returns);
        return _this;
    }
    IOBox.prototype.create = function (name, args, returns) {
        return new IOBox(name, args, returns);
    };
    /**
     *
     * Setup
     *
     * @param {Array} args
     * @param {Array} returns
     */
    IOBox.prototype.setup = function (args, returns) {
        if (args === void 0) { args = []; }
        if (returns === void 0) { returns = []; }
        var i;
        // setup the empty input arguments object
        for (i = 0; i < args.length; i++) {
            this.addArg(args[i], undefined);
        }
        for (i = 0; i < returns.length; i++) {
            this.addReturn(returns[i]);
        }
    };
    /**
     *
     * Used to access the properties at the top level,
     * but still be able to get all relevant arguments
     * at once using this.args
     *
     * @param {String} key
     * @param {Mixed} initial
     */
    IOBox.prototype.addArg = function (key, initial) {
        var _a;
        Object.defineProperty(this, key, {
            set: function (val) {
                this.args[key] = val;
            },
            get: function () {
                return this.args[key];
            }
        });
        this._keys.push(key);
        Object.assign(this, (_a = {}, _a[key] = initial, _a)); // can be undefined
    };
    IOBox.prototype.addReturn = function (r) {
        if (this.returns.indexOf(r) === -1) {
            if (this._keys.indexOf(r) !== -1) {
                this.returns.push(r);
            }
            else {
                throw Error([
                    'Output `',
                    r,
                    '` is not one of',
                    this._keys.join(', ')
                ].join(' '));
            }
        }
    };
    /**
     *
     * Sets a property of the sandbox.
     * Because the keys determine what arguments will
     * be generated for the function, it is important
     * we keep some kind of control over what is set.
     *
     * @param {String} key
     * @param {Mixed} value
     *
     */
    IOBox.prototype.set = function (key, value) {
        if (this.args.hasOwnProperty(key)) {
            this.args[key] = value;
        }
        else {
            throw new Error([
                'Will not set unknown property',
                key
            ].join(' '));
        }
    };
    /**
     *
     * Compiles and returns the generated function.
     *
     * @param {String} fn
     * @param {Boolean} asObject
     * @return {String}
     */
    IOBox.prototype.compile = function (func, asObject) {
        if (!this.code) {
            if (typeof func !== 'string') {
                throw Error('Function parameter expected');
            }
            this.generate(func ? func.trim() : func, asObject);
        }
        this.fn = new Function(this.code)();
        return this.fn;
    };
    /**
     *
     * Fill with a precompiled function
     *
     * Return type in this case is determined by compiled function
     *
     * @param {any} fn
     * @return {any}
     */
    IOBox.prototype.fill = function (fn) {
        // argument signature check?
        this.fn = fn;
        return this.fn;
    };
    /**
     *
     * Wraps the function in yet another function
     *
     * This way it's possible to get the original return.
     *
     * @param {String} fn
     * @return {String}
     */
    IOBox.prototype._returnWrap = function (fn) {
        return ['function() {', fn, '}.call(this)'].join('\n');
    };
    /**
     *
     * Clear generated code
     */
    IOBox.prototype.clear = function () {
        this.code = null;
    };
    /**
     *
     * Generates the function.
     *
     * This can be used directly
     *
     * @param {String} fn
     * @param {Boolean} asObject
     * @return {String}
     */
    IOBox.prototype.generate = function (fn, asObject) {
        if (asObject === void 0) { asObject = false; }
        this.code = [
            'return function ',
            this.name,
            '(',
            this._keys.join(','),
            ') {\n',
            'var r = ',
            this._returnWrap(fn),
            '; return ',
            asObject ? this._asObject() : this._asArray(),
            '; }'
        ].join('');
        return this.code;
    };
    /**
     *
     * Return output as array.
     *
     * @return {String}
     */
    IOBox.prototype._asArray = function () {
        return '[' + this.returns.join(',') + ',r]';
    };
    /**
     *
     * Return output as object.
     *
     * @return {String}
     */
    IOBox.prototype._asObject = function () {
        var _return = [];
        for (var i = 0; i < this.returns.length; i++) {
            _return.push(this.returns[i] + ':' + this.returns[i]);
        }
        _return.push('return:' + 'r');
        return '{' + _return.join(',') + '}';
    };
    /**
     *
     * Renders the function to string.
     *
     * @return {String}
     */
    IOBox.prototype.toString = function () {
        if (this.fn)
            return this.fn.toString();
        return '';
    };
    /**
     *
     * Runs the generated function
     *
     * @param {Mixed} bind   Context to bind to the function
     * @return {Mixed}
     */
    IOBox.prototype.run = function (bind) {
        var v = [];
        for (var k in this.args) {
            if (this.args.hasOwnProperty(k)) {
                v[this._keys.indexOf(k)] = this.args[k];
            }
            else {
                throw new Error('unknown input ' + k);
            }
        }
        if (!this.fn) {
            throw Error(this.name + "(" + this._keys + "): fn body is not set.");
        }
        // returns the output, format depends on the `compile` step
        return this.fn.apply(bind, v);
    };
    return IOBox;
}(events.EventEmitter));
exports.IOBox = IOBox;

},{"events":1}],133:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./lib/index"));
__export(require("./loader"));
__export(require("./util/index"));

},{"./lib/index":136,"./loader":137,"./util/index":140}],134:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
var DependencyManager = /** @class */ (function () {
    function DependencyManager() {
        this.dependencies = {};
    }
    DependencyManager.prototype.parseDependencies = function (nodeDefinition) {
        if (nodeDefinition.dependencies) {
            this.dependencies = util_1.parseDependencies(this.dependencies, nodeDefinition.dependencies);
        }
    };
    DependencyManager.prototype.setDependencies = function (dependencies) {
        if (this.hasDependencies()) {
            throw Error("Dependencies already set, only use this method to prepopulate the dependencies.");
        }
        this.dependencies = dependencies;
    };
    /**
     *
     * Get dependencies for the type given.
     *
     * If no type is given will return all dependencies.
     *
     * @param {string} type
     * @public
     */
    DependencyManager.prototype.getDependencies = function (type) {
        if (type) {
            if (this.dependencies.hasOwnProperty(type)) {
                return this.dependencies[type];
            }
            return {};
        }
        return this.dependencies;
    };
    /**
     *
     * Checks whether there are any dependencies.
     *
     * If no type is given it will tell whether there are *any* dependencies
     *
     * @param {string} type
     * @public
     **/
    DependencyManager.prototype.hasDependencies = function (type) {
        if (type) {
            if (this.dependencies.hasOwnProperty(type) &&
                typeof this.dependencies[type] === 'object') {
                return Boolean(Object.keys(this.dependencies[type]).length);
            }
        }
        else {
            for (var _type in this.dependencies) {
                if (this.dependencies.hasOwnProperty(_type)) {
                    if (this.hasDependencies(_type)) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    return DependencyManager;
}());
exports.DependencyManager = DependencyManager;

},{"../util":140}],135:[function(require,module,exports){
"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var forOf = require("object-forof");
var util_1 = require("../util");
var NodeDefinitionManager = /** @class */ (function () {
    function NodeDefinitionManager(dependencyManager) {
        /**
         *
         * Format:
         *
         * Keeps track of all known nodeDefinitions.
         *
         * {
         *  'http://....': { // url in this case is the identifier
         *
         *    fs: {
         *       readFile:  <definition>
         *       writeFile: <definition>
         *    }
         *
         *  }
         *
         * }
         *
         */
        this.nodeDefinitions = {};
        this.dependencyManager = dependencyManager;
    }
    NodeDefinitionManager.prototype.initProviderMap = function (flow, defaultProvider) {
        if (!flow.providers) {
            flow.providers = {};
        }
        if (!flow.providers['@']) {
            flow.providers['@'] = { url: defaultProvider };
        }
        for (var key in flow.providers) {
            if (flow.providers.hasOwnProperty(key)) {
                var provider = flow.providers[key];
                if (util_1.isRemoteProvider(provider)) {
                    if (!this.nodeDefinitions.hasOwnProperty(provider.url)) {
                        this.nodeDefinitions[provider.url] = {};
                    }
                }
                else if (util_1.isFSProvider(provider)) {
                    if (!this.nodeDefinitions.hasOwnProperty(provider.path)) {
                        this.nodeDefinitions[provider.path] = {};
                    }
                }
            }
        }
    };
    /**
     *
     * Add node definitions
     *
     * Used to `statically` add nodeDefinitions.
     *
     * @param {String} identifier
     * @param {Object} nodeDefs
     * @api public
     */
    NodeDefinitionManager.prototype.addNodeDefinitions = function (identifier, nodeDefs) {
        var e_1, _a;
        var _this = this;
        if (Array.isArray(nodeDefs)) {
            try {
                for (var nodeDefs_1 = __values(nodeDefs), nodeDefs_1_1 = nodeDefs_1.next(); !nodeDefs_1_1.done; nodeDefs_1_1 = nodeDefs_1.next()) {
                    var nodeDef = nodeDefs_1_1.value;
                    this.addNodeDefinition(identifier, nodeDef);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (nodeDefs_1_1 && !nodeDefs_1_1.done && (_a = nodeDefs_1.return)) _a.call(nodeDefs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            forOf(function (_ns, _name, nodeDefinition) {
                _this.addNodeDefinition(identifier, nodeDefinition);
            }, nodeDefs);
        }
    };
    /**
     *
     * Add a node definition
     *
     * @param {String} identifier
     * @param {Object} nodeDef
     * @api public
     */
    NodeDefinitionManager.prototype.addNodeDefinition = function (identifier, nodeDef) {
        if (!nodeDef.hasOwnProperty('ns')) {
            throw new Error([
                'Nodefinition for',
                identifier,
                'lacks an ns property'
            ].join(' '));
        }
        if (!nodeDef.hasOwnProperty('name')) {
            throw new Error([
                'Nodefinition for',
                identifier,
                'lacks an name property'
            ].join(' '));
        }
        // store the provider url along with the nodeDefinition
        // Needed for fetching back from storage.
        nodeDef.provider = identifier;
        if (nodeDef.type === 'flow') {
            if (!nodeDef.providers || Object.keys(nodeDef.providers).length === 0) {
                nodeDef.providers = {
                    '@': {
                        url: identifier
                    }
                };
            }
        }
        else {
            this.dependencyManager.parseDependencies(nodeDef);
        }
        this.setNodeDefinition(identifier, nodeDef);
    };
    NodeDefinitionManager.prototype.setNodeDefinitions = function (nodeDefinitions) {
        if (this.hasNodeDefinitions()) {
            throw Error('Node Definitions already set, only use this method to prepopulate the nodeDefinitions');
        }
        this.nodeDefinitions = nodeDefinitions;
    };
    NodeDefinitionManager.prototype.hasNodeDefinitions = function (provider) {
        if (provider) {
            return Boolean(this.nodeDefinitions[provider]);
        }
        return Object.keys(this.nodeDefinitions).length > 0;
    };
    NodeDefinitionManager.prototype.setNodeDefinition = function (provider, nodeDefinition) {
        var ns = nodeDefinition.ns, name = nodeDefinition.name;
        _.set(this.nodeDefinitions, [provider, ns, name], nodeDefinition);
    };
    /**
     *
     * Check whether we have the definition
     *
     * @param {String} providerUrl
     * @param {String} ns
     * @param {String} name
     * @api public
     */
    NodeDefinitionManager.prototype.hasNodeDefinition = function (providerUrl, ns, name) {
        return this.nodeDefinitions.hasOwnProperty(providerUrl) &&
            this.nodeDefinitions[providerUrl].hasOwnProperty(ns) &&
            this.nodeDefinitions[providerUrl][ns].hasOwnProperty(name);
    };
    /**
     * Loads the NodeDefinition for a node.
     *
     * In order to do so each node must know the provider url it was loaded from.
     *
     * This is normally not stored directly into flows, but the flow is saved with the namespaces in use.
     *
     * TODO: this really should just be (provider, name, ns, version) else use the load method.
     */
    NodeDefinitionManager.prototype.getNodeDefinition = function (node, flow) {
        var definition = this.loadNodeDefinition(node, flow);
        // merge the schema of the internal node.
        if (definition.type === 'flow') {
            this.mergeSchema(definition); // in place
        }
        return definition;
    };
    NodeDefinitionManager.prototype.loadNodeDefinition = function (node, flow) {
        var location;
        var provider;
        if (node.provider &&
            util_1.isUri(node.provider)) {
            // it's already an url
            location = node.provider;
        }
        else if (!node.provider && (!flow || !flow.providers)) {
            // for direct additions (only @ is possible)
            location = '@';
        }
        else {
            if (!flow) {
                throw Error('loadNodeDefinition needs a map or a node with a full provider url');
            }
            if (!flow.providers) {
                throw Error('loadNodeDefinition expects flow to container .providers');
            }
            if (node.provider) {
                // 'x': ..
                provider = flow.providers[node.provider];
            }
            else {
                provider = flow.providers['@'];
            }
            // fix: find provider by path or url, has to do with provider
            // already resolved (sub.sub.graphs)
            if (!provider) {
                for (var key in flow.providers) {
                    if (_.get(flow, ['providers', key, 'url']) === node.provider ||
                        _.get(flow, ['providers', key, 'path']) === node.provider) {
                        provider = flow.providers[key];
                    }
                }
                if (!provider) {
                    throw Error('unable to find provider');
                }
            }
            if (provider.hasOwnProperty('path')) {
                location = provider.path;
            }
            else if (provider.hasOwnProperty('url')) {
                location = provider.url;
            }
            else {
                throw new Error('Do not know how to handle provider');
            }
            node.provider = location;
        }
        if (!this.hasNodeDefinition(location, node.ns, node.name)) {
            // not sure.. node has a full url.
            // but it's not loaded, then we ask to load the full map.
            // which works if provider is x but not if it's already expanded.
            console.log("NodeDefinition " + location + "->" + node.ns + ":" + node.name + " is not available.");
            throw Error('Should load node definition');
            // console.error('Should load node definition')
            // proceed, but this is a bug, load() was activate before.
            // but also hardly does anything in the context of just Loader.
            // .. Behavior should be a hard fail, because the loader
            // must be instructed to preload everything either using
            // the async functions preload or load
            /*
               await this.load(flow, function () {
                 callback(nodeDefinitions[location][node.ns][node.name])
               })

               return false
             */
        }
        return this.nodeDefinitions[location][node.ns][node.name];
    };
    NodeDefinitionManager.prototype.getNodeDefinitionFrom = function (provider, ns, name) {
        if (this.hasNodeDefinition(provider, ns, name)) {
            return this.nodeDefinitions[provider][ns][name];
        }
        throw Error("Unable to find node definition for " + ns + ":" + name);
    };
    NodeDefinitionManager.prototype.saveNodeDefinition = function (_providerLocation, _nodeDefinition) {
        throw new Error([
            this.constructor.name,
            'must implement a save method'
        ].join(' '));
    };
    /**
     * Get Nodedefinitions
     *
     * Optionally with a provider url so it returns only the node definitions
     * at that provider.
     *
     * @param {String} provider (Optional)
     */
    NodeDefinitionManager.prototype.getNodeDefinitions = function (provider) {
        if (provider) {
            return this.nodeDefinitions[provider];
        }
        else {
            return this.nodeDefinitions;
        }
    };
    /**
     * Test whether all nodes used by this flow are resolvable
     *
     * @param {FlowDefinition} flow
     * @returns {boolean}
     */
    NodeDefinitionManager.prototype.isResolved = function (flow) {
        var seen = [];
        for (var j = 0; j < flow.nodes.length; j++) {
            var node = flow.nodes[j];
            if (!this.hasNodeDefinition('@', node.ns, node.name)) {
                return false;
            }
            var nodeDefinition = this.getNodeDefinitionFrom('@', node.ns, node.name);
            var identifier = nodeDefinition.ns + ":" + nodeDefinition.name;
            if (nodeDefinition.type === 'flow' &&
                seen.indexOf(identifier) === -1) {
                seen.push(identifier);
                return this.isResolved(nodeDefinition);
            }
        }
        return true;
    };
    NodeDefinitionManager.prototype.getUnresolved = function (flow) {
        var self = this;
        var unresolved = [];
        var seen = [];
        function resolveDefinitions(flow) {
            for (var j = 0; j < flow.nodes.length; j++) {
                var node = flow.nodes[j];
                if (!self.hasNodeDefinition('@', node.ns, node.name)) {
                    unresolved.push(node);
                }
                else {
                    var nodeDefinition = self.getNodeDefinitionFrom('@', node.ns, node.name);
                    var identifier = nodeDefinition.ns + ":" + nodeDefinition.name;
                    if (nodeDefinition.type === 'flow' &&
                        seen.indexOf(identifier) === -1) {
                        seen.push(identifier);
                        resolveDefinitions(nodeDefinition);
                    }
                }
            }
        }
        resolveDefinitions(flow);
        return unresolved;
    };
    NodeDefinitionManager.prototype.mergeSchema = function (graph) {
        var _this = this;
        forOf(function (type, port, externalPort) {
            if (externalPort.hasOwnProperty('nodeId')) {
                // TODO: should go recursive if internal node is a flow, in able to get the correct type.
                var internalDef = _this.getNodeDefinition(util_1.findNodeWithinGraph(externalPort.nodeId, graph), graph);
                if (!_.has(internalDef, ['ports', type, externalPort.name])) {
                    throw Error("External Port points to non-existent internal port");
                }
                var copy = JSON.parse(JSON.stringify(_.get(internalDef, ['ports', type, externalPort.name])));
                copy.title = externalPort.title;
                copy.name = externalPort.name;
                copy.nodeId = externalPort.nodeId;
                _.set(graph, ['ports', type, port], copy);
            }
            else {
                // not pointing to an internal node. :start etc.
            }
        }, graph.ports);
    };
    return NodeDefinitionManager;
}());
exports.NodeDefinitionManager = NodeDefinitionManager;

},{"../util":140,"lodash":157,"object-forof":161}],136:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./DependencyManager"));
__export(require("./NodeDefinitionManager"));

},{"./DependencyManager":134,"./NodeDefinitionManager":135}],137:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("events");
var lib_1 = require("./lib");
var util_1 = require("./util");
/**
 * Loader
 *
 * This is the base loader class
 * Ít can be used to implement a definition loader
 * for Chix
 *
 * @api public
 * @author Rob Halff <rob.halff@gmail.com>
 * @constructor
 */
var Loader = /** @class */ (function (_super) {
    __extends(Loader, _super);
    function Loader() {
        var _this = _super.call(this) || this;
        // npm loader returns a different source
        _this.getNodeSource = Loader.prototype.getNodeDefinitionFrom;
        _this.dependencyManager = new lib_1.DependencyManager();
        _this.nodeDefinitionManager = new lib_1.NodeDefinitionManager(_this.dependencyManager);
        return _this;
    }
    /**
     * This is the main method all child classes should implement.
     *
     * @param {FlowDefinition[]} _flows
     * @param {boolean} _update
     * @returns {Promise<LoaderResponse>}
     */
    Loader.prototype.load = function (_flows, _update) {
        return __awaiter(this, void 0, void 0, function () {
            var flows, workload;
            return __generator(this, function (_a) {
                flows = Array.isArray(_flows) ? _flows : [_flows];
                workload = this.getWorkLoad(flows, '@', false);
                if (workload.length) {
                    throw Error('Default loader expects all nodeDefinitions to be preloaded');
                }
                return [2 /*return*/, {
                        dependencies: this.getDependencies(),
                        nodeDefinitions: this.getNodeDefinitions()
                    }];
            });
        });
    };
    Loader.prototype.loadNodeDefinitionFrom = function (provider, ns, name) {
        return __awaiter(this, void 0, void 0, function () {
            var loadNodeResult, nodeDefinition, flow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadNode({
                            ns: ns,
                            name: name,
                            url: provider.replace('{ns}', ns).replace('{name}', name),
                            providerLocation: provider
                        })];
                    case 1:
                        loadNodeResult = _a.sent();
                        nodeDefinition = loadNodeResult.nodeDef;
                        // res.providerLocation
                        // provide a way to getDependencies for only this nodeDefinition.
                        // parseDependencies will just update *all* dependencies
                        // so in case if the nodeDefinition is a flow, it's just a method to traverse
                        // all dependencies and return that.
                        if (nodeDefinition.dependencies) {
                            this.dependencyManager.parseDependencies(nodeDefinition);
                        }
                        this.nodeDefinitionManager.setNodeDefinition(provider, nodeDefinition);
                        if (!(nodeDefinition.type === 'flow')) return [3 /*break*/, 3];
                        flow = nodeDefinition;
                        // Note: returns the full state, which in this case can be ignored.
                        return [4 /*yield*/, this.load([flow])];
                    case 2:
                        // Note: returns the full state, which in this case can be ignored.
                        _a.sent();
                        return [2 /*return*/, {
                                nodeDefinition: nodeDefinition,
                                dependencies: util_1.loadDependencies(nodeDefinition, this.nodeDefinitionManager.getNodeDefinitions())
                            }];
                    case 3: return [2 /*return*/, {
                            nodeDefinition: nodeDefinition,
                            dependencies: util_1.loadDependencies(nodeDefinition, this.nodeDefinitionManager.getNodeDefinitions())
                        }];
                }
            });
        });
    };
    /**
     * Loader itself only expects preloaded nodes.
     * There is no actual load going on.
     *
     * Remote loader *does* implement loading.
     *
     * @param {ProviderDef} providerDef
     * @returns {Promise<{nodeDef: NodeDefinition | {}}>}
     */
    Loader.prototype.loadNode = function (providerDef) {
        return __awaiter(this, void 0, void 0, function () {
            var providerLocation, ns, name, nodeDef;
            return __generator(this, function (_a) {
                providerLocation = providerDef.providerLocation, ns = providerDef.ns, name = providerDef.name;
                nodeDef = this.nodeDefinitionManager.getNodeDefinitionFrom(
                // provider,
                providerLocation, ns, name);
                if (nodeDef) {
                    return [2 /*return*/, {
                            providerLocation: providerLocation,
                            nodeDef: nodeDef
                        }];
                }
                throw Error("Could not load node " + ns + ":" + name + " from " + providerLocation);
            });
        });
    };
    /**
     * loop the nodes, detect what provider they expect
     * if they do not have a provider we will use the default,
     * if the flow has set it's own default we will use that.
     * the default within a flow is the one without namespace
     */
    Loader.prototype.getWorkLoad = function (flows, defaultProvider, update) {
        var _this = this;
        var willLoad = [];
        var workload = [];
        flows.forEach(function (flow) {
            var e_1, _a;
            // Todo for subflows this runs every time.
            _this.nodeDefinitionManager.initProviderMap(flow, defaultProvider);
            try {
                for (var _b = __values(flow.nodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    var providerLocation = void 0;
                    var remote
                    // select the name e.g. x
                    = void 0;
                    // select the name e.g. x
                    var provider = node.provider ? node.provider : '@';
                    if (!util_1.isProviderHandle(provider)) {
                        // it's already an url or path
                        providerLocation = provider;
                        remote = true;
                    }
                    else {
                        if (!flow.providers || !flow.providers.hasOwnProperty(provider)) {
                            throw Error([
                                'Node', node.ns + ':' + node.name,
                                'refers to unknown provider',
                                provider,
                                '\n\tplease specify it in the providers section'
                            ].join(' '));
                        }
                        // Within the flow detect what url x is about
                        if (flow.providers[provider].hasOwnProperty('path')) {
                            // hacked in, remote also takes care of local for now.
                            // just refactor this later on.
                            providerLocation = flow.providers[provider].path;
                            remote = false;
                        }
                        else if (flow.providers[provider].hasOwnProperty('url')) {
                            providerLocation = flow.providers[provider].url;
                            remote = true;
                        }
                        else {
                            throw Error("Do not know how to handle: " + provider);
                        }
                    }
                    if (!_this.nodeDefinitionManager.hasNodeDefinition(providerLocation, node.ns, node.name) && !update) {
                        var location_1 = providerLocation
                            .replace('{ns}', node.ns)
                            .replace('{name}', node.name);
                        // Check if it carries the info for our node also.
                        if (willLoad.indexOf(location_1) === -1) {
                            willLoad.push(location_1);
                            if (remote) {
                                workload.push({
                                    url: location_1,
                                    ns: node.ns,
                                    name: node.name,
                                    providerLocation: providerLocation
                                });
                            }
                            else {
                                workload.push({
                                    path: location_1,
                                    ns: node.ns,
                                    name: node.name,
                                    providerLocation: providerLocation
                                });
                            }
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        return workload;
    };
    // proxy nodeDefinitionManager methods
    Loader.prototype.addNodeDefinitions = function (identifier, nodeDefs) {
        return this.nodeDefinitionManager.addNodeDefinitions(identifier, nodeDefs);
    };
    Loader.prototype.addNodeDefinition = function (identifier, nodeDef) {
        return this.nodeDefinitionManager.addNodeDefinition(identifier, nodeDef);
    };
    Loader.prototype.hasNodeDefinition = function (providerUrl, ns, name) {
        return this.nodeDefinitionManager.hasNodeDefinition(providerUrl, ns, name);
    };
    Loader.prototype.getNodeDefinition = function (node, flow) {
        return this.nodeDefinitionManager.getNodeDefinition(node, flow);
    };
    Loader.prototype.getNodeDefinitionFrom = function (provider, ns, name) {
        return this.nodeDefinitionManager.getNodeDefinitionFrom(provider, ns, name);
    };
    Loader.prototype.saveNodeDefinition = function (_providerLocation, _nodeDefinition) {
        throw new Error([
            this.constructor.name,
            'must implement a save method'
        ].join(' '));
    };
    Loader.prototype.getNodeDefinitions = function (provider) {
        return this.nodeDefinitionManager.getNodeDefinitions(provider);
    };
    Loader.prototype.setNodeDefinitions = function (nodeDefinitions) {
        return this.nodeDefinitionManager.setNodeDefinitions(nodeDefinitions);
    };
    Loader.prototype.hasDependencies = function (type) {
        return this.dependencyManager.hasDependencies(type);
    };
    Loader.prototype.getDependencies = function (type) {
        return this.dependencyManager.getDependencies(type);
    };
    Loader.prototype.setDependencies = function (dependencies) {
        return this.dependencyManager.setDependencies(dependencies);
    };
    return Loader;
}(events.EventEmitter));
exports.Loader = Loader;

},{"./lib":136,"./util":140,"events":1}],138:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var isUri_1 = require("./isUri");
var parseDependencies_1 = require("./parseDependencies");
/**
 * Recursively returns the requires.
 *
 * Assumes the map, node is already loaded.
 *
 * Note: Will break if node.provider is an url already.
 *
 * @private
 */
function collectDependencies(dependencies, flow, nodeDefinitions) {
    flow.nodes.forEach(function (node) {
        var provider;
        if (node.provider && isUri_1.isUri(node.provider)) {
            provider = node.provider;
        }
        else {
            var providerHandle = node.provider || '@';
            if (flow.providers && flow.providers[providerHandle]) {
                provider =
                    flow.providers[providerHandle].url ||
                        flow.providers[providerHandle].path;
            }
            else {
                throw Error('Flow does not contain a providers section.');
            }
        }
        var nodeDefinition = _.get(nodeDefinitions, [provider, node.ns, node.name]);
        if (nodeDefinition.type === 'flow') {
            dependencies = collectDependencies(dependencies, nodeDefinition, nodeDefinitions);
        }
        else {
            if (nodeDefinition.dependencies) {
                dependencies = parseDependencies_1.parseDependencies(dependencies, nodeDefinition.dependencies);
            }
        }
    });
    return dependencies;
}
exports.collectDependencies = collectDependencies;

},{"./isUri":144,"./parseDependencies":146,"lodash":157}],139:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function findNodeWithinGraph(nodeId, graph) {
    for (var i = 0; i < graph.nodes.length; i++) {
        if (nodeId === graph.nodes[i].id) {
            return graph.nodes[i];
        }
    }
    throw Error('Could not find internal node within graph');
}
exports.findNodeWithinGraph = findNodeWithinGraph;

},{}],140:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./collectDependencies"));
__export(require("./findNodeWithinGraph"));
__export(require("./isFSProvider"));
__export(require("./isProviderHandle"));
__export(require("./isRemoteProvider"));
__export(require("./isUri"));
__export(require("./loadDependencies"));
__export(require("./parseDependencies"));

},{"./collectDependencies":138,"./findNodeWithinGraph":139,"./isFSProvider":141,"./isProviderHandle":142,"./isRemoteProvider":143,"./isUri":144,"./loadDependencies":145,"./parseDependencies":146}],141:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isFSProvider(provider) {
    return provider.path !== undefined;
}
exports.isFSProvider = isFSProvider;

},{}],142:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isProviderHandle(provider) {
    return /^(\w|@)+$/.test(provider);
}
exports.isProviderHandle = isProviderHandle;

},{}],143:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isRemoteProvider(provider) {
    return provider.url !== undefined;
}
exports.isRemoteProvider = isRemoteProvider;

},{}],144:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isUri(value) {
    return value.indexOf('://') >= 0;
}
exports.isUri = isUri;

},{}],145:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var collectDependencies_1 = require("./collectDependencies");
var parseDependencies_1 = require("./parseDependencies");
/**
 * Get the dependencies for a certain provider.
 *
 * @param definition
 * @param nodeDefinitions
 * @returns {Dependencies}
 */
function loadDependencies(definition, nodeDefinitions) {
    var dependencies = {};
    if (definition.type === 'flow') {
        dependencies = collectDependencies_1.collectDependencies(dependencies, definition, nodeDefinitions);
        return dependencies;
    }
    if (definition.dependencies) {
        dependencies = parseDependencies_1.parseDependencies(dependencies, definition.dependencies);
    }
    return dependencies;
}
exports.loadDependencies = loadDependencies;

},{"./collectDependencies":138,"./parseDependencies":146}],146:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var forOf = require("object-forof");
function parseDependencies(dependencies, nodeDependencies) {
    if (nodeDependencies) {
        forOf(function (type, dependency, value) {
            if (type === 'npm') {
                if (value !== 'builtin') {
                    /*
                    requireString = r + '@' + nodeDef.dependencies.npm[r]
                    if (requires.indexOf(requireString) === -1) {
                      requires.push(requireString)
                    }
                    */
                    if (!dependencies.npm) {
                        dependencies.npm = {};
                    }
                    // TODO: check for duplicates and pick the latest one.
                    // dependencies.npm[dependency] = nodeDef.dependencies.npm[dependency]
                    dependencies.npm[dependency] = value;
                }
            }
            else {
                console.warn("Unsupported package manager: " + type);
            }
        }, nodeDependencies);
    }
    return dependencies;
}
exports.parseDependencies = parseDependencies;

},{"object-forof":161}],147:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))
},{"./debug":148,"_process":3}],148:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":158}],149:[function(require,module,exports){
module.exports = function InstanceOf(obj, type) {
  if(obj === null) return false;
  if(type === 'array') type = 'Array';
  var t = typeof obj;
  if(t === 'object') {
    if(type.toLowerCase() === t) return true; // Object === object
    if(obj.constructor.name === type) return true;
    if(obj.constructor.toString().match(/function (\w*)/)[1] === type) return true;
    return InstanceOf(Object.getPrototypeOf(obj), type);
  } else {
    return t === type;
  }
};

},{}],150:[function(require,module,exports){
(function (process,global){
/*
 * [js-sha1]{@link https://github.com/emn178/js-sha1}
 *
 * @version 0.6.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
/*jslint bitwise: true */
(function() {
  'use strict';

  var root = typeof window === 'object' ? window : {};
  var NODE_JS = !root.JS_SHA1_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  }
  var COMMON_JS = !root.JS_SHA1_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD = typeof define === 'function' && define.amd;
  var HEX_CHARS = '0123456789abcdef'.split('');
  var EXTRA = [-2147483648, 8388608, 32768, 128];
  var SHIFT = [24, 16, 8, 0];
  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

  var blocks = [];

  var createOutputMethod = function (outputType) {
    return function (message) {
      return new Sha1(true).update(message)[outputType]();
    };
  };

  var createMethod = function () {
    var method = createOutputMethod('hex');
    if (NODE_JS) {
      method = nodeWrap(method);
    }
    method.create = function () {
      return new Sha1();
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(type);
    }
    return method;
  };

  var nodeWrap = function (method) {
    var crypto = eval("require('crypto')");
    var Buffer = eval("require('buffer').Buffer");
    var nodeMethod = function (message) {
      if (typeof message === 'string') {
        return crypto.createHash('sha1').update(message, 'utf8').digest('hex');
      } else if (message.constructor === ArrayBuffer) {
        message = new Uint8Array(message);
      } else if (message.length === undefined) {
        return method(message);
      }
      return crypto.createHash('sha1').update(new Buffer(message)).digest('hex');
    };
    return nodeMethod;
  };

  function Sha1(sharedMemory) {
    if (sharedMemory) {
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
      blocks[4] = blocks[5] = blocks[6] = blocks[7] =
      blocks[8] = blocks[9] = blocks[10] = blocks[11] =
      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.blocks = blocks;
    } else {
      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }

    this.h0 = 0x67452301;
    this.h1 = 0xEFCDAB89;
    this.h2 = 0x98BADCFE;
    this.h3 = 0x10325476;
    this.h4 = 0xC3D2E1F0;

    this.block = this.start = this.bytes = this.hBytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
  }

  Sha1.prototype.update = function (message) {
    if (this.finalized) {
      return;
    }
    var notString = typeof(message) !== 'string';
    if (notString && message.constructor === root.ArrayBuffer) {
      message = new Uint8Array(message);
    }
    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;

    while (index < length) {
      if (this.hashed) {
        this.hashed = false;
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }

      if(notString) {
        for (i = this.start; index < length && i < 64; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < 64; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;
      this.bytes += i - this.start;
      if (i >= 64) {
        this.block = blocks[16];
        this.start = i - 64;
        this.hash();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }
    if (this.bytes > 4294967295) {
      this.hBytes += this.bytes / 4294967296 << 0;
      this.bytes = this.bytes % 4294967296;
    }
    return this;
  };

  Sha1.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex;
    blocks[16] = this.block;
    blocks[i >> 2] |= EXTRA[i & 3];
    this.block = blocks[16];
    if (i >= 56) {
      if (!this.hashed) {
        this.hash();
      }
      blocks[0] = this.block;
      blocks[16] = blocks[1] = blocks[2] = blocks[3] =
      blocks[4] = blocks[5] = blocks[6] = blocks[7] =
      blocks[8] = blocks[9] = blocks[10] = blocks[11] =
      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }
    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    blocks[15] = this.bytes << 3;
    this.hash();
  };

  Sha1.prototype.hash = function () {
    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;
    var f, j, t, blocks = this.blocks;

    for(j = 16; j < 80; ++j) {
      t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];
      blocks[j] =  (t << 1) | (t >>> 31);
    }

    for(j = 0; j < 20; j += 5) {
      f = (b & c) | ((~b) & d);
      t = (a << 5) | (a >>> 27);
      e = t + f + e + 1518500249 + blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = (a & b) | ((~a) & c);
      t = (e << 5) | (e >>> 27);
      d = t + f + d + 1518500249 + blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = (e & a) | ((~e) & b);
      t = (d << 5) | (d >>> 27);
      c = t + f + c + 1518500249 + blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = (d & e) | ((~d) & a);
      t = (c << 5) | (c >>> 27);
      b = t + f + b + 1518500249 + blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = (c & d) | ((~c) & e);
      t = (b << 5) | (b >>> 27);
      a = t + f + a + 1518500249 + blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    for(; j < 40; j += 5) {
      f = b ^ c ^ d;
      t = (a << 5) | (a >>> 27);
      e = t + f + e + 1859775393 + blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = a ^ b ^ c;
      t = (e << 5) | (e >>> 27);
      d = t + f + d + 1859775393 + blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = e ^ a ^ b;
      t = (d << 5) | (d >>> 27);
      c = t + f + c + 1859775393 + blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = d ^ e ^ a;
      t = (c << 5) | (c >>> 27);
      b = t + f + b + 1859775393 + blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = c ^ d ^ e;
      t = (b << 5) | (b >>> 27);
      a = t + f + a + 1859775393 + blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    for(; j < 60; j += 5) {
      f = (b & c) | (b & d) | (c & d);
      t = (a << 5) | (a >>> 27);
      e = t + f + e - 1894007588 + blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = (a & b) | (a & c) | (b & c);
      t = (e << 5) | (e >>> 27);
      d = t + f + d - 1894007588 + blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = (e & a) | (e & b) | (a & b);
      t = (d << 5) | (d >>> 27);
      c = t + f + c - 1894007588 + blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = (d & e) | (d & a) | (e & a);
      t = (c << 5) | (c >>> 27);
      b = t + f + b - 1894007588 + blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = (c & d) | (c & e) | (d & e);
      t = (b << 5) | (b >>> 27);
      a = t + f + a - 1894007588 + blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    for(; j < 80; j += 5) {
      f = b ^ c ^ d;
      t = (a << 5) | (a >>> 27);
      e = t + f + e - 899497514 + blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = a ^ b ^ c;
      t = (e << 5) | (e >>> 27);
      d = t + f + d - 899497514 + blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = e ^ a ^ b;
      t = (d << 5) | (d >>> 27);
      c = t + f + c - 899497514 + blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = d ^ e ^ a;
      t = (c << 5) | (c >>> 27);
      b = t + f + b - 899497514 + blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = c ^ d ^ e;
      t = (b << 5) | (b >>> 27);
      a = t + f + a - 899497514 + blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    this.h0 = this.h0 + a << 0;
    this.h1 = this.h1 + b << 0;
    this.h2 = this.h2 + c << 0;
    this.h3 = this.h3 + d << 0;
    this.h4 = this.h4 + e << 0;
  };

  Sha1.prototype.hex = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;

    return HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
           HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
           HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
           HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
           HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
           HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
           HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
           HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
           HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
           HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
           HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
           HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
           HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
           HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
           HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
           HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
           HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
           HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
           HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
           HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F];
  };

  Sha1.prototype.toString = Sha1.prototype.hex;

  Sha1.prototype.digest = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;

    return [
      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF
    ];
  };

  Sha1.prototype.array = Sha1.prototype.digest;

  Sha1.prototype.arrayBuffer = function () {
    this.finalize();

    var buffer = new ArrayBuffer(20);
    var dataView = new DataView(buffer);
    dataView.setUint32(0, this.h0);
    dataView.setUint32(4, this.h1);
    dataView.setUint32(8, this.h2);
    dataView.setUint32(12, this.h3);
    dataView.setUint32(16, this.h4);
    return buffer;
  };

  var exports = createMethod();

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    root.sha1 = exports;
    if (AMD) {
      define(function () {
        return exports;
      });
    }
  }
})();

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":3}],151:[function(require,module,exports){
exports.getType = function (obj) {
	switch (Object.prototype.toString.call(obj)) {
		case '[object String]':
			return 'string';
		case '[object Number]':
			return (obj % 1 === 0) ? 'integer' : 'number';
		case '[object Boolean]':
			return 'boolean';
		case '[object Object]':
			return 'object';
		case '[object Array]':
			return 'array';
		case '[object Null]':
			return 'null';
		default:
			return 'undefined';
	}
}

exports.prettyType = function(type) {
	switch (type) {
		case 'string':
		case 'number':
		case 'boolean':
			return 'a ' + type;
		case 'integer':
		case 'object':
		case 'array':
			return 'an ' + type;
		case 'null':
			return 'null';
		case 'any':
			return 'any type';
		case 'undefined':
			return 'undefined';
		default:
			if (typeof type === 'object') {
				return 'a schema'
			} else {
				return type;
			}
	}
}


exports.isOfType = function (obj, type) {
	switch (type) {
		case 'string':
		case 'number':
		case 'boolean':
		case 'object':
		case 'array':
		case 'null':
			type = type.charAt(0).toUpperCase() + type.slice(1);
			return Object.prototype.toString.call(obj) === '[object ' + type + ']';
		case 'integer':
			return Object.prototype.toString.call(obj) === '[object Number]' && obj % 1 === 0;
		case 'any':
		default:
			return true;
	}
}

exports.getName = function (names) {
	return names.length === 0 ? '' : ' property \'' + names.join('.') + '\'';
};

exports.deepEquals = function (obj1, obj2) {
	var p;

	if (Object.prototype.toString.call(obj1) !== Object.prototype.toString.call(obj2)) {
		return false;
	}

	switch (typeof obj1) {
		case 'object':
			if (obj1.toString() !== obj2.toString()) {
				return false;
			}
			for (p in obj1) {
				if (!(p in obj2)) {
					return false;
				}
				if (!exports.deepEquals(obj1[p], obj2[p])) {
					return false;
				}
			}
			for (p in obj2) {
				if (!(p in obj1)) {
					return false;
				}
			}
			return true;
		case 'function':
			return obj1[p].toString() === obj2[p].toString();
		default:
			return obj1 === obj2;
	}
};

},{}],152:[function(require,module,exports){
var RE_0_TO_100 = '([1-9]?[0-9]|100)';
var RE_0_TO_255 = '([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';

function validateFormatUtcMillisec(obj) {
	return obj >= 0;
}

function validateFormatRegExp(obj) {
	try {
		var re = RegExp(obj);
		return true;
	} catch(err) {
		return false;
	}
}

var COLORS = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', 'silver', 'teal', 'white', 'yellow'];
var colorsReHex3 = /^#[0-9A-Fa-f]{3}$/; // #rgb
var colorsReHex6 = /^#[0-9A-Fa-f]{6}$/; // #rrggbb
var colorsReRgbNum = RegExp('^rgb\\(\\s*' + RE_0_TO_255 + '(\\s*,\\s*' + RE_0_TO_255 + '\\s*){2}\\)$'); // rgb(255, 0, 128)
var colorsReRgbPerc = RegExp('^rgb\\(\\s*' + RE_0_TO_100 + '%(\\s*,\\s*' + RE_0_TO_100 + '%\\s*){2}\\)$'); // rgb(100%, 0%, 50%)

function validateFormatColor(obj) {
	return COLORS.indexOf(obj) !== -1 || obj.match(colorsReHex3) || obj.match(colorsReHex6)
		|| obj.match(colorsReRgbNum) || obj.match(colorsReRgbPerc);
}

var phoneReNational = /^(\(\d+\)|\d+)( \d+)*$/;
var phoneReInternational = /^\+\d+( \d+)*$/;

function validateFormatPhone(obj) {
	return obj.match(phoneReNational) || obj.match(phoneReInternational);
}

var formats = {
	'date-time': { // ISO 8601 (YYYY-MM-DDThh:mm:ssZ in UTC time)
		types: ['string'],
		regex: /^(\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?))?$/
	},
	'date': { // YYYY-MM-DD
		types: ['string'],
		regex: /^\d{4}-\d{2}-\d{2}$/
	},
	'time': { // hh:mm:ss
		types: ['string'],
		regex: /^[0-2]\d:[0-5]\d:[0-5]\d$/
	},
	'utc-millisec': {
		types: ['number', 'integer'],
		func: validateFormatUtcMillisec
	},
	'regex': { // ECMA 262/Perl 5
		types: ['string'],
		func: validateFormatRegExp
	},
	'color': { // W3C.CR-CSS21-20070719
		types: ['string'],
		func: validateFormatColor
	},
	/* TODO: support style
		* style - A string containing a CSS style definition, based on CSS 2.1 [W3C.CR-CSS21-20070719].
		Example: `'color: red; background-color:#FFF'`.

	'style': { // W3C.CR-CSS21-20070719
		types: ['string'],
		func: validateFormatStyle
	},*/
   	'phone': { // E.123
		types: ['string'],
		func: validateFormatPhone
	},
	'uri': {
		types: ['string'],
		regex: RegExp("^([a-z][a-z0-9+.-]*):(?://(?:((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)(?::(\\d*))?(/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?|(/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?)(?:\\?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?$", 'i')
	},
	'email': {
		types: ['string'],
		regex: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i
	},
	'ip-address': {
		types: ['string'],
		regex: RegExp('^' + RE_0_TO_255 + '(\\.' + RE_0_TO_255 + '){3}$')
	},
	'ipv6': {
		types: ['string'],
		regex: /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
	},
	'host-name': {
		types: ['string'],
		regex: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/
	}
};

exports.formats = formats;

},{}],153:[function(require,module,exports){
var validateSchema = require('./valid-schema'),
	validateObject = require('./valid-object');

var Schema = function(schema) {
	this.schema = schema;
	validateSchema(schema);

	this.validate = function(obj, done) {
		validateObject(obj, schema, done);
	}
}

module.exports.createSchema = function (schema) {
	return new Schema(schema);
}

},{"./valid-object":154,"./valid-schema":155}],154:[function(require,module,exports){
var formats = require('./formats').formats;
var common = require('./common'),
	getType = common.getType,
	prettyType = common.prettyType,
	isOfType = common.isOfType,
	getName = common.getName,
	deepEquals = common.deepEquals;

function throwInvalidValue(names, value, expected) {
	throw new Error('JSON object' + getName(names) + ' is ' + value + ' when it should be ' + expected);
}

function throwInvalidAttributeValue(names, attribFullName, value, expected) {
	throw new Error('JSON object' + getName(names) + ': ' + attribFullName + ' is ' + value + ' when it should be ' + expected);
}

function throwInvalidType(names, value, expected) {
	throw new Error('JSON object' + getName(names) + ' is ' + prettyType(getType(value)) + ' when it should be ' + expected);
}

function throwInvalidDisallow(names, value, expected) {
	throw new Error('JSON object' + getName(names) + ' is ' + prettyType(getType(value)) + ' when it should not be ' + expected);
}

function validateRequired(obj, schema, names) {
	//console.log('***', names, 'validateRequired');
	if (schema.required) {
		if (obj === undefined) {
			throw new Error('JSON object' + getName(names) + ' is required');
		}
	}
}

function applyDefault(obj, schema, names) {
	//console.log('***', names, 'applyDefault');
	if (schema.default !== undefined) {
		obj = schema.default;
	}

	return obj;
}

function validateType(obj, schema, names) {
	//console.log('***', names, 'validateType');
	if (schema.type !== undefined) {
		switch (getType(schema.type)) {
			case 'string':
				// simple type
				if (!isOfType(obj, schema.type)) {
					throwInvalidType(names, obj, prettyType(schema.type));
				}
				break;
			case 'array':
				// union type
				for (var i = 0; i < schema.type.length; ++i) {
					switch (getType(schema.type[i])) {
						case 'string':
							// simple type (inside union type)
							if (isOfType(obj, schema.type[i])) {
								return; // success
							}
							break;
						case 'object':
							// schema (inside union type)
							try {
								return validateSchema(obj, schema.type[i], names);
							} catch(err) {
								// validation failed
								// TOOD: consider propagating error message upwards
							}
							break;
					}
				}
				throwInvalidType(names, obj, 'either ' + schema.type.map(prettyType).join(' or '));
				break;
		}
	}
}

function validateDisallow(obj, schema, names) {
	//console.log('***', names, 'validateDisallow');
	if (schema.disallow !== undefined) {
		switch (getType(schema.disallow)) {
			case 'string':
				// simple type
				if (isOfType(obj, schema.disallow)) {
					throwInvalidDisallow(names, obj, prettyType(schema.disallow));
				}
				break;
			case 'array':
				// union type
				for (var i = 0; i < schema.disallow.length; ++i) {
					switch (getType(schema.disallow[i])) {
						case 'string':
							// simple type (inside union type)
							if (isOfType(obj, schema.disallow[i])) {
								throwInvalidType(names, obj, 'neither ' + schema.disallow.map(prettyType).join(' nor '));
							}
							break;
						case 'object':
							// schema (inside union type)
							try {
								validateSchema(obj, schema.disallow[i], names);
							} catch(err) {
								// validation failed
								continue;
							}
							throwInvalidType(names, obj, 'neither ' + schema.disallow.map(prettyType).join(' nor '));
							// TOOD: consider propagating error message upwards
							break;
					}
				}
				break;
		}
	}
}

function validateEnum(obj, schema, names) {
	//console.log('***', names, 'validateEnum');
	if (schema['enum'] !== undefined) {
		for (var i = 0; i < schema['enum'].length; ++i) {
			if (deepEquals(obj, schema['enum'][i])) {
				return;
			}
		}
		throw new Error('JSON object' + getName(names) + ' is not in enum');
	}
}

function validateArray(obj, schema, names) {
	//console.log('***', names, 'validateArray');
	var i, j;

	if (schema.minItems !== undefined) {
		if (obj.length < schema.minItems) {
			throwInvalidAttributeValue(names, 'number of items', obj.length, 'at least ' + schema.minItems);
		}
	}

	if (schema.maxItems !== undefined) {
		if (obj.length > schema.maxItems) {
			throwInvalidAttributeValue(names, 'number of items', obj.length, 'at most ' + schema.maxItems);
		}
	}

	if (schema.items !== undefined) {
		switch (getType(schema.items)) {
			case 'object':
				// all the items in the array MUST be valid according to the schema
				for (i = 0; i < obj.length; ++i) {
					obj[i] = validateSchema(obj[i], schema.items, names.concat([ '['+i+']' ]));
				}
				break;
			case 'array':
				// each position in the instance array MUST conform to the schema in the corresponding position for this array
				var numChecks = Math.min(obj.length, schema.items.length);
				for (i = 0; i < numChecks; ++i) {
					obj[i] = validateSchema(obj[i], schema.items[i], names.concat([ '['+i+']' ]));
				}
				if (obj.length > schema.items.length) {
					if (schema.additionalItems !== undefined) {
						if (schema.additionalItems === false) {
							throwInvalidAttributeValue(names, 'number of items', obj.length, 'at most ' + schema.items.length + ' - the length of schema items');
						}
						for (; i < obj.length; ++i) {
							obj[i] = validateSchema(obj[i], schema.additionalItems, names.concat([ '['+i+']' ]));
						}
					}
				}
				break;
		}
	}

	if (schema.uniqueItems !== undefined) {
		for (i = 0; i < obj.length - 1; ++i) {
			for (j = i + 1; j < obj.length; ++j) {
				if (deepEquals(obj[i], obj[j])) {
					throw new Error('JSON object' + getName(names) + ' items are not unique: element ' + i + ' equals element ' + j);
				}
			}
		}
	}
}

function validateObject(obj, schema, names) {
	//console.log('***', names, 'validateObject');
	var prop, property;
	if (schema.properties !== undefined) {
		for (property in schema.properties) {
			prop = validateSchema(obj[property], schema.properties[property], names.concat([property]));
			if (prop === undefined) {
				delete obj[property];
			} else {
				obj[property] = prop;
			}
		}
	}

	var matchingProperties = {};
	if (schema.patternProperties !== undefined) {
		for (var reStr in schema.patternProperties) {
			var re = RegExp(reStr);
			for (property in obj) {
				if (property.match(re)) {
					matchingProperties[property] = true;
					prop = validateSchema(obj[property], schema.patternProperties[reStr], names.concat(['patternProperties./' + property + '/']));
					if (prop === undefined) {
						delete obj[property];
					} else {
						obj[property] = prop;
					}
				}
			}
		}
	}

	if (schema.additionalProperties !== undefined) {
		for (property in obj) {
			if (schema.properties !== undefined && property in schema.properties) {
				continue;
			}
			if (property in matchingProperties) {
				continue;
			}
			// additional
			if (schema.additionalProperties === false) {
				throw new Error('JSON object' + getName(names.concat([property])) + ' is not explicitly defined and therefore not allowed');
			}
			obj[property] = validateSchema(obj[property], schema.additionalProperties, names.concat([property]));
		}
	}

	if (schema.dependencies !== undefined) {
		for (property in schema.dependencies) {
			switch (getType(schema.dependencies[property])) {
				case 'string':
					// simple dependency
					if (property in obj && !(schema.dependencies[property] in obj)) {
						throw new Error('JSON object' + getName(names.concat([schema.dependencies[property]])) + ' is required by property \'' + property + '\'');
					}
					break;
				case 'array':
					// simple dependency tuple
					for (var i = 0; i < schema.dependencies[property].length; ++i) {
						if (property in obj && !(schema.dependencies[property][i] in obj)) {
							throw new Error('JSON object' + getName(names.concat([schema.dependencies[property][i]])) + ' is required by property \'' + property + '\'');
						}
					}
					break;
				case 'object':
					// schema dependency
					validateSchema(obj, schema.dependencies[property], names.concat([ '[dependencies.'+property+']' ]));
					break;
			}
		}
	}
}

function validateNumber(obj, schema, names) {
	//console.log('***', names, 'validateNumber');

	if (schema.minimum !== undefined) {
		if (schema.exclusiveMinimum ? obj <= schema.minimum : obj < schema.minimum) {
			throwInvalidValue(names, obj, (schema.exclusiveMinimum ? 'greater than' : 'at least') + ' ' + schema.minimum);
		}
	}

	if (schema.maximum !== undefined) {
		if (schema.exclusiveMaximum ? obj >= schema.maximum : obj > schema.maximum) {
			throwInvalidValue(names, obj, (schema.exclusiveMaximum ? 'less than' : 'at most') + ' ' + schema.maximum);
		}
	}

	if (schema.divisibleBy !== undefined) {
		if (!isOfType(obj / schema.divisibleBy, 'integer')) {
			throwInvalidValue(names, obj, 'divisible by ' + schema.divisibleBy);
		}
	}
}

function validateString(obj, schema, names) {
	//console.log('***', names, 'validateString');

	if (schema.minLength !== undefined) {
		if (obj.length < schema.minLength) {
			throwInvalidAttributeValue(names, 'length', obj.length, 'at least ' + schema.minLength);
		}
	}

	if (schema.maxLength !== undefined) {
		if (obj.length > schema.maxLength) {
			throwInvalidAttributeValue(names, 'length', obj.length, 'at most ' + schema.maxLength);
		}
	}

	if (schema.pattern !== undefined) {
		if (!obj.match(RegExp(schema.pattern))) {
			throw new Error('JSON object' + getName(names) + ' does not match pattern');
		}
	}
}

function validateFormat(obj, schema, names) {
	//console.log('***', names, 'validateFormat');
	if (schema.format !== undefined) {
		var format = formats[schema.format];
		if (format !== undefined) {
			var conforms = true;
			if (format.regex) {
				conforms = obj.match(format.regex);
			} else if (format.func) {
				conforms = format.func(obj);
			}
			if (!conforms) {
				throw new Error('JSON object' + getName(names) + ' does not conform to the \'' + schema.format + '\' format');
			}
		}
	}
}

function validateItem(obj, schema, names) {
	//console.log('***', names, 'validateItem');
	switch (getType(obj)) {
		case 'number':
		case 'integer':
			validateNumber(obj, schema, names);
			break;
		case 'string':
			validateString(obj, schema, names);
			break;
	}

	validateFormat(obj, schema, names);
}

function validateSchema(obj, schema, names) {
	//console.log('***', names, 'validateSchema');

	validateRequired(obj, schema, names);
	if (obj === undefined) {
		obj = applyDefault(obj, schema, names);
	}
	if (obj !== undefined) {
		validateType(obj, schema, names);
		validateDisallow(obj, schema, names);
		validateEnum(obj, schema, names);

		switch (getType(obj)) {
			case 'object':
				validateObject(obj, schema, names);
				break;
			case 'array':
				validateArray(obj, schema, names);
				break;
			default:
				validateItem(obj, schema, names);
		}
	}

	return obj;
}

// Two operation modes:
// * Synchronous - done callback is not provided. will return nothing or throw error
// * Asynchronous - done callback is provided. will not throw error.
//        will call callback with error as first parameter and object as second
// Schema is expected to be validated.
module.exports = function(obj, schema, done) {
	try {
		validateSchema(obj, schema, []);
	} catch(err) {
		if (done) {
			done(err);
			return;
		} else {
			throw err;
		}
	}

	if (done) {
		done(null, obj);
	}
};

},{"./common":151,"./formats":152}],155:[function(require,module,exports){
var formats = require('./formats').formats;
var common = require('./common'),
	getType = common.getType,
	prettyType = common.prettyType,
	isOfType = common.isOfType,
	getName = common.getName,
	validateObjectVsSchema = require('./valid-object');

function throwInvalidType(names, attribFullName, value, expected) {
	throw new Error('Schema' + getName(names) + ': ' + attribFullName + ' is ' + prettyType(getType(value)) + ' when it should be ' + expected);
}

function assertType(schema, attribName, expectedType, names) {
	if (schema[attribName] !== undefined) {
		if (!isOfType(schema[attribName], expectedType)) {
			throwInvalidType(names, '\'' + attribName + '\' attribute', schema[attribName], prettyType(expectedType));
		}
	}
}

function validateRequired(schema, names) {
	assertType(schema, 'required', 'boolean', names);
}

function validateDefault(schema, names) {
	if (schema.default !== undefined) {
		try {
			validateObjectVsSchema(schema.default, schema);
		} catch(err) {
			throw new Error('Schema' + getName(names) + ': \'default\' attribute value is not valid according to the schema: ' + err.message);
		}
	}
}

function validateType(schema, names) {
	if (schema.type !== undefined) {
		switch (getType(schema.type)) {
			case 'string':
				// simple type - nothing to validate
				break;
			case 'array':
				// union type
				if (schema.type.length < 2) {
					throw new Error('Schema' + getName(names) + ': \'type\' attribute union length is ' + schema.type.length + ' when it should be at least 2');
				}
				for (var i = 0; i < schema.type.length; ++i) {
					switch (getType(schema.type[i])) {
						case 'string':
							// simple type (inside union type) - nothing to validate
							break;
						case 'object':
							// schema (inside union type)
							try {
								validateSchema(schema.type[i], []);
							} catch(err) {
								throw new Error('Schema' + getName(names) + ': \'type\' attribute union element ' + i + ' is not a valid schema: ' + err.message);
							}
							break;
						default:
							throwInvalidType(names, '\'type\' attribute union element ' + i, schema.type[i], 'either an object (schema) or a string');
					}
				}
				break;
			default:
				throwInvalidType(names, '\'type\' attribute', schema.type, 'either a string or an array');
		}
	}
}

function validateDisallow(schema, names) {
	if (schema.disallow !== undefined) {
		switch (getType(schema.disallow)) {
			case 'string':
				// simple type - nothing to validate
				break;
			case 'array':
				// union type
				if (schema.disallow.length < 2) {
					throw new Error('Schema' + getName(names) + ': \'disallow\' attribute union length is ' + schema.disallow.length + ' when it should be at least 2');
				}
				for (var i = 0; i < schema.disallow.length; ++i) {
					switch (getType(schema.disallow[i])) {
						case 'string':
							// simple type (inside union type) - nothing to validate
							break;
						case 'object':
							// schema (inside union type)
							try {
								validateSchema(schema.disallow[i], []);
							} catch(err) {
								throw new Error('Schema' + getName(names) + ': \'disallow\' attribute union element ' + i + ' is not a valid schema: ' + err.message);
							}
							break;
						default:
							throwInvalidType(names, '\'disallow\' attribute union element ' + i, schema.disallow[i], 'either an object (schema) or a string');
					}
				}
				break;
			default:
				throwInvalidType(names, '\'disallow\' attribute', schema.disallow, 'either a string or an array');
		}
	}
}

function validateEnum(schema, names) {
	assertType(schema, 'enum', 'array', names);
}

function validateArray(schema, names) {
	assertType(schema, 'minItems', 'integer', names);
	assertType(schema, 'maxItems', 'integer', names);

	if (schema.items !== undefined) {
		var i;
		switch (getType(schema.items)) {
			case 'object':
				// all the items in the array MUST be valid according to the schema
				try {
					validateSchema(schema.items, []);
				} catch(err) {
					throw new Error('Schema' + getName(names) + ': \'items\' attribute is not a valid schema: ' + err.message);
				}
				break;
			case 'array':
				// each position in the instance array MUST conform to the schema in the corresponding position for this array
				for (i = 0; i < schema.items.length; ++i) {
					try {
						validateSchema(schema.items[i], []);
					} catch(err) {
						throw new Error('Schema' + getName(names) + ': \'items\' attribute element ' + i + ' is not a valid schema: ' + err.message);
					}
				}
				break;
			default:
				throwInvalidType(names, '\'items\' attribute', schema.items, 'either an object (schema) or an array');
		}
	}

	if (schema.additionalItems !== undefined) {
		if (schema.additionalItems === false) {
			// ok
		} else if (!isOfType(schema.additionalItems, 'object')) {
			throwInvalidType(names, '\'additionalItems\' attribute', schema.additionalItems, 'either an object (schema) or false');
		} else {
			try {
				validateSchema(schema.additionalItems, []);
			} catch(err) {
				throw new Error('Schema' + getName(names) + ': \'additionalItems\' attribute is not a valid schema: ' + err.message);
			}
		}
	}

	assertType(schema, 'uniqueItems', 'boolean', names);
}

function validateObject(schema, names) {
	assertType(schema, 'properties', 'object', names);
	if (schema.properties !== undefined) {
		for (var property in schema.properties) {
			validateSchema(schema.properties[property], names.concat([property]));
		}
	}

	assertType(schema, 'patternProperties', 'object', names);
	if (schema.patternProperties !== undefined) {
		for (var reStr in schema.patternProperties) {
			validateSchema(schema.patternProperties[reStr], names.concat(['patternProperties./' + reStr + '/']));
		}
	}

	if (schema.additionalProperties !== undefined) {
		if (schema.additionalProperties === false) {
			// ok
		} else if (!isOfType(schema.additionalProperties, 'object')) {
			throwInvalidType(names, '\'additionalProperties\' attribute', schema.additionalProperties, 'either an object (schema) or false');
		} else {
			try {
				validateSchema(schema.additionalProperties, []);
			} catch(err) {
				throw new Error('Schema' + getName(names) + ': \'additionalProperties\' attribute is not a valid schema: ' + err.message);
			}
		}
	}

	assertType(schema, 'dependencies', 'object', names);
	if (schema.dependencies !== undefined) {
		for (var property in schema.dependencies) {
			switch (getType(schema.dependencies[property])) {
				case 'string':
					// simple dependency - nothing to validate
					break;
				case 'array':
					// simple dependency tuple
					for (var i = 0; i < schema.dependencies[property].length; ++i) {
						if (isOfType(schema.dependencies[property][i], 'string')) {
							// simple dependency (inside array) - nothing to validate
						} else {
							throwInvalidType(names, '\'dependencies\' attribute: value of property \'' + property + '\' element ' + i, schema.dependencies[property][i], 'a string');
						}
					}
					break;
				case 'object':
					// schema dependency
					try {
						validateSchema(schema.dependencies[property], []);
					} catch(err) {
						throw new Error('Schema' + getName(names) + ': \'dependencies\' attribute: value of property \'' + property + '\' is not a valid schema: ' + err.message);
					}
					break;
				default:
					throwInvalidType(names, '\'dependencies\' attribute: value of property \'' + property + '\'', schema.dependencies[property], 'either a string, an array or an object (schema)');
			}
		}
	}
}

function validateNumber(schema, names) {
	assertType(schema, 'minimum', 'number', names);
	assertType(schema, 'exclusiveMinimum', 'boolean', names);
	assertType(schema, 'maximum', 'number', names);
	assertType(schema, 'exclusiveMaximum', 'boolean', names);
	assertType(schema, 'divisibleBy', 'number', names);
	if (schema.divisibleBy !== undefined) {
		if (schema.divisibleBy === 0) {
			throw new Error('Schema' + getName(names) + ': \'divisibleBy\' attribute must not be 0');
		}
	}
};

function validateString(schema, names) {
	assertType(schema, 'minLength', 'integer', names);
	assertType(schema, 'maxLength', 'integer', names);
	assertType(schema, 'pattern', 'string', names);
}

function validateFormat(schema, names) {
	assertType(schema, 'format', 'string', names);

	if (schema.format !== undefined) {
		if (schema.format in formats) {
			if (formats[schema.format].types.indexOf(schema.type) === -1) {
				throw new Error('Schema' + getName(names) + ': \'type\' attribute does not conform to the \'' + schema.format + '\' format');
			}
		}
	}
}

function validateItem(schema, names) {
	validateNumber(schema, names);
	validateString(schema, names);
	validateFormat(schema, names);
}

function validateSchema(schema, names) {
	if (!isOfType(schema, 'object')) {
		throw new Error('Schema' + getName(names) + ' is ' + prettyType(getType(schema)) + ' when it should be an object');
	}
	validateRequired(schema, names);
	validateType(schema, names);
	validateDisallow(schema, names);
	validateEnum(schema, names);
	validateObject(schema, names);
	validateArray(schema, names);
	validateItem(schema, names);
	// defaults are applied last after schema is validated
	validateDefault(schema, names);
}

module.exports = function(schema) {
	if (schema === undefined) {
		throw new Error('Schema is undefined');
	}

	// validate schema parameters for object root
	if (!isOfType(schema, 'object')) {
		throw new Error('Schema is ' + prettyType(getType(schema)) + ' when it should be an object');
	}

	validateSchema(schema, []);
};

},{"./common":151,"./formats":152,"./valid-object":154}],156:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd) { // eslint-disable-line no-undef
    define([], factory);// eslint-disable-line no-undef
  } else if (typeof module === 'object' && module.exports) {
    module.exports = factory();
  } else {
    root.returnExports = factory();
  }
  // eslint-disable-next-line no-undef
}(typeof self !== 'undefined' ? self : this, function () {
  var root = this;
  var $savedJsonPointer = this.JsonPointer;

  function replace(str, find, repl) {
    // modified from http://jsperf.com/javascript-replace-all/10
    var orig = str.toString();
    var res = '';
    var rem = orig;
    var beg = 0;
    var end = -1;
    while ((end = rem.indexOf(find)) > -1) {
      res += orig.substring(beg, beg + end) + repl;
      rem = rem.substring(end + find.length, rem.length);
      beg += end + find.length;
    }
    if (rem.length > 0) {
      res += orig.substring(orig.length - rem.length, orig.length);
    }
    return res;
  }

  function decodeFragmentSegments(segments) {
    var i = -1;
    var len = segments.length;
    var res = new Array(len);
    while (++i < len) {
      res[i] = replace(replace(decodeURIComponent('' + segments[i]), '~1', '/'), '~0', '~');
    }
    return res;
  }

  function encodeFragmentSegments(segments) {
    var i = -1;
    var len = segments.length;
    var res = new Array(len);
    while (++i < len) {
      if (typeof segments[i] === 'string') {
        res[i] = encodeURIComponent(replace(replace(segments[i], '~', '~0'), '/', '~1'));
      } else {
        res[i] = segments[i];
      }
    }
    return res;
  }

  function decodePointerSegments(segments) {
    var i = -1;
    var len = segments.length;
    var res = new Array(len);
    while (++i < len) {
      res[i] = replace(replace(segments[i], '~1', '/'), '~0', '~');
    }
    return res;
  }

  function encodePointerSegments(segments) {
    var i = -1;
    var len = segments.length;
    var res = new Array(len);
    while (++i < len) {
      if (typeof segments[i] === 'string') {
        res[i] = replace(replace(segments[i], '~', '~0'), '/', '~1');
      } else {
        res[i] = segments[i];
      }
    }
    return res;
  }

  function decodePointer(ptr) {
    if (typeof ptr !== 'string') {
      throw new TypeError('Invalid type: JSON Pointers are represented as strings.');
    }
    if (ptr.length === 0) {
      return [];
    }
    if (ptr[0] !== '/') {
      throw new ReferenceError('Invalid JSON Pointer syntax. Non-empty pointer must begin with a solidus `/`.');
    }
    return decodePointerSegments(ptr.substring(1).split('/'));
  }

  function encodePointer(path) {
    if (path && !Array.isArray(path)) {
      throw new TypeError('Invalid type: path must be an array of segments.');
    }
    if (path.length === 0) {
      return '';
    }
    return '/'.concat(encodePointerSegments(path).join('/'));
  }

  function decodeUriFragmentIdentifier(ptr) {
    if (typeof ptr !== 'string') {
      throw new TypeError('Invalid type: JSON Pointers are represented as strings.');
    }
    if (ptr.length === 0 || ptr[0] !== '#') {
      throw new ReferenceError('Invalid JSON Pointer syntax; URI fragment idetifiers must begin with a hash.');
    }
    if (ptr.length === 1) {
      return [];
    }
    if (ptr[1] !== '/') {
      throw new ReferenceError('Invalid JSON Pointer syntax.');
    }
    return decodeFragmentSegments(ptr.substring(2).split('/'));
  }

  function encodeUriFragmentIdentifier(path) {
    if (path && !Array.isArray(path)) {
      throw new TypeError('Invalid type: path must be an array of segments.');
    }
    if (path.length === 0) {
      return '#';
    }
    return '#/'.concat(encodeFragmentSegments(path).join('/'));
  }

  function toArrayIndexReference(arr, idx) {
    var len = idx.length;
    var cursor = 0;
    if (len === 1 && idx[0] === '-') {
      if (!Array.isArray(arr)) {
        return 0;
      }
      return arr.length;
    }
    if (len === 0 || len > 1 && idx[0] === '0' || !isFinite(idx)) {
      return -1;
    }

    while (++cursor < len) {
      if (idx[cursor] < '0' || idx[cursor] > '9') {
        return -1;
      }
    }
    return parseInt(idx, 10);
  }

  function hasValueAtPath(target, path) {
    var it;
    var len;
    var cursor;
    var step;
    var p;
    if (typeof target !== 'undefined') {
      it = target;
      len = path.length;
      cursor = -1;
      if (len) {
        while (++cursor < len && it) {
          step = path[cursor];
          if (Array.isArray(it)) {
            if (isNaN(step) || !isFinite(step)) {
              break;
            }
            p = toArrayIndexReference(it, step);
            if (it.length > p) {
              it = it[p];
            } else {
              break;
            }
          } else {
            it = it[step];
          }
        }
      }
      return cursor === len && typeof it !== 'undefined';
    }
    return false;
  }

  function getValueAtPath(target, path) {
    var it;
    var len;
    var cursor;
    var step;
    var p;
    var nonexistent;
    if (typeof target !== 'undefined') {
      it = target;
      len = path.length;
      cursor = -1;
      if (len) {
        while (++cursor < len && it) {
          step = path[cursor];
          if (Array.isArray(it)) {
            if (isNaN(step) || !isFinite(step)) {
              return nonexistent;
            }
            p = toArrayIndexReference(it, step);
            if (it.length > p) {
              it = it[p];
            } else {
              return nonexistent;
            }
          } else {
            it = it[step];
          }
        }
      }
      return it;
    }
    return nonexistent;
  }

  function compilePointerDereference(path) {
    var body = 'if (typeof(obj) !== \'undefined\'';
    if (path.length === 0) {
      return function (it) {
        return it;
      };
    }
    // eslint-disable-next-line
    body = path.reduce(function (body, p, i) {
      return body + ' && \n\ttypeof((obj = obj[\'' +
        replace(path[i], '\\', '\\\\') + '\'])) !== \'undefined\'';
    }, 'if (typeof(obj) !== \'undefined\'');
    body = body + ') {\n\treturn obj;\n }';
    // eslint-disable-next-line no-new-func
    return new Function(['obj'], body);
  }

  function setValueAtPath(target, val, path, force) {
    var it;
    var len;
    var end;
    var cursor;
    var step;
    var p;
    var rem;
    var nonexistent;
    if (path.length === 0) {
      throw new Error('Cannot set the root object; assign it directly.');
    }
    if (typeof target === 'undefined') {
      throw new TypeError('Cannot set values on undefined');
    }
    it = target;
    len = path.length;
    end = path.length - 1;
    cursor = -1;
    if (len) {
      while (++cursor < len) {
        step = path[cursor];
        if (Array.isArray(it)) {
          p = toArrayIndexReference(it, step);
          if (it.length > p) {
            if (cursor === end) {
              rem = it[p];
              it[p] = val;
              return rem;
            }
            it = it[p];
          } else if (it.length === p) {
            if (cursor === end) {
              it.push(val);
              return nonexistent;
            } else if (force) {
              it = it[p] = {};
            }
          }
        } else {
          if (typeof it[step] === 'undefined') {
            if (force) {
              if (cursor === end) {
                it[step] = val;
                return nonexistent;
              }
              // if the next step is an array index, this step should be an array.
              if (toArrayIndexReference(it[step], path[cursor + 1]) !== -1) {
                it = it[step] = [];
                continue;
              }
              it = it[step] = {};
              continue;
            }
            return nonexistent;
          }
          if (cursor === end) {
            rem = it[step];
            it[step] = val;
            return rem;
          }
          it = it[step];
        }
      }
    }
    return it;
  }

  function looksLikeFragment(ptr) {
    return ptr && ptr.length && ptr[0] === '#';
  }

  function pickDecoder(ptr) {
    return (looksLikeFragment(ptr)) ? decodeUriFragmentIdentifier : decodePointer;
  }

  function JsonPointer(ptr) {
    // decode if necessary, make immutable.
    var localPath = (Array.isArray(ptr)) ?
      ptr.slice(0) :
      ptr = pickDecoder(ptr)(ptr);
    var $original = (Array.isArray(ptr)) ? encodePointer(localPath) : ptr;
    var $pointer;
    var $fragmentId;
    var $compiledGetter = compilePointerDereference(localPath);
    Object.defineProperties(this, {
      get: {
        enumerable: true,
        value: $compiledGetter
      },
      set: {
        enumerable: true,
        value: function (target, value, force) {
          return setValueAtPath(target, value, localPath, force);
        }
      },
      has: {
        enumerable: true,
        value: function (target) {
          return typeof ($compiledGetter(target)) !== 'undefined';
        }
      },
      path: {
        enumerable: true,
        get: function () {
          return localPath.slice(0);
        }
      },
      pointer: {
        enumerable: true,
        get: function () {
          if (!$pointer) {
            $pointer = encodePointer(localPath);
          }
          return $pointer;
        }
      },
      uriFragmentIdentifier: {
        enumerable: true,
        get: function () {
          if (!$fragmentId) {
            $fragmentId = encodeUriFragmentIdentifier(localPath);
          }
          return $fragmentId;
        }
      },
      toString: {
        enumerable: true,
        configurable: true,
        writable: true,
        value: function () {
          return $original;
        }
      }
    });
  }

  function JsonReference(pointer) {
    var localPtr = (typeof (pointer) === 'string' || Array.isArray(pointer)) ?
      new JsonPointer(pointer) :
      pointer;

    Object.defineProperties(this, {
      $ref: {
        enumerable: true,
        value: localPtr.uriFragmentIdentifier
      },
      resolve: {
        enumerable: true,
        value: function (target) {
          return localPtr.get(target);
        }
      },
      toString: {
        enumerable: true,
        writable: true,
        configurable: true,
        value: function () {
          return localPtr.uriFragmentIdentifier;
        }
      }
    });
  }

  JsonReference.isReference = function (obj) {
    return obj && obj instanceof JsonReference ||
      (typeof obj.$ref === 'string' &&
        typeof obj.resolve === 'function');
  };

  function visit(target, visitor, cycle) {
    var items, i, ilen, j, jlen, it, path, cursor, typeT;
    var distinctObjects;
    var q = [];
    var qcursor = 0;
    q.push({
      obj: target,
      path: []
    });
    if (cycle) {
      distinctObjects = Object.create(null);
    }
    visitor(encodePointer([]), target);
    while (qcursor < q.length) {
      cursor = q[qcursor++];
      typeT = typeof cursor.obj;
      if (typeT === 'object' && cursor.obj !== null) {
        if (Array.isArray(cursor.obj)) {
          j = -1;
          jlen = cursor.obj.length;
          while (++j < jlen) {
            it = cursor.obj[j];
            path = cursor.path.concat(j);
            if (typeof it === 'object' && it !== null) {
              if (cycle && distinctObjects[it]) {
                visitor(encodePointer(path), new JsonReference(distinctObjects[it]));
                continue;
              }
              q.push({
                obj: it,
                path: path
              });
              if (cycle) {
                distinctObjects[it] = new JsonPointer(encodeUriFragmentIdentifier(path));
              }
            }
            visitor(encodePointer(path), it);
          }
        } else {
          items = Object.keys(cursor.obj);
          ilen = items.length;
          i = -1;
          while (++i < ilen) {
            it = cursor.obj[items[i]];
            path = cursor.path.concat(items[i]);
            if (typeof it === 'object' && it !== null) {
              if (cycle && distinctObjects[it]) {
                visitor(encodePointer(path), new JsonReference(distinctObjects[it]));
                continue;
              }
              q.push({
                obj: it,
                path: path
              });
              if (cycle) {
                distinctObjects[it] = new JsonPointer(encodeUriFragmentIdentifier(path));
              }
            }
            visitor(encodePointer(path), it);
          }
        }
      }
    }
  }

  JsonPointer.create = function (ptr) {
    return new JsonPointer(ptr);
  };

  JsonPointer.has = function (target, ptr) {
    return hasValueAtPath(target, pickDecoder(ptr)(ptr));
  };

  JsonPointer.get = function (target, ptr) {
    return getValueAtPath(target, pickDecoder(ptr)(ptr));
  };

  JsonPointer.set = function (target, ptr, val, force) {
    return setValueAtPath(target, val, pickDecoder(ptr)(ptr), force);
  };

  JsonPointer.list = function (target, fragmentId) {
    var res = [];
    var visitor = (fragmentId) ?
      function (ptr, val) {
        res.push({
          fragmentId: encodeUriFragmentIdentifier(decodePointer(ptr)),
          value: val
        });
      } :
      function (ptr, val) {
        res.push({
          pointer: ptr,
          value: val
        });
      };
    visit(target, visitor);
    return res;
  };

  JsonPointer.flatten = function (target, fragmentId) {
    var res = {};
    var visitor = (fragmentId) ?
      function (ptr, val) {
        res[encodeUriFragmentIdentifier(decodePointer(ptr))] = val;
      } :
      function (ptr, val) {
        res[ptr] = val;
      };
    visit(target, visitor);
    return res;
  };

  JsonPointer.map = function (target, fragmentId) {
    var res = [];
    var visitor = (fragmentId) ?
      function (ptr, val) {
        res.push({ key: encodeUriFragmentIdentifier(decodePointer(ptr)), value: val });
      } : res.set.bind(res);
    visit(target, visitor);
    return res;
  };

  JsonPointer.visit = visit;

  JsonPointer.decode = function (ptr) {
    return pickDecoder(ptr)(ptr);
  };

  JsonPointer.decodePointer = decodePointer;
  JsonPointer.encodePointer = encodePointer;
  JsonPointer.decodeUriFragmentIdentifier = decodeUriFragmentIdentifier;
  JsonPointer.encodeUriFragmentIdentifier = encodeUriFragmentIdentifier;

  // support ES6 style destructuring...
  JsonPointer.JsonPointer = JsonPointer;
  JsonPointer.JsonReference = JsonReference;
  JsonPointer.isReference = JsonReference.isReference;

  JsonPointer.noConflict = function () {
    root.JsonPointer = $savedJsonPointer;
    return JsonPointer;
  };

  root.JsonPointer = JsonPointer;
  return JsonPointer;
}));

},{}],157:[function(require,module,exports){
(function (global){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.10';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    return key == '__proto__'
      ? undefined
      : object[key];
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],158:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],159:[function(require,module,exports){
/*!
 * varname <https://github.com/jonschlinkert/varname
 *
 * Copyright (c) 2014 Jon Schlinkert, contributors
 * Licensed under the MIT License (MIT)
 */

var reserved = require('reserved');

module.exports = function (str, blacklist) {
  str = str.split(/[\W\s_-]/).filter(Boolean).join(' ')
  str = str.replace(/[\W\s_-]+(.)/g, function (match, $1) {
    return $1.toUpperCase();
  });
  // if the final word is a ECMAscript reserved word, add a leading `_`
  return (reserved.indexOf(str) !== -1) ? '_' + str : str;
};
},{"reserved":162}],160:[function(require,module,exports){
function isObject(o) { return typeof o === 'object'; }
module.exports = function objk (fn, o0, argLength) {
  var res = []
  var k0 = Object.keys(o0)
  for (var a = 0; a < k0.length; a++) {
    var o1 = o0[k0[a]]
    if (argLength > 1 && isObject(o1)) {
      var k1 = Object.keys(o1)
      for (var b = 0; b < k1.length; b++) {
        var o2 = o1[k1[b]]
        if (argLength > 2 && isObject(o2)) {
          var k2 = Object.keys(o2)
          for (var c = 0; c < k2.length; c++) {
            var o3 = o2[k2[c]]
            if (argLength > 3 && isObject(o3)) {
              var k3 = Object.keys(o3)
              for (var d = 0; d < k3.length; d++) {
                var o4 = o3[k3[d]]
                if (argLength > 4 && isObject(o4)) {
                  var k4 = Object.keys(o4)
                  for (var e = 0; e < k4.length; e++) {
                    var o5 = o4[k4[e]]
                    if (argLength > 5 && isObject(o5)) {
                      var k5 = Object.keys(o5)
                      for (var f = 0; f < k5.length; f++) {
                        var o6 = o5[k5[f]]
                        if (argLength > 6 && isObject(o6)) {
                          var k6 = Object.keys(o6)
                          for (var g = 0; g < k6.length; g++) {
                            var o7 = o6[k6[g]]
                            if (argLength > 7 && isObject(o7)) {
                              var k7 = Object.keys(o7)
                              for (var h = 0; h < k7.length; h++) {
                                var o8 = o7[k7[h]]
                                if (argLength > 8 && isObject(o8)) {
                                  var k8 = Object.keys(o8)
                                  for (var i = 0; i < k8.length; i++) {
                                    var o9 = o8[k8[i]]
                                    if (argLength > 9 && isObject(o9)) {
                                      var k9 = Object.keys(o9)
                                      for (var j = 0; j < k9.length; j++) {
                                        var o10 = o9[k9[j]]
                                        if (argLength > 10 && isObject(o10)) {
  throw Error('more than 10 arguments not supported')
                                        } else {
                                          var ret = fn (k0[a], k1[b], k2[c], k3[d], k4[e], k5[f], k6[g], k7[h], k8[i], k9[j], o10)
                                          if (ret !== undefined) {
                                            res.push(ret)
                                          }
                                        }
                                      }
                                    } else {
                                      var ret = fn (k0[a], k1[b], k2[c], k3[d], k4[e], k5[f], k6[g], k7[h], k8[i], o9)
                                      if (ret !== undefined) {
                                        res.push(ret)
                                      }
                                    }
                                  }
                                } else {
                                  var ret = fn (k0[a], k1[b], k2[c], k3[d], k4[e], k5[f], k6[g], k7[h], o8)
                                  if (ret !== undefined) {
                                    res.push(ret)
                                  }
                                }
                              }
                            } else {
                              var ret = fn (k0[a], k1[b], k2[c], k3[d], k4[e], k5[f], k6[g], o7)
                              if (ret !== undefined) {
                                res.push(ret)
                              }
                            }
                          }
                        } else {
                          var ret = fn (k0[a], k1[b], k2[c], k3[d], k4[e], k5[f], o6)
                          if (ret !== undefined) {
                            res.push(ret)
                          }
                        }
                      }
                    } else {
                      var ret = fn (k0[a], k1[b], k2[c], k3[d], k4[e], o5)
                      if (ret !== undefined) {
                        res.push(ret)
                      }
                    }
                  }
                } else {
                  var ret = fn (k0[a], k1[b], k2[c], k3[d], o4)
                  if (ret !== undefined) {
                    res.push(ret)
                  }
                }
              }
            } else {
              var ret = fn (k0[a], k1[b], k2[c], o3)
              if (ret !== undefined) {
                res.push(ret)
              }
            }
          }
        } else {
          var ret = fn (k0[a], k1[b], o2)
          if (ret !== undefined) {
            res.push(ret)
          }
        }
      }
    } else {
      var ret = fn (k0[a], o1)
      if (ret !== undefined) {
        res.push(ret)
      }
    }
  }
  return res
}

},{}],161:[function(require,module,exports){
var opti = require('./10')

module.exports = function forOf (fn, obj) {
  if (typeof fn !== 'function') {
    throw new TypeError('First argument must be a function')
  }

  if (typeof obj !== 'object') {
    throw new TypeError('Second argument must be an object')
  }

  var argLength = fn.length - 1
  var res = []

  function iterate (obj, fnArgs) {
    for (var key in obj) {
      var myArgs = fnArgs.slice()
      if (obj.hasOwnProperty(key)) {
        myArgs.push(key)
        if (myArgs.length < argLength) {
          iterate(obj[key], myArgs)
        } else {
          myArgs.push(obj[key])
          var ret = fn.apply(this, myArgs)
          if (ret !== undefined) {
            res.push(ret)
          }
        }
      }
    }
  }

  if (argLength.length > 10) {
    iterate(obj, [])
    return res
  }
  return opti(fn, obj, argLength)
}

},{"./10":160}],162:[function(require,module,exports){
/*!
 * reserved <https://github.com/jonschlinkert/reserved
 *
 * Copyright (c) 2014 Jon Schlinkert, contributors
 * Licensed under the MIT License (MIT)
 */

exports.reserved = [
  'abstract',
  'arguments',
  'boolean',
  'break',
  'byte',
  'case',
  'catch',
  'char',
  'class',
  'const',
  'continue',
  'debugger',
  'default',
  'delete',
  'do',
  'double',
  'else',
  'enum',
  'eval',
  'export',
  'extends',
  'false',
  'final',
  'finally',
  'float',
  'for',
  'function',
  'goto',
  'if',
  'implements',
  'import',
  'in',
  'instanceof',
  'int',
  'interface',
  'let',
  'long',
  'native',
  'new',
  'null',
  'package',
  'private',
  'protected',
  'public',
  'return',
  'short',
  'static',
  'super',
  'switch',
  'synchronized',
  'this',
  'throw',
  'throws',
  'transient',
  'true',
  'try',
  'typeof',
  'var',
  'void',
  'volatile',
  'while',
  'with',
  'yield'
];

exports.builtins = [
  'Array',
  'Date',
  'eval',
  'function',
  'hasOwnProperty',
  'Infinity',
  'isFinite',
  'isNaN',
  'isPrototypeOf',
  'length',
  'Math',
  'name',
  'NaN',
  'Number',
  'Object',
  'prototype',
  'String',
  'toString',
  'undefined',
  'valueOf'
];

module.exports = exports.reserved.concat(exports.builtins);
},{}],163:[function(require,module,exports){
var v1 = require('./v1');
var v4 = require('./v4');

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;

},{"./v1":166,"./v4":167}],164:[function(require,module,exports){
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]]]).join('');
}

module.exports = bytesToUuid;

},{}],165:[function(require,module,exports){
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

},{}],166:[function(require,module,exports){
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;

},{"./lib/bytesToUuid":164,"./lib/rng":165}],167:[function(require,module,exports){
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

},{"./lib/bytesToUuid":164,"./lib/rng":165}],"chix-flow":[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var schemas_1 = require("./schemas");
__export(require("./actor"));
__export(require("./context"));
__export(require("./compile"));
__export(require("./events"));
__export(require("./flow/flow"));
__export(require("./io/handler"));
__export(require("./packet"));
__export(require("./port"));
__export(require("./connector"));
__export(require("./IIP"));
__export(require("./setting"));
__export(require("./link"));
__export(require("./node/node"));
__export(require("./process/manager"));
var validate = require("./validate");
exports.Schema = {
    Map: schemas_1.Map,
    Node: schemas_1.Node,
    Stage: schemas_1.Stage
};
exports.Validate = validate;

},{"./IIP":6,"./actor":7,"./compile":20,"./connector":21,"./context":23,"./events":26,"./flow/flow":40,"./io/handler":62,"./link":68,"./node/node":81,"./packet":93,"./port":104,"./process/manager":110,"./schemas":115,"./setting":120,"./validate":127}],168:[function(require,module,exports){
var Loader = function() {

  // will be replaced with the json.
  this.dependencies = {};
  this.nodeDefinitions = {"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}":{"dom":{"image":{"id":"17a5ad06-defb-482d-a53e-4bfc602ff1df","async":true,"description":"Create an image","fn":"on.input.src = function() {\n  var img = new Image();\n  img.onload = function() {\n    output( { image: $.create(this) } );\n  }.bind(img);\n  img.src = $.src;\n}\n","name":"image","ns":"dom","phrases":{"active":"Creating Image"},"ports":{"input":{"src":{"type":"string","async":true,"title":"Source path"}},"output":{"image":{"type":"object","title":"Image"}}},"provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"querySelector":{"id":"f8e6fc73-3bee-4ffa-8fb7-78d1f18c884a","description":"[Document query selector](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelector)","expose":["document"],"fn":"var el;\nif ($.element) {\n  el = $.element;\n  output = {\n    element: $.get('element') \n  };\n} else {\n  el = document;\n  output = {\n    element: $.create(el) \n  };\n}\n\nvar selection = el.querySelector($.selector);\nif(selection) {\n  output.selection = $.create(selection);\n} else {\n  output.error = $.create(Error('Selector ' + $.selector + ' did not match'));\n}\n","name":"querySelector","ns":"dom","phrases":{"active":"Gathering elements matching criteria: {{input.selector}}"},"ports":{"input":{"element":{"title":"Element","type":"HTMLElement","default":null},"selector":{"title":"Selector","type":"string"}},"output":{"element":{"title":"Element","type":"HTMLElement"},"selection":{"title":"Selection","type":"HTMLElement"},"error":{"title":"Error","type":"Error"}}},"title":"querySelector","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"setHtml":{"id":"889ad5ed-7fac-403b-bad3-406103c33638","async":true,"description":"dom setHtml","fn":"on.input.html = function() {\n  $.element.innerHTML = $.html;\n  output({ element: $.get('element') });\n};\n","name":"setHtml","ns":"dom","phrases":{"active":"Adding html"},"ports":{"input":{"element":{"type":"HTMLElement","title":"Dom Element"},"html":{"type":"string","format":"html","title":"html","async":true}},"output":{"element":{"type":"HTMLElement","title":"Dom Element"}}},"provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"addMouseEvent":{"id":"12379c11-0b3d-42d0-ba36-2eaaa4eb5c50","async":true,"description":"Add Mouse Event Listener","fn":"state.in = undefined;\nstate.event = null;\nstate.preventDefault = null;\n\nstate.clickHandler = function(ev) {\n  if(state.preventDefault) ev.preventDefault();\n  output({\n    out: $.clone('in', state.in),\n    event: $.create(ev)\n  });\n};\n\non.input.in = function() {\n  state.in = $.in;\n};\n\non.input.element = function() {\n  if (state.in === undefined) return false;\n\n  if(state.el) {\n    state.el.removeEventListener(state.event);\n  }\n  state.el = $.element;\n  state.event = $.event;\n  state.preventDefault = $.preventDefault;\n\n  state.el.addEventListener($.event, state.clickHandler, false);\n  output({element: $.get('element')});\n};\n","name":"addMouseEvent","ns":"dom","phrases":{"active":"Adding {{input.event}} handler"},"ports":{"input":{"in":{"title":"Input","type":"any","async":true,"default":null},"element":{"type":"HTMLElement","title":"Dom Element","async":true},"preventDefault":{"type":"boolean","title":"Prevent Default Event","default":true},"event":{"type":"string","enum":["click","dblclick","mousedown","mouseup","mouseover","mousemove","mouseout","dragstart","drag","dragenter","dragleave","dragover","drop","dragend"],"title":"Dom Event"}},"output":{"element":{"type":"any","title":"Element"},"out":{"type":"any","title":"Output"},"event":{"type":"MouseEvent","title":"Event"}}},"provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"alert":{"id":"de9d9a33-23fa-4ee6-ba50-4c4a47018f2f","description":"Alert","fn":"on.input.message = function() {\n  alert($.message);\n};\n","name":"alert","ns":"dom","phrases":{"active":"Showing alert"},"ports":{"input":{"message":{"title":"Message","type":"any","required":true}}},"title":"Alert","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"}},"canvas":{"getContext":{"id":"75606c45-7456-47fc-87fe-cf3734983503","async":true,"description":"Get Canvas Context","fn":"on.input.canvas = function() {\n  output({\n    context: $.create($.canvas.getContext('2d'))\n  });\n};\n","name":"getContext","ns":"canvas","phrases":{"active":"Getting context"},"ports":{"input":{"canvas":{"title":"Canvas","async":true,"type":["HTMLCanvasElement","Canvas"]}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Get Context","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"drawImage":{"id":"ba242847-1fa6-449f-acd7-e75cd448648b","async":true,"description":"","fn":"on.input.image = function() {\n  var args = [$.image];\n\n  if($.args.sx && $.args.sy && $.args.sw && $.args.sh) {\n    args.push($.args.sx);\n    args.push($.args.sy);\n    args.push($.args.sw);\n    args.push($.args.sh);\n  }\n\n  args.push($.args.dx || 0);\n  args.push($.args.dy || 0);\n\n  if($.args.dw) {\n    args.push($.args.dw);\n    if($.args.dh) {\n      args.push($.args.dh);\n    }\n  }\n\n  $.context.drawImage.apply($.context, args);\n  output({\n    context: $.get('context')\n  });\n};\n","name":"drawImage","ns":"canvas","phrases":{"active":"Drawing image"},"ports":{"input":{"context":{"title":"Context","type":"CanvasRenderingContext2D"},"image":{"title":"Image","type":["HTMLElement","Image"],"async":true},"args":{"title":"Dimensions","type":"object","properties":{"dx":{"title":"Destination X","type":"number","description":"The X coordinate in the destination canvas at which to place the top-left corner of the source image.","default":0},"dy":{"title":"Destination Y","type":"number","description":"The Y coordinate in the destination canvas at which to place the top-left corner of the source image.","default":0},"dw":{"title":"Destination Width","type":"number","description":"The width to draw the image in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.","required":false},"dh":{"title":"Destination Height","type":"number","description":"The height to draw the image in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.","required":false},"sx":{"title":"Source X","type":"number","description":"The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.","required":false},"sy":{"title":"Source Y","type":"number","description":"The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.","required":false},"sw":{"title":"Source Width","type":"number","description":"The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by sx and sy to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.","required":false},"sh":{"title":"Source Height","type":"number","description":"The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.","required":false}}}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Draw Image","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"beginPath":{"id":"587f635a-54f4-406f-b593-426a9ddb7028","async":true,"description":"Begin path","fn":"on.input.context = function() {\n  $.context.beginPath();\n  output({ context: $.get('context') });\n};\n","name":"beginPath","ns":"canvas","phrases":{"active":"Beginning path"},"ports":{"input":{"context":{"title":"Context","async":true,"type":"CanvasRenderingContext2D","required":true}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Begin Path","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"moveTo":{"id":"85e6d19c-c6e6-4fc5-9c61-c44a22a7b061","async":true,"description":"Moves the starting point of a new subpath to the (x, y) coordinates","fn":"on.input.in = function() {\n  $.context.moveTo($.in.x, $.in.y);\n  output({\n    context: $.get('context'),\n    out: $.get('in')\n  });\n};\n","name":"moveTo","ns":"canvas","phrases":{"active":"Moving"},"ports":{"input":{"context":{"title":"Context","type":"CanvasRenderingContext2D","required":true},"in":{"title":"Point","async":true,"type":"object","required":true,"properties":{"x":{"type":"number","title":"X"},"y":{"type":"number","title":"Y"}}}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"},"out":{"title":"Point","type":"array"}}},"title":"Move To","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"lineTo":{"id":"e05a6e0c-88c1-4697-8e46-efe779340d2c","async":true,"description":"Connects the last point in the subpath to the x, y coordinates with a straight line","fn":"on.input.in = function() {\n  $.context.lineTo($.in.x, $.in.y);\n  output({\n    context: $.get('context'),\n    out: $.get('in')\n  });\n};\n","name":"lineTo","ns":"canvas","phrases":{"active":"Moving"},"ports":{"input":{"context":{"title":"Context","type":"CanvasRenderingContext2D","required":true},"in":{"title":"Point","async":true,"type":"object","required":true,"properties":{"x":{"type":"number","title":"X","description":"The x axis of the coordinate for the end of the line"},"y":{"type":"number","title":"Y","description":"The y axis of the coordinate for the end of the line"}}}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"},"out":{"title":"Point","type":"array"}}},"title":"Line To","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"stroke":{"id":"3b5b18d5-97a2-48ed-b4b3-c4e9907f82e5","async":true,"description":"Stroke","fn":"on.input.context = function() {\n  $.context.stroke();\n  output({ context: $.get('context') });\n};\n","name":"stroke","ns":"canvas","phrases":{"active":"Stroking path"},"ports":{"input":{"context":{"title":"Context","async":true,"type":"CanvasRenderingContext2D","required":true}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Stroke","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"rotate":{"id":"c9e685df-0ce6-410c-aeea-696855c6141f","async":true,"description":"Rotate Context","fn":"on.input.angle = function() {\n  $.context.rotate($.angle);\n  output({\n    context: $.get('context')\n  });\n};\n","name":"rotate","ns":"canvas","phrases":{"active":"Rotating"},"ports":{"input":{"context":{"title":"Context","type":"CanvasRenderingContext2D","required":true},"angle":{"title":"Angle","async":true,"type":"number","required":true}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Rotate","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"setAttributes":{"id":"138994b8-32e4-4ad2-807b-665e5235427b","async":true,"description":"Sets one or more attributes","fn":"on.input.in = function() {\n  for(var k in $.in) {\n    $.context[k] = $.in[k];\n  }\n  output({\n    context: $.get('context')\n  });\n};\n","name":"setAttributes","ns":"canvas","phrases":{"active":"Setting attributes"},"ports":{"input":{"context":{"title":"Context","type":"CanvasRenderingContext2D","required":true},"in":{"title":"Attributes","type":"object","async":true,"required":true,"properties":{"fillStyle":{"type":"string","title":"Fill Style","description":"Color or style to use inside shapes. Default #000 (black).","format":"color","default":"#000"},"font":{"type":"string","title":"Font","default":"10px sans-serif"},"globalAlpha":{"type":"number","title":"Global Alpha","description":"globalAlpha float Alpha value that is applied to shapes and images before they are composited onto the canvas. Default 1.0 (opaque).","default":1},"globalCompositeOperation":{"title":"Global Composite Operation","description":"With globalAlpha applied this sets how shapes and images are drawn onto the existing bitmap.","enum":["source-atop","source-in","source-out","source-over","destination-atop","destination-in","destination-out","destination-over","lighter","darker","copy","xor"],"default":"source-over"},"lineCap":{"enum":["butt","round","square"],"title":"Line Cap","description":"Type of endings on the end of lines.","default":"butt"},"lineDashOffset":{"type":"number","title":"Line Dash Offset","description":"Specifies where to start a dasharray on a line."},"lineJoin":{"enum":["miter","round","bevel"],"title":"Line Join","description":"Defines the type of corners where two lines meet.","default":"miter"},"lineWidth":{"type":"number","title":"Line Width","description":"Width of lines","default":1},"miterLimit":{"type":"number","title":"Miter Limit","default":10},"shadowBlur":{"type":"number","title":"Shadow Blur","description":"float Specifies the blurring effect.","default":0},"shadowColor":{"type":"string","title":"Shadow Color","description":"Color of the shadow. Default fully-transparent black.","format":"color","default":0},"shadowOffsetX":{"type":"number","title":"Shadow Offset X","description":"Horizontal distance the shadow will be offset.","default":0},"shadowOffsetY":{"type":"number","title":"Shadow Offset Y","description":"Vertical distance the shadow will be offset.","default":0},"strokeStyle":{"type":"string","title":"Stroke style","description":"Color or style to use for the lines around shapes.","format":"color","default":"#000"},"textAlign":{"enum":["start","end","left","right","center"],"title":"Text Align","default":"start"},"textBaseline":{"enum":["top","hanging","middle","alphabetic","ideographic","bottom"],"title":"Text Baseline","default":"alphabetic"}}}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Set Attributes","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"fill":{"id":"0fa4e958-abee-4384-9b88-c49709437565","async":true,"description":"Fill Context","fn":"on.input.context = function() {\n  $.context.fill();\n  output({ context: $.get('context') });\n};\n","name":"fill","ns":"canvas","phrases":{"active":"Filling context"},"ports":{"input":{"context":{"title":"Context","async":true,"type":"CanvasRenderingContext2D","required":true}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Fill","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"translate":{"id":"e0f4b777-95a6-44e0-9b87-8db6870a46c0","async":true,"description":"Moves the origin point of the context to (x, y)","fn":"on.input.in = function() {\n  $.context.translate($.in.x, $.in.y);\n  output({\n    context: $.get('context'),\n    out: $.get('in')\n  });\n};\n","name":"translate","ns":"canvas","phrases":{"active":"Translating context"},"ports":{"input":{"context":{"title":"Context","type":"CanvasRenderingContext2D","required":true},"in":{"title":"Point","async":true,"type":"object","required":true,"properties":{"x":{"type":"number","title":"X"},"y":{"type":"number","title":"Y"}}}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"},"out":{"title":"Point","type":"array"}}},"title":"Translate","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"strokeText":{"id":"78dfc309-b694-475d-9b2e-1ed2806e64ea","async":true,"description":"Stroke Text","fn":"on.input.context = function() {\n  $.context.strokeText($.text, $.x, $.y);\n  output({ context: $.get('context') });\n};\n","name":"strokeText","ns":"canvas","phrases":{"active":"Stroking text"},"ports":{"input":{"text":{"title":"Text","type":"string","required":true},"x":{"title":"X","type":"number","required":true,"default":0},"y":{"title":"Y","type":"number","required":true,"default":0},"context":{"title":"Context","async":true,"type":"CanvasRenderingContext2D","required":true}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Stroke Text","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"save":{"id":"1b76af5d-6297-4810-8dc6-8bbc88b84d5d","async":true,"description":"Save Context","fn":"on.input.context = function() {\n  $.context.save();\n  output({ context: $.get('context') });\n};\n","name":"save","ns":"canvas","phrases":{"active":"Saving context"},"ports":{"input":{"context":{"title":"Context","async":true,"type":"CanvasRenderingContext2D","required":true}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Save","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"restore":{"id":"e978f530-92c8-43bd-be71-750ab1fd5cf2","async":true,"description":"Restore Context","fn":"on.input.context = function() {\n  $.context.restore();\n  output({\n    context: $.get('context')\n  });\n};\n","name":"restore","ns":"canvas","phrases":{"active":"Restoring"},"ports":{"input":{"context":{"title":"Context","type":"CanvasRenderingContext2D","required":true}},"output":{"context":{"title":"Context","type":"CanvasRenderingContext2D"}}},"title":"Restore","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"}},"math":{"degreesToRadians":{"id":"e834dbcc-30d3-41d9-9525-381884742933","async":true,"description":"Convert degrees to radians","fn":"on.input.in = function() {\n  output( { out: $.write('in', $.in * (Math.PI / 180)) } );\n}\n","name":"degreesToRadians","ns":"math","phrases":{"active":"Converting degrees to radians"},"ports":{"input":{"in":{"title":"Degrees","type":"number","async":true,"required":true}},"output":{"out":{"title":"Radians","type":"number"}}},"provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"multiply":{"id":"fdbc195f-e617-43eb-b6ce-4e9883349b4d","description":"Computes x * y","fn":"output.out = $.create($.x * $.y)\n","name":"multiply","ns":"math","phrases":{"active":"Multiplying"},"ports":{"input":{"x":{"title":"Number","type":"number","required":true},"y":{"title":"Number","type":"number","required":true}},"output":{"out":{"title":"out","type":"number"}}},"provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"}},"date":{"create":{"id":"12de91f2-92ad-4f2d-bc8d-0d23445fe786","description":"Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January, 1970 UTC.","fn":"if($.value) {\n  output.out = $.create(new Date($.value));\n} else {\n  output.out = $.create(new Date());\n}\n","name":"create","ns":"date","phrases":{"active":"Creating Date"},"ports":{"input":{"in":{"title":"Value","type":"number","description":"Integer value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch).","default":null}},"output":{"out":{"title":"Date","type":"Date"}}},"title":"Create Date","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"},"getSeconds":{"id":"3d3b1d55-1c45-4c61-a2c0-e72b6d9a8fd1","async":true,"description":"The seconds (0-59) in the specified date according to local time.","fn":"on.input.in = function() {\n  output({\n    out: $.write('in', $.in.getSeconds())\n  });\n}\n","name":"getSeconds","ns":"date","phrases":{"active":"Getting Seconds"},"ports":{"input":{"in":{"title":"Date","type":"Date","async":true}},"output":{"out":{"title":"Seconds","type":"number","description":"The seconds (0-59) in the specified date according to local time."}}},"title":"Get Seconds","provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"}},"utils":{"wait":{"id":"972af0e3-0d28-49f5-8fe6-4d4cfdd16a0e","async":true,"description":"Holds the input for a while","expose":["setTimeout"],"fn":"on.input.in = function() {\n  setTimeout(function () {\n    output({out: $.get('in')});\n  }, $.timeout);\n};\n","name":"wait","ns":"utils","phrases":{"active":"Holding input for {{input.timeout}} milliseconds."},"ports":{"input":{"in":{"type":"any","title":"Input","description":"Input to be delayed","async":true},"timeout":{"type":"number","title":"Timeout","description":"Timeout in milliseconds","format":"time"}},"output":{"out":{"type":"any","title":"Output","description":"Outputs the delayed input"}}},"provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"}},"console":{"log":{"id":"590fc4ed-596f-408d-a6fb-df5de3e12947","async":true,"description":"Console log","fn":"on.input.msg = function() {\n  console.log($.msg);\n  output( { out: $.get('msg') });\n}\n","name":"log","ns":"console","phrases":{"active":"Logging to console"},"ports":{"input":{"msg":{"type":"any","title":"Log message","description":"Logs a message to the console","async":true,"required":true}},"output":{"out":{"type":"any","title":"Log message"}}},"provider":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"}}}};

};

Loader.prototype.hasNodeDefinition = function(nodeId) {

  return !!this.nodes[nodeId];

};

Loader.prototype.getNodeDefinition = function(node, map) {

  if (!this.nodeDefinitions[node.provider]) {

    // needed for subgraphs
    if (map.providers && map.providers[node.provider]) {
      node.provider = map.providers[node.provider].path ||
        map.providers[node.provider].url;
    } else if (map.providers && map.providers['@']) {
      node.provider = map.providers['@'].path ||
        map.providers['@'].url;
    } else {
      throw new Error('Node Provider not found for ' + node.name);
    }
  }

  return this.nodeDefinitions[node.provider][node.ns][node.name];

};

var Flow = require('@chix/flow').Flow;
var loader = new Loader();

var map = {"type":"flow","nodes":[{"id":"DomImage","title":"DomImage","ns":"dom","name":"image","context":{"src":"http://www.dhtmlgoodies.com/tutorials/canvas-clock/images/Clock_Face_2_by_AGF81.png"}},{"id":"DomQuerySelector","title":"DomQuerySelector","ns":"dom","name":"querySelector"},{"id":"DomSetHtml","title":"DomSetHtml","ns":"dom","name":"setHtml"},{"id":"CanvasGetContext","title":"CanvasGetContext","ns":"canvas","name":"getContext"},{"id":"CanvasDrawImage","title":"CanvasDrawImage","ns":"canvas","name":"drawImage","context":{"args":{"dx":-225,"dy":-225,"dw":450,"dh":450}}},{"id":"DomQuerySelector2","title":"DomQuerySelector2","ns":"dom","name":"querySelector"},{"id":"MathDegreesToRadians","title":"MathDegreesToRadians","ns":"math","name":"degreesToRadians"},{"id":"DateCreate","title":"DateCreate","ns":"date","name":"create"},{"id":"DateGetSeconds","title":"DateGetSeconds","ns":"date","name":"getSeconds"},{"id":"CanvasBeginPath","title":"CanvasBeginPath","ns":"canvas","name":"beginPath"},{"id":"CanvasMoveTo","title":"CanvasMoveTo","ns":"canvas","name":"moveTo","context":{"in":{"x":0,"y":0}}},{"id":"CanvasLineTo","title":"CanvasLineTo","ns":"canvas","name":"lineTo","context":{"in":{"x":-4,"y":-10}}},{"id":"CanvasLineTo2","title":"CanvasLineTo2","ns":"canvas","name":"lineTo","context":{"in":{"x":0,"y":-150}}},{"id":"CanvasLineTo3","title":"CanvasLineTo3","ns":"canvas","name":"lineTo","context":{"in":{"x":4,"y":-10}}},{"id":"CanvasLineTo4","title":"CanvasLineTo4","ns":"canvas","name":"lineTo","context":{"in":{"x":0,"y":0}}},{"id":"CanvasStroke","title":"CanvasStroke","ns":"canvas","name":"stroke"},{"id":"MathMultiply","title":"MathMultiply","ns":"math","name":"multiply","context":{"y":6}},{"id":"CanvasRotate","title":"CanvasRotate","ns":"canvas","name":"rotate"},{"id":"CanvasSetAttributes","title":"CanvasSetAttributes","ns":"canvas","name":"setAttributes","context":{"in":{"fillStyle":"blue","globalAlpha":0.8,"globalCompositeOperation":"destination-atop","lineCap":"butt","lineJoin":"miter","lineWidth":5,"shadowBlur":0.8,"shadowColor":"green","strokeStyle":"yellow","textAlign":"start","textBaseline":"top"}}},{"id":"CanvasFill","title":"CanvasFill","ns":"canvas","name":"fill"},{"id":"CanvasTranslate","title":"CanvasTranslate","ns":"canvas","name":"translate","context":{"in":{"x":225,"y":225}}},{"id":"UtilWait","title":"UtilWait","ns":"utils","name":"wait","context":{"timeout":1000}},{"id":"ConsoleLog","title":"ConsoleLog","ns":"console","name":"log"},{"id":"CanvasStrokeText","title":"CanvasStrokeText","ns":"canvas","name":"strokeText","context":{"text":"Rob Halff","x":-40,"y":-40}},{"id":"CanvasSave","title":"CanvasSave","ns":"canvas","name":"save"},{"id":"ConsoleLog2","title":"ConsoleLog2","ns":"console","name":"log"},{"id":"DomAddMouseEvent","title":"DomAddMouseEvent","ns":"dom","name":"addMouseEvent","context":{"preventDefault":true,"event":"click"}},{"id":"DomAlert","title":"DomAlert","ns":"dom","name":"alert"},{"id":"DateCreate2","title":"DateCreate2","ns":"date","name":"create"},{"id":"CanvasRestore","title":"CanvasRestore","ns":"canvas","name":"restore"},{"id":"CanvasSetAttributes2","title":"CanvasSetAttributes2","ns":"canvas","name":"setAttributes","context":{"in":{"globalCompositeOperation":"destination-over","lineCap":"butt","lineJoin":"miter","textAlign":"start","textBaseline":"top"}}}],"links":[{"source":{"id":"DomQuerySelector","port":"selection"},"target":{"id":"DomSetHtml","port":"element"},"metadata":{"title":"DomQuerySelector selection -> element DomSetHtml"}},{"source":{"id":"DomImage","port":"image"},"target":{"id":"CanvasDrawImage","port":"image","setting":{"persist":true}},"metadata":{"title":"DomImage image -> image CanvasDrawImage"}},{"source":{"id":"DomSetHtml","port":"element"},"target":{"id":"DomQuerySelector2","port":"element"},"metadata":{"title":"DomSetHtml element -> element DomQuerySelector2"}},{"source":{"id":"DomQuerySelector2","port":"selection"},"target":{"id":"CanvasGetContext","port":"canvas"},"metadata":{"title":"DomQuerySelector2 selection -> canvas CanvasGetContext"}},{"source":{"id":"DateCreate","port":"out"},"target":{"id":"DateGetSeconds","port":"in"},"metadata":{"title":"DateCreate out -> in DateGetSeconds"}},{"source":{"id":"CanvasMoveTo","port":"context"},"target":{"id":"CanvasLineTo","port":"context"},"metadata":{"title":"CanvasMoveTo context -> context CanvasLineTo"}},{"source":{"id":"CanvasLineTo","port":"context"},"target":{"id":"CanvasLineTo2","port":"context"},"metadata":{"title":"CanvasLineTo context -> context CanvasLineTo2"}},{"source":{"id":"CanvasLineTo2","port":"context"},"target":{"id":"CanvasLineTo3","port":"context"},"metadata":{"title":"CanvasLineTo2 context -> context CanvasLineTo3"}},{"source":{"id":"CanvasLineTo3","port":"context"},"target":{"id":"CanvasLineTo4","port":"context"},"metadata":{"title":"CanvasLineTo3 context -> context CanvasLineTo4"}},{"source":{"id":"MathDegreesToRadians","port":"out"},"target":{"id":"CanvasRotate","port":"angle"},"metadata":{"title":"MathDegreesToRadians out -> angle CanvasRotate"}},{"source":{"id":"CanvasLineTo4","port":"context"},"target":{"id":"CanvasFill","port":"context"},"metadata":{"title":"CanvasLineTo4 context -> context CanvasFill"}},{"source":{"id":"CanvasFill","port":"context"},"target":{"id":"CanvasStroke","port":"context"},"metadata":{"title":"CanvasFill context -> context CanvasStroke"}},{"source":{"id":"CanvasGetContext","port":"context"},"target":{"id":"CanvasTranslate","port":"context"},"metadata":{"title":"CanvasGetContext context -> context CanvasTranslate"}},{"source":{"id":"DateGetSeconds","port":"out"},"target":{"id":"MathMultiply","port":"x"},"metadata":{"title":"DateGetSeconds out -> x MathMultiply"}},{"source":{"id":"MathMultiply","port":"out"},"target":{"id":"MathDegreesToRadians","port":"in"},"metadata":{"title":"MathMultiply out -> in MathDegreesToRadians"}},{"source":{"id":"MathMultiply","port":"out"},"target":{"id":"ConsoleLog","port":"msg"},"metadata":{"title":"MathMultiply out -> msg ConsoleLog"}},{"source":{"id":"DomQuerySelector2","port":"selection"},"target":{"id":"DomAddMouseEvent","port":"element"},"metadata":{"title":"DomQuerySelector2 selection -> element DomAddMouseEvent"}},{"source":{"id":"DomAddMouseEvent","port":"event"},"target":{"id":"ConsoleLog2","port":"msg"},"metadata":{"title":"DomAddMouseEvent event -> msg ConsoleLog2"}},{"source":{"id":"DomAddMouseEvent","port":"event"},"target":{"id":"DomAlert","port":"message"},"metadata":{"title":"DomAddMouseEvent event -> message DomAlert"}},{"source":{"id":"DateGetSeconds","port":"out"},"target":{"id":"UtilWait","port":"in"},"metadata":{"title":"DateGetSeconds out -> in UtilWait"}},{"source":{"id":"UtilWait","port":"out"},"target":{"id":"DateCreate2","port":":start"},"metadata":{"title":"UtilWait out -> :start DateCreate2"}},{"source":{"id":"DateCreate2","port":"out"},"target":{"id":"DateGetSeconds","port":"in"},"metadata":{"title":"DateCreate2 out -> in DateGetSeconds"}},{"source":{"id":"DateCreate2","port":"out"},"target":{"id":"DateGetSeconds","port":":start"},"metadata":{"title":"DateCreate2 out -> :start DateGetSeconds"}},{"source":{"id":"DateCreate","port":"out"},"target":{"id":"DateGetSeconds","port":":start"},"metadata":{"title":"DateCreate out -> :start DateGetSeconds"}},{"source":{"id":"CanvasBeginPath","port":"context"},"target":{"id":"CanvasRotate","port":"context"},"metadata":{"title":"CanvasBeginPath context -> context CanvasRotate"}},{"source":{"id":"CanvasRotate","port":"context"},"target":{"id":"CanvasMoveTo","port":"context"},"metadata":{"title":"CanvasRotate context -> context CanvasMoveTo"}},{"source":{"id":"CanvasStroke","port":"context"},"target":{"id":"CanvasRestore","port":"context"},"metadata":{"title":"CanvasStroke context -> context CanvasRestore"}},{"source":{"id":"CanvasSave","port":"context"},"target":{"id":"CanvasSetAttributes","port":"context"},"metadata":{"title":"CanvasSave context -> context CanvasSetAttributes"}},{"source":{"id":"CanvasSetAttributes","port":"context"},"target":{"id":"CanvasBeginPath","port":"context"},"metadata":{"title":"CanvasSetAttributes context -> context CanvasBeginPath"}},{"source":{"id":"CanvasTranslate","port":"context"},"target":{"id":"CanvasSave","port":"context"},"metadata":{"title":"CanvasTranslate context -> context CanvasSave"}},{"source":{"id":"CanvasSetAttributes2","port":"context"},"target":{"id":"CanvasStrokeText","port":"context"},"metadata":{"title":"CanvasSetAttributes2 context -> context CanvasStrokeText"}},{"source":{"id":"CanvasRestore","port":"context"},"target":{"id":"CanvasSetAttributes2","port":"context"},"metadata":{"title":"CanvasRestore context -> context CanvasSetAttributes2"}},{"source":{"id":"CanvasStrokeText","port":"context"},"target":{"id":"CanvasSave","port":"context"},"metadata":{"title":"CanvasStrokeText context -> context CanvasSave"}},{"source":{"id":"CanvasGetContext","port":"context"},"target":{"id":"CanvasDrawImage","port":"context"},"metadata":{"title":"CanvasGetContext context -> context CanvasDrawImage"}}],"title":"Clock","ns":"clock","name":"example","id":"ClockExample","providers":{"@":{"url":"https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"}}};

var actor;
window.Actor = actor = Flow.create('main', map, loader);


function onDeviceReady() {
  actor.push();
  actor.sendIIPs([{"source":{"id":"ClockExample","port":":iip"},"target":{"id":"DomImage","port":":start"},"metadata":{"title":"Clock :iip -> :start DomImage"},"data":""},{"source":{"id":"ClockExample","port":":iip"},"target":{"id":"DateCreate","port":":start"},"metadata":{"title":"Clock :iip -> :start DateCreate"},"data":""},{"source":{"id":"ClockExample","port":":iip"},"target":{"id":"DomQuerySelector","port":"selector","setting":{"persist":true}},"metadata":{"title":"Clock :iip -> selector DomQuerySelector"},"data":"body"},{"source":{"id":"ClockExample","port":":iip"},"target":{"id":"DomSetHtml","port":"html"},"metadata":{"title":"Clock :iip -> html DomSetHtml"},"data":"<canvas height=\"450\" width=\"450\"></canvas>"},{"source":{"id":"ClockExample","port":":iip"},"target":{"id":"DomQuerySelector2","port":"selector","setting":{"persist":true}},"metadata":{"title":"Clock :iip -> selector DomQuerySelector2"},"data":"canvas"}]);
};

if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|IEMobile)/)) {
  document.addEventListener("deviceready", onDeviceReady, false);
} else {
  document.addEventListener("DOMContentLoaded" , onDeviceReady); //this is the browser
}

// for entry it doesn't really matter what is the module.
// as long as this module is loaded.
module.exports = actor;

},{"@chix/flow":"chix-flow"}]},{},[168]);
