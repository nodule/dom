title: Mouse event example

Actor(core/actor)

MouseMove(dom/addMouseEvent)
MouseClick(dom/addMouseEvent)
KeyboardEvent(dom/addKeyboardEvent)

Closest(dom/closest)

BodyEl(dom/querySelector)
CanvasEl(dom/querySelector)
PanelEl(dom/querySelector)
ConnectionsEl(dom/querySelector)

UpdateMouseView(dom/setHtml)
UpdateConnectionsView(dom/setHtml)

Log(console/log)
toString(data/string)
MouseView(template/handlebars)

NodeView(template/handlebars)
ConnectionsView(template/handlebars)
ProcessManagerView(template/handlebars)

AppendNode(dom/appendChild)
CreateNode(dom/createElement)
UpdateNodeView(dom/setHtml)

Router(router/client)

# Selectors
'body'         -> selector BodyEl
'#panel'       -> selector PanelEl
'#connections' -> selector ConnectionsEl
'#canvas'      -> selector CanvasEl

# Events
'mousemove' -> event MouseMove
'click'     -> event MouseClick
'keydown'   -> event KeyboardEvent

# Event targets
CanvasEl selection ->  element MouseMove
CanvasEl selection ->  element MouseClick
CanvasEl selection -> ^element AppendNode
BodyEl selection   ->  element KeyboardEvent

# Views
'<div>x: {{clientX}}, y: {{clientY}}</div>' -> ^body MouseView
'./views/connections.hb'    ~> ^body ConnectionsView
'./views/node.hb'           ~> ^body NodeView
'./views/processManager.hb' ~> ^body ProcessManagerView

# Routes

["/items", "/#/items"] -> routes Router
Router out -> msg Log

MouseMove event -> vars MouseView out -> html UpdateMouseView

PanelEl selection       -> ^element UpdateMouseView
ConnectionsEl selection -> ^element UpdateConnectionsView

# shouldn't push() already solve this?
'' -> :start Actor

# If actor is exposed it's not showing `this` graph
# but will show whatever graph is feeded.
# actor Actor

Actor io -> ^in Poll(object/create)
Actor pm -> ^in PMPoll(object/create)

# Creates node divs
Actor pm [processes]   ->      in NodeValues(object/values)
'div'                  ->      in CreateNode
CreateNode out         -> element UpdateNodeView
NodeValues out         =>  :start CreateNode
NodeValues out         =>    vars NodeView
NodeView out           ->    html UpdateNodeView
UpdateNodeView element ->   child AppendNode
#NodeValues out -> msg Log
#NodeView out -> msg Log

# On mouse move update connections panel
MouseMove event -> :start Poll out -> vars ConnectionsView out -> html UpdateConnectionsView

# Find closes .node on mouse click
'.node' -> ^selector Closest
MouseClick event [target] -> element Closest selection -> msg Log
MouseClick event -> msg Log

# Poll process manager on any key
KeyboardEvent event -> :start PMPoll out -> vars ProcessManagerView out -> html UpdateMouseView

# MouseClick event:schema [type] ->
# MouseClick event:schema [title] ->

# Dynamic node additions (not used)
#Actor addNode  -> :start CreateNode
#Actor addNode  -> vars NodeView
