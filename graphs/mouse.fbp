title: Mouse event example

# if this works... moveing it up, :-o :p
Actor(core/actor)

MouseMove(dom/addMouseEvent)
MouseClick(dom/addMouseEvent)
KeyboardEvent(dom/addKeyboardEvent)

Closest(dom/closest)

BodyEl(dom/querySelector)
CanvasEl(dom/querySelector)
PanelEl(dom/querySelector)
ConnectionsEl(dom/querySelector)

SetHtml(dom/setHtml)
UpdateConnections(dom/setHtml)

Log(console/log)
toString(data/string)
HandleMe(template/handlebars)

NodeView(template/handlebars)
IOManagerView(template/handlebars)
ProcessManagerView(template/handlebars)

AppendNode(dom/appendChild)
CreateNode(dom/createElement)
NodeHtml(dom/setHtml)


'body'         -> selector BodyEl
'#panel'       -> selector PanelEl
'#connections' -> selector ConnectionsEl
'#canvas'      -> selector CanvasEl

'mousemove' -> event MouseMove
'click'     -> event MouseClick
'keydown'   -> event KeyboardEvent

'div' -> in CreateNode

CanvasEl selection -> element MouseMove
CanvasEl selection -> element MouseClick
#BodyEl selection -> element KeyboardEvent

CanvasEl selection -> ^element AppendNode

'<div>x: {{clientX}}, y: {{clientY}}</div>' -> ^body HandleMe
'./views/connections.hb'    ~> ^body IOManagerView
'./views/node.hb'           ~> ^body NodeView
'./views/processManager.hb' ~> ^body ProcessManagerView

#MouseMove event [y] -> [x] in toString out -> html SetHtml
#MouseMove event [x] -> msg Log
MouseMove event -> vars HandleMe out -> html SetHtml

'I should be replaced!' -> html SetHtml

PanelEl selection -> ^element SetHtml
ConnectionsEl selection -> ^element UpdateConnections

'' -> :start Actor

Actor io -> ^in Poll(object/create)
Actor pm -> ^in PMPoll(object/create)

# setup for this is too late unfortunatly.
#
#Actor addNode  -> :start CreateNode
CreateNode out -> element NodeHtml
#Actor addNode  -> vars NodeView

NodeView out -> html NodeHtml
NodeHtml element -> child AppendNode

# should be converted to array.
Actor pm [processes] -> in NodeValues(object/values)
NodeValues out => :start CreateNode
NodeValues out => vars NodeView

#MouseClick event -> :start Poll out -> vars ClickMeForQueueUpdate out -> html SetHtml
MouseMove event -> :start Poll out -> vars IOManagerView out -> html UpdateConnections
# Poll out -> msg Log
MouseClick event -> msg Log

'.node' -> ^selector Closest
MouseClick event [target] -> element Closest selection -> msg Log
KeyboardEvent event -> :start PMPoll out -> vars ProcessManagerView out -> html SetHtml

# MouseClick event:schema [type] ->
# MouseClick event:schema [title] ->

#MouseMove event [clientX] -> msg Log
#MouseMove event [clientY] -> msg Log
#MouseMove event [keyCode] -> msg Log
#MouseMove event [toElement] -> msg Log
#MouseMove event [fromElement] -> msg Log2(console/log)
