title: Mouse event example

# if this works... moveing it up, :-o :p
Actor(core/actor)

MouseMove(dom/addMouseEvent)
MouseClick(dom/addMouseEvent)
KeyboardEvent(dom/addKeyboardEvent)

BodyEl(dom/querySelector)
CanvasEl(dom/querySelector)
PanelEl(dom/querySelector)

SetHtml(dom/setHtml)
Log(console/log)
toString(data/string)
HandleMe(template/handlebars)

NodeView(template/handlebars)
IOManagerView(template/handlebars)
ProcessManagerView(template/handlebars)

AppendNode(dom/appendChild)
CreateNode(dom/createElement)
NodeHtml(dom/setHtml)


'body'    -> selector BodyEl
'#panel'  -> selector PanelEl
'#canvas' -> selector CanvasEl

'mousemove' -> event MouseMove
'click'     -> event MouseClick
'keydown'   -> event KeyboardEvent

'div' -> in CreateNode

BodyEl selection -> element MouseMove
BodyEl selection -> element MouseClick
BodyEl selection -> element KeyboardEvent

CanvasEl selection -> element AppendNode

'<div>x: {{x}}, y: {{y}}</div>' -> ^body HandleMe
#'<p>queue: {{inQueue}}, TODO: queues *should* remove empty ones</div>' -> ^body ClickMeForQueueUpdate
'./views/connections.hb'    ~> ^body IOManagerView
'./views/node.hb'           ~> ^body NodeView
'./views/processManager.hb' ~> ^body ProcessManagerView

#MouseMove event [y] -> [x] in toString out -> html SetHtml
#MouseMove event [x] -> msg Log
MouseMove event -> vars HandleMe out -> html SetHtml

'I should be replaced!' -> html SetHtml

PanelEl selection -> ^element SetHtml

'' -> :start Actor

Actor io -> ^in Poll(object/create)
Actor pm -> ^in PMPoll(object/create)

# setup for this is too late unfortunatly.
#
Actor addNode  -> :start CreateNode
CreateNode out ->                   element NodeHtml
Actor addNode  -> vars NodeView out -> html NodeHtml
NodeHtml element -> element AppendNode

#MouseClick event -> :start Poll out -> vars ClickMeForQueueUpdate out -> html SetHtml
MouseClick event -> :start Poll out -> vars IOManagerView out -> html SetHtml
Poll out -> msg Log

KeyboardEvent event -> :start PMPoll out -> vars ProcessManagerView out -> html SetHtml

# Expose the schema of this output.. :-)
# MouseClick event:schema [type] ->
# MouseClick event:schema [title] ->

#MouseMove event [clientX] -> msg Log
#MouseMove event [clientY] -> msg Log
#MouseMove event [keyCode] -> msg Log
#MouseMove event [toElement] -> msg Log
#MouseMove event [fromElement] -> msg Log2(console/log)

# Ok, now what's unique about Actor pm
# Process Manager is it has access to all processes within the system.
# this means from any graph, you can pick processes from other graphs
# if you would like to. you could then truly say, you are programming..
# within .fbp :-)
# within graphs the name is unique so call them by name.
# or just query the processes for properties.
