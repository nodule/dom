{
  "name": "dom",
  "description": "DOM components for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/dom.git"
  },
  "nodes": [
    {
      "name": "addFormEvent",
      "ns": "dom",
      "description": "Add Form Event Listener",
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "event": {
            "type": "string",
            "enum": [
              "select",
              "change",
              "submit",
              "reset",
              "focus",
              "blur"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "event": {
            "type": "object",
            "title": "Event"
          }
        }
      },
      "fn": "output = [input.element, 'addEventListener', input.event];\n"
    },
    {
      "name": "addKeyboardEvent",
      "ns": "dom",
      "description": "Add Keyboard Event Listener",
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "event": {
            "type": "string",
            "enum": [
              "keydown",
              "keypress",
              "keyup"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "event": {
            "type": "object",
            "title": "Event"
          }
        }
      },
      "fn": "output = [input.element, 'addEventListener', input.event];\n"
    },
    {
      "name": "addMouseEvent",
      "ns": "dom",
      "description": "Add Mouse Event Listener",
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "preventDefault": {
            "type": "boolean",
            "title": "Prevent Default Event"
          },
          "event": {
            "type": "string",
            "enum": [
              "click",
              "dblclick",
              "mousedown",
              "mouseup",
              "mouseover",
              "mousemove",
              "mouseout",
              "dragstart",
              "drag",
              "dragenter",
              "dragleave",
              "dragover",
              "drop",
              "dragend"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "event": {
            "type": "object",
            "title": "Event"
          },
          "element": {
            "type": "any",
            "title": "Element"
          }
        }
      },
      "fn": "output = function(cb) {\n\n  input.element.addEventListener(input.event, function(ev) {\n\n    if(input.preventDefault) ev.preventDefault();\n\n    cb({\n      element: input.element,\n      event: ev\n    });\n\n  }, false);\n\n};\n"
    },
    {
      "name": "addMutationEvent",
      "ns": "dom",
      "description": "Add Mutation Event Listener",
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "event": {
            "type": "string",
            "enum": [
              "DOMSubtreeModified",
              "DOMNodeInserted",
              "DOMNodeRemoved",
              "DOMNodeRemovedFromDocument",
              "DOMNodeInsertedIntoDocument",
              "DOMAttrModified",
              "DOMCharacterDataModified"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "event": {
            "type": "object",
            "title": "Event"
          }
        }
      },
      "fn": "output = [input.element, 'addEventListener', input.event];\n"
    },
    {
      "name": "addPointerEvent",
      "ns": "dom",
      "description": "Add Pointer Event Listener",
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "event": {
            "type": "string",
            "enum": [
              "pointerdown",
              "pointerup",
              "pointercancel",
              "pointermove",
              "pointerover",
              "pointerout",
              "pointerenter",
              "pointerleave",
              "gotpointercapture",
              "lostpointercapture"
            ],
            "title": "Pointer Event"
          }
        },
        "output": {
          "event": {
            "type": "object",
            "title": "Event"
          }
        }
      },
      "fn": "output = [input.element, 'addEventListener', input.event];\n"
    },
    {
      "name": "addTouchEvent",
      "ns": "dom",
      "description": "Add Touch Event Listener",
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "event": {
            "type": "string",
            "enum": [
              "touchstart",
              "touchend",
              "touchmove",
              "touchenter",
              "touchleave",
              "touchcancel"
            ],
            "title": "Touch Event"
          }
        },
        "output": {
          "event": {
            "type": "object",
            "title": "Event"
          }
        }
      },
      "fn": "output = [input.element, 'addEventListener', input.event];\n"
    },
    {
      "name": "addUIEvent",
      "ns": "dom",
      "description": "Add UI Event Listener",
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "event": {
            "type": "string",
            "enum": [
              "focusin",
              "focusout",
              "DOMActivate"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "event": {
            "type": "object",
            "title": "Event"
          }
        }
      },
      "fn": "output = [input.element, 'addEventListener', input.event];\n"
    },
    {
      "name": "alert",
      "ns": "dom",
      "title": "Alert",
      "description": "Alert",
      "phrases": {
        "active": "Showing alert"
      },
      "ports": {
        "input": {
          "message": {
            "title": "Message",
            "type": "any",
            "required": "true"
          }
        }
      },
      "fn": "alert(input.message);\n"
    },
    {
      "name": "appendChild",
      "ns": "dom",
      "description": "dom appendChild",
      "phrases": {
        "active": "Adding child node"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "child": {
            "type": "any",
            "title": "Child Element"
          }
        },
        "output": {
          "document": {
            "type": "object"
          }
        }
      },
      "fn": "input.element.appendChild(input.child)\n"
    },
    {
      "name": "document",
      "ns": "dom",
      "description": "dom document",
      "expose": [
        "window"
      ],
      "phrases": {
        "active": "Providing the dom document of the current window"
      },
      "ports": {
        "input": {
          "window": {
            "type": "function",
            "title": "Window",
            "required": false
          }
        },
        "output": {
          "document": {
            "type": "object"
          }
        }
      },
      "fn": "win = input.window || win;\noutput = {\n  document: win.document\n}\n"
    },
    {
      "name": "getElementById",
      "ns": "dom",
      "title": "getElementById",
      "description": "[Get element by ID](https://developer.mozilla.org/en-US/docs/Web/API/document.getElementById)",
      "phrases": {
        "active": "Getting element with id: {{input.id}}"
      },
      "ports": {
        "input": {
          "document": {
            "title": "Dom Document",
            "type": "object",
            "required": "true"
          },
          "id": {
            "title": "ID",
            "type": "string",
            "required": "true"
          }
        },
        "output": {
          "element": {
            "type": "object"
          }
        }
      },
      "fn": "output = { element: input.document.getElementById(input.id) }\n"
    },
    {
      "name": "getHtml",
      "ns": "dom",
      "description": "dom getHtml",
      "phrases": {
        "active": "Getting html"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          }
        },
        "output": {
          "html": {
            "type": "string",
            "title": "HTML"
          }
        }
      },
      "fn": "output = { html: input.element.innerHTML };\n"
    },
    {
      "name": "getText",
      "ns": "dom",
      "description": "dom getText",
      "phrases": {
        "active": "Getting text"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          }
        },
        "output": {
          "text": {
            "type": "string",
            "title": "Text"
          }
        }
      },
      "fn": "output = { text: input.element.innerText };\n"
    },
    {
      "name": "height",
      "ns": "dom",
      "description": "dom height",
      "phrases": {
        "active": "Calculating height"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          }
        },
        "output": {
          "height": {
            "type": "number",
            "title": "Height"
          }
        }
      },
      "fn": "output = {\n  height: input.element.getBoundingClientRect().height\n};\n"
    },
    {
      "name": "hide",
      "ns": "dom",
      "description": "dom hide",
      "phrases": {
        "active": "Hiding"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          ":start": {
            "type": "any",
            "title": "Start"
          }
        },
        "output": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          }
        }
      },
      "fn": "input.element.style.display = 'none';\n\noutput = { element: input.element };\n"
    },
    {
      "name": "offset",
      "ns": "dom",
      "description": "dom offset",
      "phrases": {
        "active": "Calculating offset"
      },
      "ports": {
        "input": {
          "window": {
            "type": "any",
            "title": "Window"
          },
          "element": {
            "type": "any",
            "title": "Dom Element"
          }
        },
        "output": {
          "top": {
            "type": "number",
            "title": "Top"
          },
          "left": {
            "type": "number",
            "title": "Left"
          },
          "width": {
            "type": "number",
            "title": "Width"
          },
          "height": {
            "type": "number",
            "title": "Height"
          }
        }
      },
      "fn": "var rect = input.element.getBoundingClientRect();\noutput = {\n  left: rect.left + input.win.pageXOffset,\n  top: rect.top + input.win.pageYOffset,\n  width: rect.width,\n  height: rect.height\n};\n"
    },
    {
      "name": "querySelector",
      "ns": "dom",
      "title": "querySelector",
      "description": "[Document query selector](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelector)",
      "phrases": {
        "active": "Gathering elements matching criteria: {{input.selector}}"
      },
      "ports": {
        "input": {
          "document": {
            "title": "Dom Document",
            "type": "function"
          },
          "selector": {
            "title": "Selector",
            "type": "string"
          }
        },
        "output": {
          "selection": {
            "type": "object"
          }
        }
      },
      "fn": "console.log('input document', input.document);\noutput = { selection: input.document.querySelector(input.selector) }\n"
    },
    {
      "name": "querySelectorAll",
      "ns": "dom",
      "title": "querySelectorAll",
      "description": "[Document querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelectorAll)",
      "phrases": {
        "active": "Gathering all elements matching criteria: {{input.selector}}"
      },
      "ports": {
        "input": {
          "document": {
            "title": "Dom Document",
            "type": "any",
            "required": true
          },
          "selector": {
            "title": "Selector",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "selection": {
            "type": "object"
          }
        }
      },
      "fn": "output = { selection: input.document.querySelectorAll(input.selector) }\n"
    },
    {
      "name": "setHtml",
      "ns": "dom",
      "description": "dom setHtml",
      "phrases": {
        "active": "Adding html"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "html": {
            "type": "string",
            "format": "html",
            "title": "html"
          }
        },
        "output": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          }
        }
      },
      "fn": "input.element.innerHTML = input.html;\noutput = { element: input.element };\n"
    },
    {
      "name": "setText",
      "ns": "dom",
      "description": "dom setText",
      "phrases": {
        "active": "Adding text"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          "text": {
            "type": "string",
            "title": "text"
          }
        },
        "output": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          }
        }
      },
      "fn": "input.element.innerText = input.text;\noutput = { element: input.element };\n"
    },
    {
      "name": "show",
      "ns": "dom",
      "description": "dom show",
      "phrases": {
        "active": "Showing"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          },
          ":start": {
            "type": "any",
            "title": "Start"
          }
        },
        "output": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          }
        }
      },
      "fn": "input.element.style.display = 'block';\n\noutput = { element: input.element };\n"
    },
    {
      "name": "warp",
      "ns": "dom",
      "description": "dom warp",
      "expose": [
        "window",
        "document"
      ],
      "phrases": {
        "active": "Warping to frame {{input.selector}}"
      },
      "ports": {
        "input": {
          "selector": {
            "type": "string",
            "title": "Frame Selector",
            "required": true
          }
        },
        "output": {
          "window": {
            "type": "function",
            "title": "Window",
            "required": false
          }
        }
      },
      "fn": "output = {\n  window: document.querySelector(input.selector).contentWindow\n}\n"
    },
    {
      "name": "width",
      "ns": "dom",
      "description": "dom width",
      "phrases": {
        "active": "Calculating width"
      },
      "ports": {
        "input": {
          "element": {
            "type": "any",
            "title": "Dom Element"
          }
        },
        "output": {
          "width": {
            "type": "number",
            "title": "Width"
          }
        }
      },
      "fn": "output = {\n  width: input.element.getBoundingClientRect().width\n};\n"
    }
  ],
  "twigs": []
}