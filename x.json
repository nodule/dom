{
  "name": "dom",
  "description": "DOM components for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/dom.git"
  },
  "dependencies": {
    "alert": "0.0.2",
    "discore-closest": "^0.2.0",
    "domify": "1.x.x",
    "domready": "1.x.x",
    "keyboard": "0.x.x",
    "load-script": "^1.0.0",
    "scriptjs": "2.x.x"
  },
  "nodes": [
    {
      "name": "addFormEvent",
      "ns": "dom",
      "description": "Add Form Event Listener",
      "async": true,
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any",
            "async": true,
            "default": null
          },
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          },
          "preventDefault": {
            "type": "boolean",
            "title": "Prevent Default Event",
            "default": true
          },
          "event": {
            "type": "string",
            "enum": [
              "select",
              "change",
              "submit",
              "reset",
              "focus",
              "blur"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "any",
            "title": "Output"
          },
          "event": {
            "type": "Event",
            "title": "Event"
          }
        }
      },
      "fn": "state.in = undefined;\nstate.event = null;\nstate.preventDefault = null;\n\nstate.clickHandler = function(ev) {\n  if(state.preventDefault) ev.preventDefault();\n  output({\n    out: $.clone('in', state.in),\n    event: $.create(ev)\n  });\n};\n\non.input.in = function() {\n  state.in = $.in;\n};\n\non.input.element = function() {\n  if (state.in === undefined) return false;\n\n  if(state.el) {\n    state.el.removeEventListener(state.event);\n  }\n  state.el = $.element;\n  state.event = $.event;\n  state.preventDefault = $.preventDefault;\n\n  state.el.addEventListener($.event, state.clickHandler, false);\n  output({element: $.get('element')});\n};\n"
    },
    {
      "name": "addKeyboardEvent",
      "ns": "dom",
      "description": "Add Keyboard Event Listener",
      "async": true,
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any",
            "async": true,
            "default": null
          },
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          },
          "preventDefault": {
            "type": "boolean",
            "title": "Prevent Default Event",
            "default": true
          },
          "event": {
            "type": "string",
            "enum": [
              "keydown",
              "keypress",
              "keyup"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "any",
            "title": "Output"
          },
          "event": {
            "type": "KeyboardEvent",
            "title": "Event"
          }
        }
      },
      "fn": "state.in = undefined;\nstate.event = null;\nstate.preventDefault = null;\n\nstate.clickHandler = function(ev) {\n  if(state.preventDefault) ev.preventDefault();\n  output({\n    out: $.clone('in', state.in),\n    event: $.create(ev)\n  });\n};\n\non.input.in = function() {\n  state.in = $.in;\n};\n\non.input.element = function() {\n  if (state.in === undefined) return false;\n\n  if(state.el) {\n    state.el.removeEventListener(state.event);\n  }\n  state.el = $.element;\n  state.event = $.event;\n  state.preventDefault = $.preventDefault;\n\n  state.el.addEventListener($.event, state.clickHandler, false);\n  output({element: $.get('element')});\n};\n"
    },
    {
      "name": "addMouseEvent",
      "ns": "dom",
      "description": "Add Mouse Event Listener",
      "async": true,
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any",
            "async": true,
            "default": null
          },
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          },
          "preventDefault": {
            "type": "boolean",
            "title": "Prevent Default Event",
            "default": true
          },
          "event": {
            "type": "string",
            "enum": [
              "click",
              "dblclick",
              "mousedown",
              "mouseup",
              "mouseover",
              "mousemove",
              "mouseout",
              "dragstart",
              "drag",
              "dragenter",
              "dragleave",
              "dragover",
              "drop",
              "dragend"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "element": {
            "type": "any",
            "title": "Element"
          },
          "out": {
            "type": "any",
            "title": "Output"
          },
          "event": {
            "type": "MouseEvent",
            "title": "Event"
          }
        }
      },
      "fn": "state.in = undefined;\nstate.event = null;\nstate.preventDefault = null;\n\nstate.clickHandler = function(ev) {\n  if(state.preventDefault) ev.preventDefault();\n  output({\n    out: $.clone('in', state.in),\n    event: $.create(ev)\n  });\n};\n\non.input.in = function() {\n  state.in = $.in;\n};\n\non.input.element = function() {\n  if (state.in === undefined) return false;\n\n  if(state.el) {\n    state.el.removeEventListener(state.event);\n  }\n  state.el = $.element;\n  state.event = $.event;\n  state.preventDefault = $.preventDefault;\n\n  state.el.addEventListener($.event, state.clickHandler, false);\n  output({element: $.get('element')});\n};\n"
    },
    {
      "name": "addMutationEvent",
      "ns": "dom",
      "description": "Add Mutation Event Listener",
      "async": true,
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any",
            "async": true,
            "default": null
          },
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          },
          "preventDefault": {
            "type": "boolean",
            "title": "Prevent Default Event",
            "default": true
          },
          "event": {
            "type": "string",
            "enum": [
              "DOMSubtreeModified",
              "DOMNodeInserted",
              "DOMNodeRemoved",
              "DOMNodeRemovedFromDocument",
              "DOMNodeInsertedIntoDocument",
              "DOMAttrModified",
              "DOMCharacterDataModified"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "any",
            "title": "Output"
          },
          "event": {
            "type": "MutationEvent",
            "title": "Event"
          }
        }
      },
      "fn": "state.in = undefined;\nstate.event = null;\nstate.preventDefault = null;\n\nstate.clickHandler = function(ev) {\n  if(state.preventDefault) ev.preventDefault();\n  output({\n    out: $.clone('in', state.in),\n    event: $.create(ev)\n  });\n};\n\non.input.in = function() {\n  state.in = $.in;\n};\n\non.input.element = function() {\n  if (state.in === undefined) return false;\n\n  if(state.el) {\n    state.el.removeEventListener(state.event);\n  }\n  state.el = $.element;\n  state.event = $.event;\n  state.preventDefault = $.preventDefault;\n\n  state.el.addEventListener($.event, state.clickHandler, false);\n  output({element: $.get('element')});\n};\n"
    },
    {
      "name": "addPointerEvent",
      "ns": "dom",
      "description": "Add Pointer Event Listener",
      "async": true,
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any",
            "async": true,
            "default": null
          },
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          },
          "preventDefault": {
            "type": "boolean",
            "title": "Prevent Default Event",
            "default": true
          },
          "event": {
            "type": "string",
            "enum": [
              "pointerdown",
              "pointerup",
              "pointercancel",
              "pointermove",
              "pointerover",
              "pointerout",
              "pointerenter",
              "pointerleave",
              "gotpointercapture",
              "lostpointercapture"
            ],
            "title": "Pointer Event"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "any",
            "title": "Output"
          },
          "event": {
            "type": "PointerEvent",
            "title": "Event"
          }
        }
      },
      "fn": "state.in = undefined;\nstate.event = null;\nstate.preventDefault = null;\n\nstate.clickHandler = function(ev) {\n  if(state.preventDefault) ev.preventDefault();\n  output({\n    out: $.clone('in', state.in),\n    event: $.create(ev)\n  });\n};\n\non.input.in = function() {\n  state.in = $.in;\n};\n\non.input.element = function() {\n  if (state.in === undefined) return false;\n\n  if(state.el) {\n    state.el.removeEventListener(state.event);\n  }\n  state.el = $.element;\n  state.event = $.event;\n  state.preventDefault = $.preventDefault;\n\n  state.el.addEventListener($.event, state.clickHandler, false);\n  output({element: $.get('element')});\n};\n"
    },
    {
      "name": "addScript",
      "ns": "dom",
      "async": true,
      "description": "Adds a script to the head of the HTML page",
      "phrases": {
        "active": "Attaching script {input.url}"
      },
      "dependencies": {
        "npm": {
          "load-script": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "url": {
            "type": "string",
            "title": "Script Url",
            "async": true
          }
        },
        "output": {}
      },
      "fn": "on.input.url = function() {\n  load_script.load($.url, function() {\n\n  });\n};\n"
    },
    {
      "name": "addStylesheet",
      "ns": "dom",
      "async": true,
      "description": "Adds a stylesheet to the head of the HTML page",
      "phrases": {
        "active": "Attaching script {input.url}"
      },
      "ports": {
        "input": {
          "url": {
            "type": "string",
            "async": true,
            "format": "url",
            "title": "Script Url"
          }
        },
        "output": {
          "head": {
            "type": "HTMLElement",
            "title": "Head"
          },
          "link": {
            "type": "HTMLElement",
            "title": "Link"
          }
        }
      },
      "fn": "on.input.url = function() {\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var link = document.createElement('link');\n\n  link.rel  = 'stylesheet';\n  link.type = 'text/css';\n  link.href = $.url;\n  head.appendChild(link);\n\n  output({\n    head: $.create(head),\n    link: $.create(link)\n  });\n};\n"
    },
    {
      "name": "addTouchEvent",
      "ns": "dom",
      "description": "Add Touch Event Listener",
      "async": true,
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any",
            "async": true,
            "default": null
          },
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          },
          "preventDefault": {
            "type": "boolean",
            "title": "Prevent Default Event",
            "default": true
          },
          "event": {
            "type": "string",
            "enum": [
              "touchstart",
              "touchend",
              "touchmove",
              "touchenter",
              "touchleave",
              "touchcancel"
            ],
            "title": "Touch Event"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "any",
            "title": "Output"
          },
          "event": {
            "type": "TouchEvent",
            "title": "Event"
          }
        }
      },
      "fn": "state.in = undefined;\nstate.event = null;\nstate.preventDefault = null;\n\nstate.clickHandler = function(ev) {\n  if(state.preventDefault) ev.preventDefault();\n  output({\n    out: $.clone('in', state.in),\n    event: $.create(ev)\n  });\n};\n\non.input.in = function() {\n  state.in = $.in;\n};\n\non.input.element = function() {\n  if (state.in === undefined) return false;\n\n  if(state.el) {\n    state.el.removeEventListener(state.event);\n  }\n  state.el = $.element;\n  state.event = $.event;\n  state.preventDefault = $.preventDefault;\n\n  state.el.addEventListener($.event, state.clickHandler, false);\n  output({element: $.get('element')});\n};\n"
    },
    {
      "name": "addUIEvent",
      "ns": "dom",
      "description": "Add UI Event Listener",
      "async": true,
      "phrases": {
        "active": "Adding {{input.event}} handler"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any",
            "async": true,
            "default": null
          },
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          },
          "preventDefault": {
            "type": "boolean",
            "title": "Prevent Default Event",
            "default": true
          },
          "event": {
            "type": "string",
            "enum": [
              "focusin",
              "focusout",
              "DOMActivate"
            ],
            "title": "Dom Event"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "any",
            "title": "Output"
          },
          "event": {
            "type": "UIEvent",
            "title": "Event"
          }
        }
      },
      "fn": "state.in = undefined;\nstate.event = null;\nstate.preventDefault = null;\n\nstate.clickHandler = function(ev) {\n  if(state.preventDefault) ev.preventDefault();\n  output({\n    out: $.clone('in', state.in),\n    event: $.create(ev)\n  });\n};\n\non.input.in = function() {\n  state.in = $.in;\n};\n\non.input.element = function() {\n  if (state.in === undefined) return false;\n\n  if(state.el) {\n    state.el.removeEventListener(state.event);\n  }\n  state.el = $.element;\n  state.event = $.event;\n  state.preventDefault = $.preventDefault;\n\n  state.el.addEventListener($.event, state.clickHandler, false);\n  output({element: $.get('element')});\n};\n"
    },
    {
      "name": "alert",
      "ns": "dom",
      "title": "Alert",
      "description": "Alert",
      "phrases": {
        "active": "Showing alert"
      },
      "ports": {
        "input": {
          "message": {
            "title": "Message",
            "type": "any",
            "required": true
          }
        }
      },
      "fn": "on.input.message = function() {\n  alert($.message);\n};\n"
    },
    {
      "name": "appendChild",
      "ns": "dom",
      "description": "dom appendChild",
      "async": true,
      "phrases": {
        "active": "Adding child node"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "child": {
            "type": "HTMLElement",
            "async": true,
            "title": "Child Element"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "object"
          }
        }
      },
      "fn": "on.input.child = function() {\n  output( {\n    element: $.get('element'),\n    out: $.create($.element.appendChild($.child))\n  } );\n}\n"
    },
    {
      "name": "closest",
      "ns": "dom",
      "title": "Closest",
      "async": true,
      "description": " Finds the closest parent that matches a selector.",
      "expose": [
        "document"
      ],
      "dependencies": {
        "npm": {
          "discore-closest": "0.2.x"
        }
      },
      "phrases": {
        "active": "Finding closest parent: {{input.selector}}"
      },
      "ports": {
        "input": {
          "element": {
            "title": "Element",
            "description": "will check this elements parents",
            "type": "HTMLElement",
            "async": true
          },
          "selector": {
            "title": "Selector",
            "description": "CSS selector to match parents",
            "type": "string"
          },
          "checkSelf": {
            "title": "Check Self",
            "description": "check element. If falsey, will begin with element.parentNode and is synonymous to $.fn.parents. Otherwise, it's $.fn.closest.",
            "type": "boolean",
            "default": false
          },
          "within": {
            "title": "Within",
            "description": "check only within this element. By default, document",
            "type": "HTMLElement",
            "required": false
          }
        },
        "output": {
          "element": {
            "title": "Element",
            "type": "HTMLElement"
          },
          "selection": {
            "title": "Selection",
            "type": "HTMLElement"
          },
          "error": {
            "title": "Error",
            "type": "Error"
          }
        }
      },
      "fn": "on.input.element = function() {\n  var sel = discore_closest(\n    $.element, $.selector, $.checkSelf,\n    $.within || document\n  );\n  var res = { element: $.get('element')};\n  if (sel) {\n    res.selection = $.create(sel);\n  } else {\n    res.error = $.create(new Error('Selector didn\\'t match:' + $.selector));\n  }\n\n  output(res);\n};\n"
    },
    {
      "name": "confirm",
      "ns": "dom",
      "title": "Confirm",
      "description": "Confirm whether this input is go or no go",
      "phrases": {
        "active": "Confirming yes/no"
      },
      "ports": {
        "input": {
          "message": {
            "title": "Message",
            "type": "any",
            "required": true
          },
          "in": {
            "title": "Input",
            "type": "any",
            "default": ""
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "any"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "fn": "var r = confirm($.message);\nif (r) {\n  output.yes = $.get('in');\n} else {\n  output.no = $.get('in');\n}\n"
    },
    {
      "name": "createElement",
      "ns": "dom",
      "async": true,
      "description": "dom createElement",
      "phrases": {
        "active": "Creating element"
      },
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "title": "Tagname",
            "async": true,
            "default": "div"
          }
        },
        "output": {
          "out": {
            "type": "HTMLElement"
          }
        }
      },
      "fn": "on.input.in = function() {\n  output( { out: $.write('in', document.createElement($.in)) });\n}\n"
    },
    {
      "name": "document",
      "ns": "dom",
      "description": "dom document",
      "expose": [
        "window"
      ],
      "phrases": {
        "active": "Providing the dom document of the current window"
      },
      "ports": {
        "input": {
          "window": {
            "type": "Window",
            "title": "Window",
            "required": false
          }
        },
        "output": {
          "window": {
            "type": "Window",
            "title": "Window",
            "required": false
          },
          "document": {
            "type": "HTMLDocument"
          }
        }
      },
      "fn": "win = $.window || win;\noutput = {\n  document: $.create(win.document),\n  window: $.create(win)\n}\n"
    },
    {
      "name": "domify",
      "ns": "dom",
      "title": "Domify",
      "description": "Turn HTML into DOM elements x-browser",
      "phrases": {
        "active": "Domifying HTML"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Html",
            "type": "string",
            "format": "html",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "Dom Elements",
            "type": [
              "HTMLElement",
              "DocumentFragment"
            ]
          }
        }
      },
      "dependencies": {
        "npm": {
          "domify": "0.x.x"
        }
      },
      "fn": "output.out = $.write('in', domify($.in));\n"
    },
    {
      "name": "getAttribute",
      "ns": "dom",
      "title": "Get Attribute",
      "async": true,
      "description": "Get attribute",
      "expose": [
        "document"
      ],
      "phrases": {
        "active": "Getting attribute: {{input.attribute}}"
      },
      "ports": {
        "input": {
          "element": {
            "title": "Element",
            "type": "HTMLElement",
            "async": true
          },
          "attribute": {
            "title": "Attribute",
            "type": "string"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement"
          },
          "attribute": {
            "title": "Attribute",
            "type": "string"
          }
        }
      },
      "fn": "on.input.element = function() {\n  output( {\n    element: $.get('element'),\n    attribute: $.create($.element.getAttribute($.attribute))\n  });\n}\n"
    },
    {
      "name": "getElementById",
      "ns": "dom",
      "title": "getElementById",
      "async": true,
      "description": "[Get element by ID](https://developer.mozilla.org/en-US/docs/Web/API/document.getElementById)",
      "expose": [
        "document"
      ],
      "phrases": {
        "active": "Getting element with id: {{input.id}}"
      },
      "ports": {
        "input": {
          "id": {
            "title": "ID",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement"
          }
        }
      },
      "fn": "on.input.id = function() {\n  output( { element: $.create(document.getElementById($.id)) } );\n}\n"
    },
    {
      "name": "getHtml",
      "ns": "dom",
      "async": true,
      "description": "dom getHtml",
      "phrases": {
        "active": "Getting html"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "async": true,
            "title": "Dom Element"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "async": true,
            "title": "Dom Element"
          },
          "html": {
            "type": "string",
            "format": "html",
            "title": "HTML"
          }
        }
      },
      "fn": "on.input.element = function() {\n  output( {\n    element: $.get('element'),\n    html: $.create($.element.innerHTML)\n  } );\n}\n"
    },
    {
      "name": "getText",
      "ns": "dom",
      "async": true,
      "description": "dom getText",
      "phrases": {
        "active": "Getting text"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "async": true,
            "title": "Dom Element"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "async": true,
            "title": "Dom Element"
          },
          "text": {
            "type": "string",
            "title": "Text"
          }
        }
      },
      "fn": "on.input.element = function() {\n  output( {\n    element: $.get('element'),\n    text: $.create($.element.innerText)\n  } );\n}\n"
    },
    {
      "name": "getValue",
      "ns": "dom",
      "async": true,
      "description": "Take value from an input element",
      "phrases": {
        "active": "Reading value from {input.element.name}"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "string",
            "title": "Value"
          }
        }
      },
      "fn": "on.input.element = function() {\n  output({\n    element: $.get('element'),\n    out: $.create($.element.value) // never ownProperty...\n  });\n};\n"
    },
    {
      "name": "height",
      "ns": "dom",
      "description": "dom height",
      "phrases": {
        "active": "Calculating height"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "height": {
            "type": "number",
            "title": "Height"
          }
        }
      },
      "fn": "output = {\n  element: $.get('element'),\n  height: $.create($.element.getBoundingClientRect().height)\n};\n"
    },
    {
      "name": "hide",
      "ns": "dom",
      "async": true,
      "description": "dom hide",
      "phrases": {
        "active": "hideing"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          }
        }
      },
      "fn": "on.input.element = function() {\n  $.element.style.display = 'none';\n  output({ element: $.get('element') });\n};\n"
    },
    {
      "name": "image",
      "ns": "dom",
      "async": true,
      "description": "Create an image",
      "phrases": {
        "active": "Creating Image"
      },
      "ports": {
        "input": {
          "src": {
            "type": "string",
            "async": true,
            "title": "Source path"
          }
        },
        "output": {
          "image": {
            "type": "object",
            "title": "Image"
          }
        }
      },
      "fn": "on.input.src = function() {\n  var img = new Image();\n  img.onload = function() {\n    output( { image: $.create(this) } );\n  }.bind(img);\n  img.src = $.src;\n}\n"
    },
    {
      "name": "keyboard",
      "ns": "dom",
      "description": "Gives the keyboard a first class identity, normalizes keyboard events across browsers, and allows binding to multiple keys.",
      "phrases": {
        "active": "Handling keyboard"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "in": {
            "type": "string",
            "title": "Key(s)",
            "description": "a string that can be any key name or a combination of key names separated by '+' or '->'. The '+' combinator requires the keys be held together, '->' requires they be pressed in a specific sequence."
          },
          "filter": {
            "type": "string",
            "enum": [
              "activate",
              "release",
              "repeat",
              "press"
            ],
            "title": "Filter",
            "default": null
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "any",
            "title": "Keyboard event(s)"
          }
        }
      },
      "dependencies": {
        "npm": {
          "keyboard": "0.x.x"
        }
      },
      "fn": "var kb = new keyboard($.element);\n\n// todo: should be async, output is mixed now. see the docs.\noutput = [kb, 'on', $.in, $.filter];\n"
    },
    {
      "name": "offset",
      "ns": "dom",
      "description": "dom offset",
      "phrases": {
        "active": "Calculating offset"
      },
      "ports": {
        "input": {
          "window": {
            "type": "Window",
            "title": "Window"
          },
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "top": {
            "type": "number",
            "title": "Top"
          },
          "left": {
            "type": "number",
            "title": "Left"
          },
          "width": {
            "type": "number",
            "title": "Width"
          },
          "height": {
            "type": "number",
            "title": "Height"
          }
        }
      },
      "fn": "var rect = $.element.getBoundingClientRect();\noutput = {\n  element: $.get('element'),\n  left: $.create(rect.left + $.win.pageXOffset),\n  top: $.create(rect.top + $.win.pageYOffset),\n  width: $.create(rect.width),\n  height: $.create(rect.height)\n};\n"
    },
    {
      "name": "querySelector",
      "ns": "dom",
      "title": "querySelector",
      "description": "[Document query selector](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelector)",
      "expose": [
        "document"
      ],
      "phrases": {
        "active": "Gathering elements matching criteria: {{input.selector}}"
      },
      "ports": {
        "input": {
          "element": {
            "title": "Element",
            "type": "HTMLElement",
            "default": null
          },
          "selector": {
            "title": "Selector",
            "type": "string"
          }
        },
        "output": {
          "element": {
            "title": "Element",
            "type": "HTMLElement"
          },
          "selection": {
            "title": "Selection",
            "type": "HTMLElement"
          },
          "error": {
            "title": "Error",
            "type": "Error"
          }
        }
      },
      "fn": "var el;\nif ($.element) {\n  el = $.element;\n  output = {\n    element: $.get('element') \n  };\n} else {\n  el = document;\n  output = {\n    element: $.create(el) \n  };\n}\n\nvar selection = el.querySelector($.selector);\nif(selection) {\n  output.selection = $.create(selection);\n} else {\n  output.error = $.create(Error('Selector ' + $.selector + ' did not match'));\n}\n"
    },
    {
      "name": "querySelectorAll",
      "ns": "dom",
      "title": "querySelectorAll",
      "expose": [
        "window",
        "document"
      ],
      "description": "[Document querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelectorAll)",
      "phrases": {
        "active": "Gathering all elements matching criteria: {{input.selector}}"
      },
      "ports": {
        "input": {
          "element": {
            "title": "Element",
            "type": "HTMLElement",
            "default": null
          },
          "selector": {
            "title": "Selector",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "element": {
            "title": "Element",
            "type": "HTMLElement",
            "default": null
          },
          "selection": {
            "type": "object"
          },
          "error": {
            "type": "Error",
            "title": "Error"
          }
        }
      },
      "fn": "var el;\nif ($.element) {\n  el = $.element\n  output = {\n    element: $.get('element')\n  };\n} else {\n  el = document\n  output = {\n    element: $.create(el)\n  };\n}\nvar selection = el.querySelectorAll($.selector);\nif(selection) {\n  output.selection = $.create(selection);\n} else {\n  output.error = $.create(Error('Selector ' + $.selector + ' did not match'));\n}\n"
    },
    {
      "name": "ready",
      "ns": "dom",
      "title": "Dom Ready",
      "description": "Let's you know when the dom is ready",
      "phrases": {
        "active": "Waiting until dom is ready..."
      },
      "ports": {
        "input": {},
        "output": {
          "out": {
            "title": "Ready",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "domready": "1.x.x"
        }
      },
      "fn": "output = function() {\n  domready(function() {\n    cb({ out: $.create(true) });\n  });\n};\n"
    },
    {
      "name": "script",
      "ns": "dom",
      "description": "Asyncronous JavaScript loader and dependency manager",
      "phrases": {
        "active": "Loading script(s)"
      },
      "ports": {
        "input": {
          "in": {
            "type": "array",
            "title": "Url(s)",
            "items": {
              "type": "string",
              "format": "url",
              "title": "Url"
            }
          }
        },
        "output": {
          "out": {
            "title": "Success",
            "type": "boolean"
          }
        }
      },
      "dependencies": {
        "npm": {
          "scriptjs": "1.x.x"
        }
      },
      "fn": "output = function() {\n  scriptjs($.in, function() {\n    cb({ out: $.get('in') });\n  });\n};\n"
    },
    {
      "name": "setAttribute",
      "ns": "dom",
      "title": "Set Attribute",
      "async": true,
      "description": "Adds a new attribute or changes the value of an existing attribute on the specified element.",
      "expose": [
        "document"
      ],
      "phrases": {
        "active": "Setting attribute: {{input.attribute}}"
      },
      "ports": {
        "input": {
          "element": {
            "title": "Element",
            "type": "HTMLElement",
            "async": true
          },
          "attribute": {
            "title": "Attribute",
            "type": "string"
          },
          "value": {
            "title": "Value",
            "type": "string"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement"
          }
        }
      },
      "fn": "on.input.element = function() {\n  $.element.setAttribute($.attribute, $.value);\n  output( {\n    element: $.get('element')\n  });\n}\n"
    },
    {
      "name": "setHtml",
      "ns": "dom",
      "description": "dom setHtml",
      "async": true,
      "phrases": {
        "active": "Adding html"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "html": {
            "type": "string",
            "format": "html",
            "title": "html",
            "async": true
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          }
        }
      },
      "fn": "on.input.html = function() {\n  $.element.innerHTML = $.html;\n  output({ element: $.get('element') });\n};\n"
    },
    {
      "name": "setText",
      "ns": "dom",
      "description": "dom setText",
      "phrases": {
        "active": "Adding text"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "text": {
            "type": "string",
            "title": "text"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          }
        }
      },
      "fn": "$.element.innerText = $.text;\noutput = { element: $.get('element') };\n"
    },
    {
      "name": "setValue",
      "ns": "dom",
      "description": "Set value of an input element",
      "phrases": {
        "active": "Setting value for {input.element.name}"
      },
      "ports": {
        "input": {
          "in": {
            "type": "any",
            "title": "Value"
          },
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "out": {
            "type": "string",
            "title": "Value"
          }
        }
      },
      "fn": "$.element.value = $.in\noutput.element = $.get('element')\noutput.out = $.get('in')\n"
    },
    {
      "name": "show",
      "ns": "dom",
      "async": true,
      "description": "dom show",
      "phrases": {
        "active": "Showing"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          }
        }
      },
      "fn": "on.input.element = function() {\n  $.element.style.display = 'block';\n  output({ element: $.get('element') });\n};\n"
    },
    {
      "name": "toggle",
      "ns": "dom",
      "async": true,
      "description": "dom toggle",
      "phrases": {
        "active": "toggling"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element",
            "async": true
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          }
        }
      },
      "fn": "on.input.element = function() {\n  $.element.style.display = $.element.style.display === 'none' ? 'block' : 'none';\n  output({ element: $.get('element') });\n};\n"
    },
    {
      "name": "warp",
      "ns": "dom",
      "description": "dom warp",
      "expose": [
        "window",
        "document"
      ],
      "phrases": {
        "active": "Warping to frame {{input.selector}}"
      },
      "ports": {
        "input": {
          "selector": {
            "type": "string",
            "title": "Frame Selector",
            "required": true
          }
        },
        "output": {
          "window": {
            "type": "Window",
            "title": "Window",
            "required": false
          }
        }
      },
      "fn": "output = {\n  window: $.create(document.querySelector($.selector).contentWindow)\n}\n"
    },
    {
      "name": "width",
      "ns": "dom",
      "description": "dom width",
      "phrases": {
        "active": "Calculating width"
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          }
        },
        "output": {
          "element": {
            "type": "HTMLElement",
            "title": "Dom Element"
          },
          "width": {
            "type": "number",
            "title": "Width"
          }
        }
      },
      "fn": "output = {\n  element: $.get('element'),\n  width: $.create($.element.getBoundingClientRect().width)\n};\n"
    }
  ]
}